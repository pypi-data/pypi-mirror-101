.\" Man page generated from reStructuredText.
.
.TH ""  "" "" ""
.SH NAME
 \- 
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
[image: version/https://img.shields.io/github/v/tag/AndrewAtLarge/gitcat?color=success&label=version]

[image: pyversion/https://img.shields.io/badge/requires-python3.9%2B-important]

\fI\%[image: GPL3/https://img.shields.io/badge/license-GPLv3-blueviolet.svg]
\fP
.SH GIT CAT
.sp
\fIHerding a catalogue of git repositories\fP
.INDENT 0.0
.TP
.B usage: git cat [\-c CATALOGUE] [\-p PREFIX] [\-q] [\-h] [\-m MOVETO]
<command> [options] ...
.UNINDENT
.sp
Simultaneously synchronise multiple local and remote git repositories
.INDENT 0.0
.TP
.B Optional arguments:
.INDENT 7.0
.TP
.BI \-c \ CATALOGUE\fR,\fB \ \-\-catalogue \ CATALOGUE
specify the catalogue of git repositories
(default: /Users/andrew/.dotfiles/config/gitcatrc)
.TP
.BI \-p \ PREFIX\fR,\fB \ \-\-prefix \ PREFIX
Prefix directory name containing all repositories
.TP
.B  \-q\fP,\fB  \-\-quiet
Print messages only if repository changes
.TP
.B  \-h\fP,\fB  \-\-help
help: for extended help use \-hh and \-hhh
.TP
.BI \-m \ MOVETO\fR,\fB \ \-\-moveto \ MOVETO
Move repository to specified position in catalogue
.UNINDENT
.UNINDENT
.sp
Commands:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
add               Add current repository to the catalogue
branch            Print status of all branches in each repository
commit            Commit changes in all repositories
diff              Print a diff of the changes in each repository
fetch             Fetch all repositories from remote repositories
install           Install repository from the catalogue
ls                List all repositories in the catalogue
pull              Pull all repositories from remote repositories
push              Commit and push local repositories to remote repositories
remote\-set\-ssh    Change all remote URLs to use ssh access
rm                Remove repository from the catalogue
status            Print the status of all repositories
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fI\%git cat\fP is a command line tool for synchronising multiple git repositories
with remote servers from the command line. This tool is not intended to be used
on large projects with multiple developers but, instead, it is aimed at the
lone developer who has wants to synchronise multiple git repositories that live
on several computers. In particular, with one \fI\%git cat\fP command you can run git
commands on multiple git repositories, such as pushing or pulling from remote
servers, such as \fI\%bitbucket\fP and \fI\%github\fP\&. When pushing, any local changes to the
repositories will be automatically commited.
.sp
\fI\%git cat\fP provides only a thin veneer over git. It does not support all git
commands and nor does it support the full functionality of those git commands
that it does support. The \fI\%git cat\fP philosophy is to "do no harm" so, when
possible, it uses dry\-runs before changing any repository and it will only
change a repository if the dry\-run succeeds. Any problems encountered by \fIgit
cat\fP are printed to the terminal (stdout). The aim of \fI\%git cat\fP is to
streamline the management of multiple git repositories so, by default, it
prints a summary of what it does to each repository to the terminal.
.sp
By default, the \fI\%git cat\fP commands are applied to all of the repositories that
are managed by \fIgit cat\fP, however, repositories that the command is applied to
by supplying a regular expression.
.INDENT 0.0
.TP
.B Examples:
> git cat pull       # pull from all repositories
> git cat pull Code  # pull from all "Code" repositories
.UNINDENT
.sp
This makes it possible, for example, to push or pull from related git
repositories that are in different directories.
.sp
The remote repositories are accessed in the normal way using git. Ideally, they
will be set up with ssh access so that passwords are not required. If git
requires a password for a repository then you will be prompted to supply it in
the usual way.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
\fI\%git cat\fP is designed to automatically push and pull git repositories. It will
commit any uncomitted changes to your repositories and so should be used
with care. Any unintended changes to your repositories should be recoverable
using standard git commands. I have used \fI\%git cat\fP without problem since
2018 but there is always a chance that something may go wrong, so use at
your won risk.
.UNINDENT
.UNINDENT
.SS The gitcatrc file
.sp
The gitcatrc file contains the catalogue of repositories maintained by \fIgit
cat\fP\&. This file will be stored in the directory ~/.dotfiles/config, if it
exists, and otherwise it defaults to \fI~/.gitcatrc\fP\&. This location of this file
can be changed from the command line using the \fI\-c\fP command line option.
.sp
The \fI\%git cat\fP commands are only applied to those repositories that have been
"installed" using \fIgit cat install\fP\&. Consequently, if the gitcatrc file is
itself in a git repository then different computers that use this file can
synchronise different repositories using \fIgit cat\fP\&.
.sp
\fBgit cat add\fP
.sp
usage: git cat add [\-h] [\-d GIT_DIRECTORY] [\-q]
.sp
Add current repository to the catalogue
.INDENT 0.0
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.BI \-d \ GIT_DIRECTORY\fR,\fB \ \-\-directory \ GIT_DIRECTORY
Add repository from specified directory
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Add the current repository to the catalogue stored in the gitcatrc
file. An error is returned if any of the following hold:
\- the current directory is already in the git cat catalogue
\- the current directory is not contained in a git repository
\- the current directory does not have a remote a git repository
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat add  # add the current directory to the catalogue
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat branch\fP
.sp
usage: git cat branch [\-h] [\-q] [repositories]
.sp
Print status of all branches in each repository
.INDENT 0.0
.TP
.B positional arguments:
repositories  optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Run \fIgit branch \-\-verbose\fP in selected repositories in the
catalogue. This gives a summary of the status of the branches in the
repositories managed by git cat.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat branch Code
Code/Project1
  python3 6c2fcd5 Putting out the washing
Code/Project2
  master  2d2614e [ahead 1] Making some important changes
Code/Project3        already up to date
Code/Project4        already up to date
Code/Project5
  branch1 14fc541 Adding braid method to tableau
  * branch2       68480a4 git cat: updating   doc/README.rst
  master             862e2f4 Adding good stuff
Code/Project6            already up to date
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat commit\fP
.sp
usage: git cat commit [\-h] [\-a] [\-b] [\-d] [\-v] [\-q] [repositories]
.sp
Commit changes in all repositories
.INDENT 0.0
.TP
.B positional arguments:
repositories   optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-a\fP,\fB  \-\-all
automatically stage files that have been modified and deleted
.TP
.B  \-b\fP,\fB  \-\-branch
Show the branch and tracking information
.TP
.B  \-d\fP,\fB  \-\-dry\-run
Show what would be committed without committing
.TP
.B  \-v\fP,\fB  \-\-verbose
Print a unified diff for the commit
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Commit all changes in the selected repositories in the catalogue. The
commit message will list the files that were changed. This command is
provided mainly for completeness and, instead, \fIgit cat push\fP would
probably be used.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat commit
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat diff\fP
.INDENT 0.0
.TP
.B usage: git cat diff [\-h] [\-\-name\-only] [\-\-name\-status] [\-\-numstat]
[\-\-shortstat] [\-\-summary] [\-q]
[repositories]
.UNINDENT
.sp
Print a diff of the changes in each repository
.INDENT 0.0
.TP
.B positional arguments:
repositories   optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-\-name\-only
Show only names of changed files
.TP
.B  \-\-name\-status
Show only names and status of changed files
.TP
.B  \-\-numstat
Show number of added and deleted lines without abbreviating
.TP
.B  \-\-shortstat
Print number of modified files and number of added/deleted line
.TP
.B  \-\-summary
Print condensed summary of changes
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Run git diff with various options on the repositories in the
catalogue.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat diff Code
Code/Project1  up to date
Code/Project2  up to date
Code/GitCat    diff \-\-git c/gitcat.py w/gitcat.py
index b32a07f..c32a435 100644
\-\-\- c/gitcat.py
+++ w/gitcat.py
@@ \-29,16 +29,25 @@ *Examples*:
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-gitcatrc:
+The gitcatrc file:
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat fetch\fP
.INDENT 0.0
.TP
.B usage: git cat fetch [\-h] [\-\-all] [\-\-dry\-run] [\-f] [\-p] [\-t] [\-q]
[repositories]
.UNINDENT
.sp
Fetch all repositories from remote repositories
.INDENT 0.0
.TP
.B positional arguments:
repositories  optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-\-all
Fetch all branches
.TP
.B  \-\-dry\-run
Print what would be done without doing it
.TP
.B  \-f\fP,\fB  \-\-force
Fetch even if there are changes
.TP
.B  \-p\fP,\fB  \-\-prune
Before fetching, remove any remote\-tracking references that no longer exist on the remote
.TP
.B  \-t\fP,\fB  \-\-tags
Fetch all tags from remote repositories
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Run \fIgit fetch \-q \-\-progress\fP on the installed git cat repositories.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat fetch
Rep1  already up to date
Rep2  already up to date
Rep3  remote: Counting objects: 3, done\&.
  remote: Compressing objects:  33% (1/3)
  remote: Compressing objects:  66% (2/3)
  remote: Compressing objects: 100% (3/3)
  remote: Compressing objects: 100% (3/3), done\&.
  remote: Total 3 (delta 2), reused 0 (delta 0)
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat install\fP
.sp
usage: git cat install [\-h] [\-d] [\-q] [repositories]
.sp
Install repository from the catalogue
.INDENT 0.0
.TP
.B positional arguments:
repositories   optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-d\fP,\fB  \-\-dry\-run
Do everything except actually install the repositories
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Install listed repositories from the catalogue.
.sp
If a directory exists but is not a git repository then initialise the
repository and fetch from the remote.
.sp
By default all repositories are installed, however, by specifying a
regular expression for the repositories you can install a subset of the
repositories managed by git cat.abs
.sp
\fIExamples\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat install       # install all repositories managed by git cat
> git cat install Code  # install all "Code" repositories managed by git cat
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat ls\fP
.sp
usage: git cat ls [\-h] [\-q] [repositories]
.sp
List all repositories in the catalogue
.INDENT 0.0
.TP
.B positional arguments:
repositories  optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
List the repositories managed by git cat, together with the location of
their remote repository.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat ls
Code/Project1  = git@bitbucket.org:AndrewsBucket/prog1.git
Code/Project2  = git@bitbucket.org:AndrewsBucket/prog2.git
Code/Project3  = git@bitbucket.org:AndrewsBucket/prog3.git
Code/Project4  = git@bitbucket.org:AndrewsBucket/prog4.git
Code/GitCat    = git@gitgithub.com:AndrewMathas/gitcat.git
Notes/Life     = git@gitgithub.com:AndrewMathas/life.git
Stuff          = git@some.random.rep.com:Me/stuffing.git
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat pull\fP
.INDENT 0.0
.TP
.B usage: git cat pull [\-h] [\-\-all] [\-d] [\-\-ff\-only] [\-\-squash] [\-\-stat] [\-t]
[\-s <STRATEGY>] [\-\-recursive] [\-\-theirs] [\-\-ours] [\-q]
[repositories]
.UNINDENT
.sp
Pull all repositories from remote repositories
.INDENT 0.0
.TP
.B positional arguments:
repositories          optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-\-all
Pull all branches
.TP
.B  \-d\fP,\fB  \-\-dry\-run
Print what would be done without doing it
.TP
.B  \-\-ff\-only
Fast\-forward only merge
.TP
.B  \-\-squash
Squash the merge
.TP
.B  \-\-stat
Show a diffstat at the end of the merge
.TP
.B  \-t\fP,\fB  \-\-tags
Fetch all tags from remote repositories
.TP
.BI \-s \ <STRATEGY>\fR,\fB \ \-\-strategy \ <STRATEGY>
Use the specified merge strategy
.TP
.B  \-\-recursive
Use recursive three\-way merge
.TP
.B  \-\-theirs
Resolve merge conflicts favouring remote repository
.TP
.B  \-\-ours
Resolve merge conflicts favouring local repository
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Run through all repositories and update them if their directories
already exist on this computer. Unless the  \fI\-\-quiet\fP option is used,
a message is printed to give the summarise the status of the
repository.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat pull
Code/Project1  already up to date
Code/Project2  already up to date
Code/GitCat    already up to date
  remote: Counting objects: 8, done\&.
  remote: Total 8 (delta 6), reused 0 (delta 0)
Notes/Life     already up to date
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat push\fP
.INDENT 0.0
.TP
.B usage: git cat push [\-h] [\-d] [\-\-all] [\-\-prune] [\-\-tags] [\-q]
[repositories]
.UNINDENT
.sp
Commit and push local repositories to remote repositories
.INDENT 0.0
.TP
.B positional arguments:
repositories   optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-d\fP,\fB  \-\-dry\-run
Do everything except actually send the updates
.TP
.B  \-\-all
Push all branches
.TP
.B  \-\-prune
Remove remote branches that do not have a local counterpart
.TP
.B  \-\-tags
Push all tags
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Run through all installed repositories and push them to their remote
repositories. Any uncommitted repository with local changes will be
committed and the commit message listing the files that have changed.
Unless the \fI\-quiet\fP option is used, a summary of the status of
each repository is printed with each push.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat push
Code/Project1  pushed
  To bitbucket.org:AndrewsBucket/dotfiles.git
  refs/heads/master:refs/heads/master       e128dd9..904f96a
  Done
Code/Project2  up to date
Code/Project3  up to date
Code/Project4  up to date
Code/GitCat    commit
  [master 442822d] git cat: updating   gitcat.py
  1 file changed, 44 insertions(+), 5 deletions(\-)
  To bitbucket.org:AndrewsBucket/gitcat.git
  refs/heads/master:refs/heads/master       6ffeb9d..442822d
  Done
Notes/Life     up to date
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat remote\-set\-ssh\fP
.sp
usage: git cat remote\-set\-ssh [\-h] [\-q] [repositories]
.sp
Change all remote URLs to use ssh access
.INDENT 0.0
.TP
.B positional arguments:
repositories  optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Make the URLs of all repositories use SSH access (rather than HHTPS).
This is useful because it allows password\-less once the user\(aqs public
key has been uploaded to the remote repository.
.sp
This involves changing the remote URL from something like:
.INDENT 0.0
.INDENT 3.5
\fI\%https://AndrewsBucket@bitbucket.org/AndrewsBucket/webquiz.git\fP
.UNINDENT
.UNINDENT
.sp
to:
.INDENT 0.0
.INDENT 3.5
\fI\%git@bitbucket.org\fP:AndrewsBucket/webquiz.git
.UNINDENT
.UNINDENT
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat remote\-set\-ssh
Code/Project1  unchanged
Code/Project2  changed to ssh access
Code/Project3  unchanged
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat rm\fP
.sp
usage: git cat rm [\-h] [\-e] [\-d GIT_DIRECTORY] [\-q]
.sp
Remove repository from the catalogue
.INDENT 0.0
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-e\fP,\fB  \-\-everything
Delete everything, including the directory
.TP
.BI \-d \ GIT_DIRECTORY\fR,\fB \ \-\-directory \ GIT_DIRECTORY
Remove repository from specified directory
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Remove the current repository to the catalogue stored in the gitcatrc
file. An error is returned if any of the following hold:
\- the current directory is not in the git cat catalogue
\- the current directory is not contained in a git repository
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git cat remove  # remove the current directory to the catalogue
.ft P
.fi
.UNINDENT
.UNINDENT

.sp
.ce
----

.ce 0
.sp
.sp
\fBgit cat status\fP
.sp
usage: git cat status [\-h] [\-l] [\-u CHOICE] [\-q] [repositories]
.sp
Print the status of all repositories
.INDENT 0.0
.TP
.B positional arguments:
repositories          optionally filter repositories for status
.TP
.B optional arguments:
.INDENT 7.0
.TP
.B  \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B  \-l\fP,\fB  \-\-local
Only compare with local repositories
.TP
.BI \-u \ CHOICE\fR,\fB \ \-\-untracked\-files \ CHOICE
Show untracked files using git status mode (all, no, or normal)
.TP
.B  \-q\fP,\fB  \-\-quiet
only print "important" messages
.UNINDENT
.UNINDENT
.sp
Print a summary of the status of all of the repositories in the
catalogue. The name is slightly misleading as this command does not
just run \fIgit status\fP on each repository and, instead, it queries the
remote repositories to determine whether each repository is ahead or
behind the remote repository.
.sp
\fIExample\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
> git cat status Code
Code/Project1  up to date
Code/Project2  ahead 1
Code/Project3  up to date
Code/Project4  behind 1
Code/GitCat    uncommitted changes in 3 files
  M README.rst
  M git\-options.ini
  M gitcat.py
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Author
.sp
Andrew Mathas Mathas
.sp
\fI\%git cat\fP version 1.0.0
.sp
Copyright (C) 2018\-2020

.sp
.ce
----

.ce 0
.sp
.sp
GNU General Public License, Version 3, 29 June 2007
.sp
This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License (\fI\%GPL\fP) as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.
.sp
This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.
.\" Generated by docutils manpage writer.
.
