# coding: utf-8

# -----------------------------------------------------------------------------------
# <copyright company="Aspose">
#   Copyright (c) 2018 Aspose.Slides for Cloud
# </copyright>
# <summary>
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
# </summary>
# -----------------------------------------------------------------------------------

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from asposeslidescloud.apis.api_base import ApiBase
from asposeslidescloud.api_client import ApiClient
from asposeslidescloud.models.requests.slides_api_requests import *

class SlidesApi(ApiBase):

    def __init__(self, configuration = None, app_sid = None, app_key = None):
        super(SlidesApi, self).__init__(configuration, app_sid, app_key)

    def copy_file(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Copy file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_file(src_path, dest_path, src_storage_name, dest_storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source file path e.g. '/folder/file.ext'
        :param dest_path Destination file path
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :param version_id File version ID to copy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.copy_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, **kwargs)  # noqa: E501
            return data

    def copy_file_with_http_info(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Copy file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source file path e.g. '/folder/file.ext'
        :param dest_path Destination file path
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :param version_id File version ID to copy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(src_path, CopyFileRequest):
            request_object = src_path
            src_path = request_object.src_path
            dest_path = request_object.dest_path
            src_storage_name = request_object.src_storage_name
            dest_storage_name = request_object.dest_storage_name
            version_id = request_object.version_id

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'src_path' is set
        if not src_path:
            raise ValueError("Missing the required parameter `request.src_path` when calling `copy_file`")  # noqa: E501
        # verify the required parameter 'dest_path' is set
        if not dest_path:
            raise ValueError("Missing the required parameter `request.dest_path` when calling `copy_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['srcPath'] = src_path  # noqa: E501

        query_params = []
        if dest_path:
            query_params.append(('destPath', dest_path))  # noqa: E501
        if src_storage_name:
            query_params.append(('srcStorageName', src_storage_name))  # noqa: E501
        if dest_storage_name:
            query_params.append(('destStorageName', dest_storage_name))  # noqa: E501
        if version_id:
            query_params.append(('versionId', version_id))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/file/copy/{srcPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_folder(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, **kwargs):  # noqa: E501
        """Copy folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_folder(src_path, dest_path, src_storage_name, dest_storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source folder path e.g. '/src'
        :param dest_path Destination folder path e.g. '/dst'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.copy_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, **kwargs)  # noqa: E501
            return data

    def copy_folder_with_http_info(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, **kwargs):  # noqa: E501
        """Copy folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source folder path e.g. '/src'
        :param dest_path Destination folder path e.g. '/dst'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(src_path, CopyFolderRequest):
            request_object = src_path
            src_path = request_object.src_path
            dest_path = request_object.dest_path
            src_storage_name = request_object.src_storage_name
            dest_storage_name = request_object.dest_storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_folder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'src_path' is set
        if not src_path:
            raise ValueError("Missing the required parameter `request.src_path` when calling `copy_folder`")  # noqa: E501
        # verify the required parameter 'dest_path' is set
        if not dest_path:
            raise ValueError("Missing the required parameter `request.dest_path` when calling `copy_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['srcPath'] = src_path  # noqa: E501

        query_params = []
        if dest_path:
            query_params.append(('destPath', dest_path))  # noqa: E501
        if src_storage_name:
            query_params.append(('srcStorageName', src_storage_name))  # noqa: E501
        if dest_storage_name:
            query_params.append(('destStorageName', dest_storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/folder/copy/{srcPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_folder(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Create the folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_folder(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path to create e.g. 'folder_1/folder_2/'
        :param storage_name Storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_folder_with_http_info(path, storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_folder_with_http_info(path, storage_name, **kwargs)  # noqa: E501
            return data

    def create_folder_with_http_info(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Create the folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_folder_with_http_info(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path to create e.g. 'folder_1/folder_2/'
        :param storage_name Storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, CreateFolderRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_folder" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/folder/{path}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chart_category(self, name = None, slide_index = None, shape_index = None, category_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a category from a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_category(name, slide_index, shape_index, category_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category_index Category index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_chart_category_with_http_info(name, slide_index, shape_index, category_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chart_category_with_http_info(name, slide_index, shape_index, category_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_chart_category_with_http_info(self, name = None, slide_index = None, shape_index = None, category_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a category from a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_category_with_http_info(name, slide_index, shape_index, category_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category_index Category index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteChartCategoryRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            category_index = request_object.category_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chart_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_chart_category`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_chart_category`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_chart_category`")  # noqa: E501
        # verify the required parameter 'category_index' is set
        if not category_index:
            raise ValueError("Missing the required parameter `request.category_index` when calling `delete_chart_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['categoryIndex'] = category_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chart_data_point(self, name = None, slide_index = None, shape_index = None, series_index = None, point_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a data point from a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_data_point(name, slide_index, shape_index, series_index, point_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param point_index Data point index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_chart_data_point_with_http_info(self, name = None, slide_index = None, shape_index = None, series_index = None, point_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a data point from a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param point_index Data point index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteChartDataPointRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            series_index = request_object.series_index
            point_index = request_object.point_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chart_data_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_chart_data_point`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_chart_data_point`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_chart_data_point`")  # noqa: E501
        # verify the required parameter 'series_index' is set
        if not series_index:
            raise ValueError("Missing the required parameter `request.series_index` when calling `delete_chart_data_point`")  # noqa: E501
        # verify the required parameter 'point_index' is set
        if not point_index:
            raise ValueError("Missing the required parameter `request.point_index` when calling `delete_chart_data_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['seriesIndex'] = series_index  # noqa: E501
        path_params['pointIndex'] = point_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_chart_series(self, name = None, slide_index = None, shape_index = None, series_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a series from a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_series(name, slide_index, shape_index, series_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series_index Series index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_chart_series_with_http_info(name, slide_index, shape_index, series_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_chart_series_with_http_info(name, slide_index, shape_index, series_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_chart_series_with_http_info(self, name = None, slide_index = None, shape_index = None, series_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a series from a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_chart_series_with_http_info(name, slide_index, shape_index, series_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series_index Series index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteChartSeriesRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            series_index = request_object.series_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_chart_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_chart_series`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_chart_series`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_chart_series`")  # noqa: E501
        # verify the required parameter 'series_index' is set
        if not series_index:
            raise ValueError("Missing the required parameter `request.series_index` when calling `delete_chart_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['seriesIndex'] = series_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Delete file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_file(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/folder/file.ext'
        :param storage_name Storage name
        :param version_id File version ID to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_file_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
            return data

    def delete_file_with_http_info(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Delete file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_file_with_http_info(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/folder/file.ext'
        :param storage_name Storage name
        :param version_id File version ID to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, DeleteFileRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name
            version_id = request_object.version_id

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501
        if version_id:
            query_params.append(('versionId', version_id))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/file/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_folder(self, path = None, storage_name = None, recursive = None, **kwargs):  # noqa: E501
        """Delete folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_folder(path, storage_name, recursive, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path e.g. '/folder'
        :param storage_name Storage name
        :param recursive Enable to delete folders, subfolders and files
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_folder_with_http_info(path, storage_name, recursive, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_folder_with_http_info(path, storage_name, recursive, **kwargs)  # noqa: E501
            return data

    def delete_folder_with_http_info(self, path = None, storage_name = None, recursive = None, **kwargs):  # noqa: E501
        """Delete folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_folder_with_http_info(path, storage_name, recursive, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path e.g. '/folder'
        :param storage_name Storage name
        :param recursive Enable to delete folders, subfolders and files
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, DeleteFolderRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name
            recursive = request_object.recursive

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_folder" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501
        if recursive:
            query_params.append(('recursive', recursive))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/folder/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlideRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_paragraph(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_paragraph(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_paragraph_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlideParagraphRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_notes_slide_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_notes_slide_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_paragraphs(self, name = None, slide_index = None, shape_index = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_paragraphs(name, slide_index, shape_index, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_paragraphs_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlideParagraphsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraphs = request_object.paragraphs
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_notes_slide_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if paragraphs:
            query_params.append(('paragraphs', paragraphs))  # noqa: E501
            collection_formats['paragraphs'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_portion(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_portion(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_portion_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlidePortionRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            portion_index = request_object.portion_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_notes_slide_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_notes_slide_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `delete_notes_slide_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_portions(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_portions(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_portions_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlidePortionsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            portions = request_object.portions
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_notes_slide_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_notes_slide_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if portions:
            query_params.append(('portions', portions))  # noqa: E501
            collection_formats['portions'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_shape(self, name = None, slide_index = None, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_shape(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_shape_with_http_info(self, name = None, slide_index = None, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlideShapeRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_notes_slide_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_notes_slide_shapes(self, name = None, slide_index = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_shapes(name, slide_index, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_notes_slide_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_notes_slide_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_notes_slide_shapes_with_http_info(self, name = None, slide_index = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_notes_slide_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteNotesSlideShapesRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shapes = request_object.shapes
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_notes_slide_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_notes_slide_shapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_notes_slide_shapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if shapes:
            query_params.append(('shapes', shapes))  # noqa: E501
            collection_formats['shapes'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_paragraph(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_paragraph(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_paragraph_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteParagraphRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_paragraphs(self, name = None, slide_index = None, shape_index = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_paragraphs(name, slide_index, shape_index, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_paragraphs_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_paragraphs_with_http_info(name, slide_index, shape_index, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteParagraphsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraphs = request_object.paragraphs
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if paragraphs:
            query_params.append(('paragraphs', paragraphs))  # noqa: E501
            collection_formats['paragraphs'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_portion(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_portion(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_portion_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeletePortionRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            portion_index = request_object.portion_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `delete_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_portions(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_portions(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_portions_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_portions_with_http_info(name, slide_index, shape_index, paragraph_index, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeletePortionsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            portions = request_object.portions
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if portions:
            query_params.append(('portions', portions))  # noqa: E501
            collection_formats['portions'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_section(self, name = None, section_index = None, with_slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a presentation section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_section(name, section_index, with_slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index Section index.
        :param with_slides True to delete the slides related to the deleted section; move them to the remaining sections otherwise.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_section_with_http_info(name, section_index, with_slides, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_section_with_http_info(name, section_index, with_slides, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_section_with_http_info(self, name = None, section_index = None, with_slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a presentation section.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_section_with_http_info(name, section_index, with_slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index Section index.
        :param with_slides True to delete the slides related to the deleted section; move them to the remaining sections otherwise.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSectionRequest):
            request_object = name
            name = request_object.name
            section_index = request_object.section_index
            with_slides = request_object.with_slides
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_section`")  # noqa: E501
        # verify the required parameter 'section_index' is set
        if not section_index:
            raise ValueError("Missing the required parameter `request.section_index` when calling `delete_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['sectionIndex'] = section_index  # noqa: E501

        query_params = []
        if with_slides:
            query_params.append(('withSlides', with_slides))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections/{sectionIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sections(self, name = None, sections = None, with_slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete presentation sections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_sections(name, sections, with_slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param sections The indices of the sections to be deleted; delete all by default.
        :param with_slides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_sections_with_http_info(name, sections, with_slides, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sections_with_http_info(name, sections, with_slides, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_sections_with_http_info(self, name = None, sections = None, with_slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete presentation sections.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_sections_with_http_info(name, sections, with_slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param sections The indices of the sections to be deleted; delete all by default.
        :param with_slides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSectionsRequest):
            request_object = name
            name = request_object.name
            sections = request_object.sections
            with_slides = request_object.with_slides
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if sections:
            query_params.append(('sections', sections))  # noqa: E501
            collection_formats['sections'] = ''  # noqa: E501
        if with_slides:
            query_params.append(('withSlides', with_slides))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_animation(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove animation from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove animation from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation(self, request, **kwargs):  # noqa: E501
        """Remove animation from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animationRequest request: delete_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove animation from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animationRequest request: delete_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_animation_effect(self, name, slide_index, effect_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an effect from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_effect(name, slide_index, effect_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect_index Index of the effect to be removed.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_effect_with_http_info(name, slide_index, effect_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_effect_with_http_info(name, slide_index, effect_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_effect_with_http_info(self, name, slide_index, effect_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an effect from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_effect_with_http_info(name, slide_index, effect_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect_index Index of the effect to be removed.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'effect_index' is set
        if not effect_index:
            raise ValueError("Missing the required parameter `request.effect_index` when calling `delete_slide_animation_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['effectIndex'] = effect_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation_effect(self, request, **kwargs):  # noqa: E501
        """Remove an effect from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_effectRequest request: delete_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_effect(request.name, request.slide_index, request.effect_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove an effect from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_effectRequest request: delete_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_effect_with_http_info(request.name, request.slide_index, request.effect_index, request.password, request.folder, request.storage, **kwargs)

    def delete_animation_interactive_sequence(self, name, slide_index, sequence_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an interactive sequence from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequence(name, slide_index, sequence_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The index of an interactive sequence to be deleted.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_interactive_sequence_with_http_info(name, slide_index, sequence_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_interactive_sequence_with_http_info(name, slide_index, sequence_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_interactive_sequence_with_http_info(self, name, slide_index, sequence_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an interactive sequence from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequence_with_http_info(name, slide_index, sequence_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The index of an interactive sequence to be deleted.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation_interactive_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation_interactive_sequence`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation_interactive_sequence`")  # noqa: E501
        # verify the required parameter 'sequence_index' is set
        if not sequence_index:
            raise ValueError("Missing the required parameter `request.sequence_index` when calling `delete_slide_animation_interactive_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['sequenceIndex'] = sequence_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation_interactive_sequence(self, request, **kwargs):  # noqa: E501
        """Remove an interactive sequence from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequence(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequenceRequest request: delete_slide_animation_interactive_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequence(request.name, request.slide_index, request.sequence_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_interactive_sequence_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove an interactive sequence from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequence_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequenceRequest request: delete_slide_animation_interactive_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequence_with_http_info(request.name, request.slide_index, request.sequence_index, request.password, request.folder, request.storage, **kwargs)

    def delete_animation_interactive_sequence_effect(self, name, slide_index, sequence_index, effect_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an effect from slide animation interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequence_effect(name, slide_index, sequence_index, effect_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index Interactive sequence index.
        :param effect_index Index of the effect to be removed.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_interactive_sequence_effect_with_http_info(self, name, slide_index, sequence_index, effect_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove an effect from slide animation interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index Interactive sequence index.
        :param effect_index Index of the effect to be removed.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation_interactive_sequence_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'sequence_index' is set
        if not sequence_index:
            raise ValueError("Missing the required parameter `request.sequence_index` when calling `delete_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'effect_index' is set
        if not effect_index:
            raise ValueError("Missing the required parameter `request.effect_index` when calling `delete_slide_animation_interactive_sequence_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['sequenceIndex'] = sequence_index  # noqa: E501
        path_params['effectIndex'] = effect_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation_interactive_sequence_effect(self, request, **kwargs):  # noqa: E501
        """Remove an effect from slide animation interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequence_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequence_effectRequest request: delete_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequence_effect(request.name, request.slide_index, request.sequence_index, request.effect_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_interactive_sequence_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove an effect from slide animation interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequence_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequence_effectRequest request: delete_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequence_effect_with_http_info(request.name, request.slide_index, request.sequence_index, request.effect_index, request.password, request.folder, request.storage, **kwargs)

    def delete_animation_interactive_sequences(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clear all interactive sequences from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequences(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_interactive_sequences_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_interactive_sequences_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_interactive_sequences_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clear all interactive sequences from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_interactive_sequences_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation_interactive_sequences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation_interactive_sequences`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation_interactive_sequences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation_interactive_sequences(self, request, **kwargs):  # noqa: E501
        """Clear all interactive sequences from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequences(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequencesRequest request: delete_slide_animation_interactive_sequences request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequences(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_interactive_sequences_with_http_info(self, request, **kwargs):  # noqa: E501
        """Clear all interactive sequences from slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_interactive_sequences_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_interactive_sequencesRequest request: delete_slide_animation_interactive_sequences request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_interactive_sequences_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_animation_main_sequence(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clear main sequence in slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_main_sequence(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_animation_main_sequence_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_animation_main_sequence_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_animation_main_sequence_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clear main sequence in slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_animation_main_sequence_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_animation_main_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_animation_main_sequence`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_animation_main_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/mainSequence', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_animation_main_sequence(self, request, **kwargs):  # noqa: E501
        """Clear main sequence in slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_main_sequence(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_main_sequenceRequest request: delete_slide_animation_main_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_main_sequence(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_animation_main_sequence_with_http_info(self, request, **kwargs):  # noqa: E501
        """Clear main sequence in slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_animation_main_sequence_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_animation_main_sequenceRequest request: delete_slide_animation_main_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_animation_main_sequence_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a presentation slide by index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_slide_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete a presentation slide by index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_by_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_by_index`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_by_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_by_index(self, request, **kwargs):  # noqa: E501
        """Delete a presentation slide by index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_by_index(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_by_indexRequest request: delete_slide_by_index request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_slide(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_by_index_with_http_info(self, request, **kwargs):  # noqa: E501
        """Delete a presentation slide by index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_by_index_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_by_indexRequest request: delete_slide_by_index request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_slide_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_shape(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_shape(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_shape_with_http_info(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_slide_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_shape(self, request, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_shapeRequest request: delete_slide_shape request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_shape(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove a shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_shapeRequest request: delete_slide_shape request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def delete_shapes(self, name, slide_index, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_shapes(name, slide_index, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_shapes_with_http_info(self, name, slide_index, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_shapes_with_http_info(name, slide_index, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_shapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_shapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if shapes:
            query_params.append(('shapes', shapes))  # noqa: E501
            collection_formats['shapes'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_shapes(self, request, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_shapes(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_shapesRequest request: delete_slide_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_shapes(request.name, request.slide_index, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_shapes_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove a range of shapes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_shapes_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_shapesRequest request: delete_slide_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_shapes_with_http_info(request.name, request.slide_index, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def delete_subshape(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshape_with_http_info(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_subshape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_subshape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_subshape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_slide_subshape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_subshape(self, request, **kwargs):  # noqa: E501
        """Remove a shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_subshape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_subshapeRequest request: delete_slide_subshape request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_subshape(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_subshape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove a shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_subshape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_subshapeRequest request: delete_slide_subshape request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_subshape_with_http_info(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def delete_subshapes(self, name, slide_index, path = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshapes(name, slide_index, path, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshapes_with_http_info(name, slide_index, path, shapes, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshapes_with_http_info(name, slide_index, path, shapes, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshapes_with_http_info(self, name, slide_index, path = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of shapes (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshapes_with_http_info(name, slide_index, path, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path.
        :param shapes The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slide_subshapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slide_subshapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slide_subshapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501

        query_params = []
        if shapes:
            query_params.append(('shapes', shapes))  # noqa: E501
            collection_formats['shapes'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slide_subshapes(self, request, **kwargs):  # noqa: E501
        """Remove a range of shapes (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_subshapes(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_subshapesRequest request: delete_slide_subshapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_subshapes(request.name, request.slide_index, request.path, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def delete_slide_subshapes_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove a range of shapes (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slide_subshapes_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slide_subshapesRequest request: delete_slide_subshapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_subshapes_with_http_info(request.name, request.slide_index, request.path, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def delete_slides(self, name, slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete presentation slides.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides(name, slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slides The indices of the slides to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_slides_with_http_info(name, slides, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_slides_with_http_info(name, slides, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_slides_with_http_info(self, name, slides = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete presentation slides.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_with_http_info(name, slides, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slides The indices of the slides to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slides_clean_slides_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slides_clean_slides_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if slides:
            query_params.append(('slides', slides))  # noqa: E501
            collection_formats['slides'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slides_clean_slides_list(self, request, **kwargs):  # noqa: E501
        """Delete presentation slides.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_clean_slides_list(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_clean_slides_listRequest request: delete_slides_clean_slides_list request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_slides(request.name, request.slides, request.password, request.folder, request.storage, **kwargs)

    def delete_slides_clean_slides_list_with_http_info(self, request, **kwargs):  # noqa: E501
        """Delete presentation slides.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_clean_slides_list_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_clean_slides_listRequest request: delete_slides_clean_slides_list request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_slides_with_http_info(request.name, request.slides, request.password, request.folder, request.storage, **kwargs)

    def delete_document_properties(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clean document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_document_properties(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_document_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_document_properties_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Clean document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_document_properties_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slides_document_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slides_document_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slides_document_properties(self, request, **kwargs):  # noqa: E501
        """Clean document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_document_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_document_propertiesRequest request: delete_slides_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_document_properties(request.name, request.password, request.folder, request.storage, **kwargs)

    def delete_slides_document_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Clean document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_document_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_document_propertiesRequest request: delete_slides_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_document_properties_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def delete_document_property(self, name, property_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_document_property(name, property_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_document_property_with_http_info(name, property_name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_property_with_http_info(name, property_name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_document_property_with_http_info(self, name, property_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Delete document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_document_property_with_http_info(name, property_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slides_document_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slides_document_property`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if not property_name:
            raise ValueError("Missing the required parameter `request.property_name` when calling `delete_slides_document_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['propertyName'] = property_name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties/{propertyName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slides_document_property(self, request, **kwargs):  # noqa: E501
        """Delete document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_document_property(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_document_propertyRequest request: delete_slides_document_property request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_document_property(request.name, request.property_name, request.password, request.folder, request.storage, **kwargs)

    def delete_slides_document_property_with_http_info(self, request, **kwargs):  # noqa: E501
        """Delete document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_document_property_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_document_propertyRequest request: delete_slides_document_property request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_document_property_with_http_info(request.name, request.property_name, request.password, request.folder, request.storage, **kwargs)

    def delete_background(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove background from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_background(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_background_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_background_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_background_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove background from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_background_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_slides_slide_background" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_slides_slide_background`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_slides_slide_background`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/background', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideBackground',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_slides_slide_background(self, request, **kwargs):  # noqa: E501
        """Remove background from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_slide_background(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_slide_backgroundRequest request: delete_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_background(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_slides_slide_background_with_http_info(self, request, **kwargs):  # noqa: E501
        """Remove background from a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_slides_slide_background_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param delete_slides_slide_backgroundRequest request: delete_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.delete_background_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def delete_subshape_paragraph(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_paragraph(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshape_paragraph_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSubshapeParagraphRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            path = request_object.path
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subshape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_subshape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subshape_paragraphs(self, name = None, slide_index = None, shape_index = None, path = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_paragraphs(name, slide_index, shape_index, path, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, paragraphs, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshape_paragraphs_with_http_info(self, name = None, slide_index = None, shape_index = None, path = None, paragraphs = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of paragraphs (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, paragraphs, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param paragraphs The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSubshapeParagraphsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            path = request_object.path
            paragraphs = request_object.paragraphs
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subshape_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_subshape_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_subshape_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_subshape_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if paragraphs:
            query_params.append(('paragraphs', paragraphs))  # noqa: E501
            collection_formats['paragraphs'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subshape_portion(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_portion(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshape_portion_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, portion_index = None, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSubshapePortionRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            portion_index = request_object.portion_index
            path = request_object.path
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subshape_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_subshape_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_subshape_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_subshape_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_subshape_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `delete_subshape_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subshape_portions(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, path = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_portions(name, slide_index, shape_index, paragraph_index, path, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.delete_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, portions, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, portions, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def delete_subshape_portions_with_http_info(self, name = None, slide_index = None, shape_index = None, paragraph_index = None, path = None, portions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Remove a range of portions (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.delete_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, portions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param portions The indices of the shapes to be deleted; delete all by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, DeleteSubshapePortionsRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            paragraph_index = request_object.paragraph_index
            path = request_object.path
            portions = request_object.portions
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subshape_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `delete_subshape_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `delete_subshape_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `delete_subshape_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `delete_subshape_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if portions:
            query_params.append(('portions', portions))  # noqa: E501
            collection_formats['portions'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_file(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Download file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_file(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/folder/file.ext'
        :param storage_name Storage name
        :param version_id File version ID to download
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_file_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_file_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
            return data

    def download_file_with_http_info(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Download file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_file_with_http_info(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/folder/file.ext'
        :param storage_name Storage name
        :param version_id File version ID to download
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, DownloadFileRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name
            version_id = request_object.version_id

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501
        if version_id:
            query_params.append(('versionId', version_id))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/file/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_disc_usage(self, storage_name = None, **kwargs):  # noqa: E501
        """Get disc usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_disc_usage(storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param storage_name Storage name
        :return: DiscUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_disc_usage_with_http_info(storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_disc_usage_with_http_info(storage_name, **kwargs)  # noqa: E501
            return data

    def get_disc_usage_with_http_info(self, storage_name = None, **kwargs):  # noqa: E501
        """Get disc usage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_disc_usage_with_http_info(storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param storage_name Storage name
        :return: DiscUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(storage_name, GetDiscUsageRequest):
            request_object = storage_name
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_disc_usage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/disc', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DiscUsage',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_versions(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Get file versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_file_versions(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/file.ext'
        :param storage_name Storage name
        :return: FileVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_file_versions_with_http_info(path, storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_file_versions_with_http_info(path, storage_name, **kwargs)  # noqa: E501
            return data

    def get_file_versions_with_http_info(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Get file versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_file_versions_with_http_info(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File path e.g. '/file.ext'
        :param storage_name Storage name
        :return: FileVersions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, GetFileVersionsRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_versions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/version/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='FileVersions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_files_list(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Get all files and folders within a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_files_list(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path e.g. '/folder'
        :param storage_name Storage name
        :return: FilesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_files_list_with_http_info(path, storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_files_list_with_http_info(path, storage_name, **kwargs)  # noqa: E501
            return data

    def get_files_list_with_http_info(self, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Get all files and folders within a folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_files_list_with_http_info(path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path Folder path e.g. '/folder'
        :param storage_name Storage name
        :return: FilesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, GetFilesListRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_files_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/folder/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='FilesList',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_slide(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation layoutSlide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_layout_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_layout_slide_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation layoutSlide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetLayoutSlideRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_layout_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_layout_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/layoutSlides/{slideIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='LayoutSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_slides(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation layoutSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slides(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_layout_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_layout_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_layout_slides_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation layoutSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slides_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_slides_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_layout_slides_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/layoutSlides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='LayoutSlides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_layout_slides_list(self, request, **kwargs):  # noqa: E501
        """Read presentation layoutSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slides_list(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_layout_slides_listRequest request: get_layout_slides_list request object
        :return: LayoutSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_layout_slides(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_layout_slides_list_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation layoutSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_layout_slides_list_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_layout_slides_listRequest request: get_layout_slides_list request object
        :return: LayoutSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_layout_slides_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_master_slide(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation masterSlide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_master_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_master_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_master_slide_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation masterSlide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetMasterSlideRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_master_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_master_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_master_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/masterSlides/{slideIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='MasterSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_master_slides(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation masterSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slides(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_master_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_master_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_master_slides_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation masterSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slides_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_master_slides_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_master_slides_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/masterSlides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='MasterSlides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_master_slides_list(self, request, **kwargs):  # noqa: E501
        """Read presentation masterSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slides_list(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_master_slides_listRequest request: get_master_slides_list request object
        :return: MasterSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_master_slides(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_master_slides_list_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation masterSlides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_master_slides_list_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_master_slides_listRequest request: get_master_slides_list request object
        :return: MasterSlides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_master_slides_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetNotesSlideRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notes_slide_exists(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.notes_slide_exists(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.notes_slide_exists_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_slide_exists_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def notes_slide_exists_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.notes_slide_exists_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_exists`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/exist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='EntityExists',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_exists(self, request, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_exists(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_existsRequest request: get_notes_slide_exists request object
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.notes_slide_exists(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_exists_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_exists_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_existsRequest request: get_notes_slide_exists request object
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.notes_slide_exists_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_header_footer(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get header/footer info for the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_header_footer(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_header_footer_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get header/footer info for the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetNotesSlideHeaderFooterRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_header_footer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_header_footer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlideHeaderFooter',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_shape(self, name = None, slide_index = None, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_shape_with_http_info(self, name = None, slide_index = None, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetNotesSlideShapeRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            shape_index = request_object.shape_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_notes_slide_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_paragraph(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_paragraph(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_notes_slide_shape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_shape_paragraph(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_paragraphRequest request: get_notes_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_shape_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_paragraphRequest request: get_notes_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_paragraphs(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_paragraphs(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_paragraphs_with_http_info(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shape_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shape_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shape_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_notes_slide_shape_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_shape_paragraphs(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_paragraphs(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_paragraphsRequest request: get_notes_slide_shape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_paragraphs(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_shape_paragraphs_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_paragraphs_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_paragraphsRequest request: get_notes_slide_shape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_paragraphs_with_http_info(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_portion(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shape_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `get_notes_slide_shape_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_shape_portion(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_portionRequest request: get_notes_slide_shape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_shape_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_portionRequest request: get_notes_slide_shape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_portions(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_portions(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_portions_with_http_info(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shape_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shape_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shape_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_notes_slide_shape_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_notes_slide_shape_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_shape_portions(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_portions(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_portionsRequest request: get_notes_slide_shape_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_portions(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_shape_portions_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shape_portions_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_shape_portionsRequest request: get_notes_slide_shape_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_portions_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_notes_slide_shapes(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shapes(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_shapes_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_shapes_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_shapes_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_shapes_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetNotesSlideShapesRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_shapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_shapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_notes_slide(self, name, slide_index, format, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide(name, slide_index, format, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width.
        :param height Output file height.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_notes_slide_with_http_info(name, slide_index, format, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_notes_slide_with_http_info(name, slide_index, format, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_notes_slide_with_http_info(self, name, slide_index, format, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide_with_http_info(name, slide_index, format, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width.
        :param height Output file height.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notes_slide_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_notes_slide_with_format`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_notes_slide_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `get_notes_slide_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notes_slide_with_format(self, request, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_with_formatRequest request: get_notes_slide_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide(request.name, request.slide_index, request.format, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def get_notes_slide_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_notes_slide_with_formatRequest request: get_notes_slide_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide_with_http_info(request.name, request.slide_index, request.format, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def get_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_portion(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paragraph_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `get_paragraph_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_paragraph_portion(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_paragraph_portionRequest request: get_paragraph_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.password, request.folder, request.storage, **kwargs)

    def get_paragraph_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_paragraph_portionRequest request: get_paragraph_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.password, request.folder, request.storage, **kwargs)

    def get_portions(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_portions(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_portions_with_http_info(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_portions_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_paragraph_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_paragraph_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_paragraph_portions(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph_portions(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_paragraph_portionsRequest request: get_paragraph_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_portions(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_paragraph_portions_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph_portions_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_paragraph_portionsRequest request: get_paragraph_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_portions_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_sections(self, name = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation sections info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_sections(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_sections_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sections_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_sections_with_http_info(self, name = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation sections info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_sections_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetSectionsRequest):
            request_object = name
            name = request_object.name
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_animation(self, name, slide_index, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide animation effects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_animation(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index. If specified, only effects related to that shape are returned.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_animation_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_animation_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_animation_with_http_info(self, name, slide_index, shape_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide animation effects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_animation_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index. If specified, only effects related to that shape are returned.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_animation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_animation`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_animation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if shape_index:
            query_params.append(('shapeIndex', shape_index))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_animation(self, request, **kwargs):  # noqa: E501
        """Read slide animation effects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_animation(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_animationRequest request: get_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_animation(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_animation_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide animation effects.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_animation_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_animationRequest request: get_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_animation_with_http_info(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_header_footer(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get footer info for the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_header_footer(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slide_header_footer_with_http_info(self, name = None, slide_index = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get footer info for the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_header_footer_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, GetSlideHeaderFooterRequest):
            request_object = name
            name = request_object.name
            slide_index = request_object.slide_index
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_header_footer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_header_footer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/headerFooter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='HeaderFooter',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shape(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_shape(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_shape_with_http_info(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_shape_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_shape(self, request, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shapeRequest request: get_slide_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_shape(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide shape info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shapeRequest request: get_slide_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_paragraph(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_shape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_slide_shape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_shape_paragraph(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shape_paragraphRequest request: get_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_shape_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shape_paragraphRequest request: get_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.password, request.folder, request.storage, **kwargs)

    def get_paragraphs(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraphs(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_paragraphs_with_http_info(self, name, slide_index, shape_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_paragraphs_with_http_info(name, slide_index, shape_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_shape_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_shape_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_shape_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_shape_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_shape_paragraphs(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape_paragraphs(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shape_paragraphsRequest request: get_slide_shape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_paragraphs(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_shape_paragraphs_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shape_paragraphs_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shape_paragraphsRequest request: get_slide_shape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_paragraphs_with_http_info(request.name, request.slide_index, request.shape_index, request.password, request.folder, request.storage, **kwargs)

    def get_shapes(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_shapes(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_shapes_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shapes_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_shapes_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_shapes_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_shapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_shapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_shapes(self, request, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shapes(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shapesRequest request: get_slide_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_shapes(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_shapes_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_shapes_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_shapesRequest request: get_slide_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_shapes_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_subshape(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshape_with_http_info(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shape info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_with_http_info(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_subshape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_subshape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_subshape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_subshape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_subshape(self, request, **kwargs):  # noqa: E501
        """Read slide shape info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshapeRequest request: get_slide_subshape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_slide_subshape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide shape info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshapeRequest request: get_slide_subshape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_with_http_info(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_paragraph(self, name, slide_index, shape_index, paragraph_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshape_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraph info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_subshape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_slide_subshape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_subshape_paragraph(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshape_paragraphRequest request: get_slide_subshape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_slide_subshape_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraph info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshape_paragraphRequest request: get_slide_subshape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_paragraphs(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraphs(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshape_paragraphs_with_http_info(self, name, slide_index, shape_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read shape paragraphs info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraphs_with_http_info(name, slide_index, shape_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_subshape_paragraphs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_subshape_paragraphs`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_subshape_paragraphs`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_slide_subshape_paragraphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraphs',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_subshape_paragraphs(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape_paragraphs(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshape_paragraphsRequest request: get_slide_subshape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_paragraphs(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_slide_subshape_paragraphs_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read shape paragraphs info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshape_paragraphs_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshape_paragraphsRequest request: get_slide_subshape_paragraphs request object
        :return: Paragraphs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_paragraphs_with_http_info(request.name, request.slide_index, request.shape_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshapes(self, name, slide_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshapes(name, slide_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path (for smart art and group shapes).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshapes_with_http_info(name, slide_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshapes_with_http_info(name, slide_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshapes_with_http_info(self, name, slide_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshapes_with_http_info(name, slide_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path (for smart art and group shapes).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slide_subshapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slide_subshapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slide_subshapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slide_subshapes(self, request, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshapes(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshapesRequest request: get_slide_subshapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshapes(request.name, request.slide_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_slide_subshapes_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide shapes info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_subshapes_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slide_subshapesRequest request: get_slide_subshapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshapes_with_http_info(request.name, request.slide_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_api_info(self, **kwargs):  # noqa: E501
        """Get API info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_api_info(is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :return: ApiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_api_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get API info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_api_info_with_http_info(is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :return: ApiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_api_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ApiInfo',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_api_info(self, **kwargs):  # noqa: E501
        """Get API info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_api_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        
        :return: ApiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_api_info(**kwargs)

    def get_slides_api_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get API info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_api_info_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        
        :return: ApiInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_api_info_with_http_info(**kwargs)

    def get_presentation(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Documentstorage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_presentation_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_presentation_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_presentation_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Documentstorage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_document(self, request, **kwargs):  # noqa: E501
        """Read presentation info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_documentRequest request: get_slides_document request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_document_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_documentRequest request: get_slides_document request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_document_properties(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_document_properties(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_document_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_document_properties_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_document_properties_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_document_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_document_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_document_properties(self, request, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_document_propertiesRequest request: get_slides_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_document_properties(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_document_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_document_propertiesRequest request: get_slides_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_document_properties_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_document_property(self, name, property_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_document_property(name, property_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_document_property_with_http_info(name, property_name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_property_with_http_info(name, property_name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_document_property_with_http_info(self, name, property_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_document_property_with_http_info(name, property_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_document_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_document_property`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if not property_name:
            raise ValueError("Missing the required parameter `request.property_name` when calling `get_slides_document_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['propertyName'] = property_name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties/{propertyName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperty',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_document_property(self, request, **kwargs):  # noqa: E501
        """Read presentation document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document_property(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_document_propertyRequest request: get_slides_document_property request object
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_document_property(request.name, request.property_name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_document_property_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_document_property_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_document_propertyRequest request: get_slides_document_property request object
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_document_property_with_http_info(request.name, request.property_name, request.password, request.folder, request.storage, **kwargs)

    def download_image_default_format(self, name, index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_default_format(name, index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param index Image index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_image_default_format_with_http_info(name, index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.download_image_default_format_with_http_info(name, index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def download_image_default_format_with_http_info(self, name, index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_default_format_with_http_info(name, index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param index Image index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_image_with_default_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_image_with_default_format`")  # noqa: E501
        # verify the required parameter 'index' is set
        if not index:
            raise ValueError("Missing the required parameter `request.index` when calling `get_slides_image_with_default_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['index'] = index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/images/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_image_with_default_format(self, request, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_image_with_default_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_image_with_default_formatRequest request: get_slides_image_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_default_format(request.name, request.index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_image_with_default_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_image_with_default_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_image_with_default_formatRequest request: get_slides_image_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_default_format_with_http_info(request.name, request.index, request.password, request.folder, request.storage, **kwargs)

    def download_image(self, name, index, format, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image(name, index, format, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param index Image index.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_image_with_http_info(name, index, format, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.download_image_with_http_info(name, index, format, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def download_image_with_http_info(self, name, index, format, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_with_http_info(name, index, format, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param index Image index.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_image_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_image_with_format`")  # noqa: E501
        # verify the required parameter 'index' is set
        if not index:
            raise ValueError("Missing the required parameter `request.index` when calling `get_slides_image_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `get_slides_image_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['index'] = index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/images/{index}/{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_image_with_format(self, request, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_image_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_image_with_formatRequest request: get_slides_image_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image(request.name, request.index, request.format, request.password, request.folder, request.storage, **kwargs)

    def get_slides_image_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_image_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_image_with_formatRequest request: get_slides_image_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_with_http_info(request.name, request.index, request.format, request.password, request.folder, request.storage, **kwargs)

    def get_presentation_images(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation_images(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_presentation_images_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_presentation_images_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_presentation_images_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation_images_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Images',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_images(self, request, **kwargs):  # noqa: E501
        """Read presentation images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_images(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_imagesRequest request: get_slides_images request object
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation_images(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_images_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_images_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_imagesRequest request: get_slides_images request object
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation_images_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_placeholder(self, name, slide_index, placeholder_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide placeholder info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_placeholder(name, slide_index, placeholder_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param placeholder_index Placeholder index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Placeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_placeholder_with_http_info(name, slide_index, placeholder_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_placeholder_with_http_info(name, slide_index, placeholder_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_placeholder_with_http_info(self, name, slide_index, placeholder_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide placeholder info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_placeholder_with_http_info(name, slide_index, placeholder_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param placeholder_index Placeholder index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Placeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_placeholder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_placeholder`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_placeholder`")  # noqa: E501
        # verify the required parameter 'placeholder_index' is set
        if not placeholder_index:
            raise ValueError("Missing the required parameter `request.placeholder_index` when calling `get_slides_placeholder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['placeholderIndex'] = placeholder_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/placeholders/{placeholderIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Placeholder',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_placeholder(self, request, **kwargs):  # noqa: E501
        """Read slide placeholder info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_placeholder(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_placeholderRequest request: get_slides_placeholder request object
        :return: Placeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_placeholder(request.name, request.slide_index, request.placeholder_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_placeholder_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide placeholder info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_placeholder_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_placeholderRequest request: get_slides_placeholder request object
        :return: Placeholder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_placeholder_with_http_info(request.name, request.slide_index, request.placeholder_index, request.password, request.folder, request.storage, **kwargs)

    def get_placeholders(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide placeholders info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_placeholders(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Placeholders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_placeholders_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_placeholders_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_placeholders_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide placeholders info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_placeholders_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Placeholders
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_placeholders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_placeholders`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_placeholders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/placeholders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Placeholders',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_placeholders(self, request, **kwargs):  # noqa: E501
        """Read slide placeholders info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_placeholders(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_placeholdersRequest request: get_slides_placeholders request object
        :return: Placeholders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_placeholders(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_placeholders_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide placeholders info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_placeholders_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_placeholdersRequest request: get_slides_placeholders request object
        :return: Placeholders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_placeholders_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_presentation_text_items(self, name, with_empty = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Extract presentation text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation_text_items(name, with_empty, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param with_empty True to incude empty items.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_presentation_text_items_with_http_info(name, with_empty, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_presentation_text_items_with_http_info(name, with_empty, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_presentation_text_items_with_http_info(self, name, with_empty = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Extract presentation text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_presentation_text_items_with_http_info(name, with_empty, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param with_empty True to incude empty items.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_presentation_text_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_presentation_text_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if with_empty:
            query_params.append(('withEmpty', with_empty))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/textItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='TextItems',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_presentation_text_items(self, request, **kwargs):  # noqa: E501
        """Extract presentation text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_presentation_text_items(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_presentation_text_itemsRequest request: get_slides_presentation_text_items request object
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation_text_items(request.name, request.with_empty, request.password, request.folder, request.storage, **kwargs)

    def get_slides_presentation_text_items_with_http_info(self, request, **kwargs):  # noqa: E501
        """Extract presentation text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_presentation_text_items_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_presentation_text_itemsRequest request: get_slides_presentation_text_items request object
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_presentation_text_items_with_http_info(request.name, request.with_empty, request.password, request.folder, request.storage, **kwargs)

    def get_protection_properties(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_protection_properties(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_protection_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_protection_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_protection_properties_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_protection_properties_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_protection_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_protection_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/protectionProperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ProtectionProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_protection_properties(self, request, **kwargs):  # noqa: E501
        """Read presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_protection_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_protection_propertiesRequest request: get_slides_protection_properties request object
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_protection_properties(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_protection_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_protection_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_protection_propertiesRequest request: get_slides_protection_properties request object
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_protection_properties_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slide(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slide_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slide_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide(self, request, **kwargs):  # noqa: E501
        """Read presentation slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slideRequest request: get_slides_slide request object
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slideRequest request: get_slides_slide request object
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_background(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide background info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_background(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_background_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_background_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_background_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide background info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_background_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide_background" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide_background`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_slide_background`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/background', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideBackground',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide_background(self, request, **kwargs):  # noqa: E501
        """Read slide background info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_background(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_backgroundRequest request: get_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_background(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_background_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide background info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_background_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_backgroundRequest request: get_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_background_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_comments(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide comments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_comments(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideComments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_comments_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_comments_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_comments_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide comments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_comments_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideComments
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide_comments`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_slide_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideComments',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide_comments(self, request, **kwargs):  # noqa: E501
        """Read presentation slide comments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_comments(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_commentsRequest request: get_slides_slide_comments request object
        :return: SlideComments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_comments(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_comments_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation slide comments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_comments_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_commentsRequest request: get_slides_slide_comments request object
        :return: SlideComments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_comments_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_images(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_images(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slide_images_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slide_images_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slide_images_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_images_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide_images`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_slide_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Images',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide_images(self, request, **kwargs):  # noqa: E501
        """Read slide images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_images(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_imagesRequest request: get_slides_slide_images request object
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_images(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_images_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide images info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_images_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_imagesRequest request: get_slides_slide_images request object
        :return: Images
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_images_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slide_properties(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_properties(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slide_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slide_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slide_properties_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_properties_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slideProperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide_properties(self, request, **kwargs):  # noqa: E501
        """Read presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_propertiesRequest request: get_slides_slide_properties request object
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_properties(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_propertiesRequest request: get_slides_slide_properties request object
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_properties_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slide_text_items(self, name, slide_index, with_empty = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Extract slide text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_text_items(name, slide_index, with_empty, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param with_empty True to include empty items.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slide_text_items_with_http_info(name, slide_index, with_empty, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slide_text_items_with_http_info(name, slide_index, with_empty, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slide_text_items_with_http_info(self, name, slide_index, with_empty = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Extract slide text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slide_text_items_with_http_info(name, slide_index, with_empty, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param with_empty True to include empty items.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slide_text_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slide_text_items`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_slide_text_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if with_empty:
            query_params.append(('withEmpty', with_empty))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/textItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='TextItems',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slide_text_items(self, request, **kwargs):  # noqa: E501
        """Extract slide text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_text_items(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_text_itemsRequest request: get_slides_slide_text_items request object
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_text_items(request.name, request.slide_index, request.with_empty, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slide_text_items_with_http_info(self, request, **kwargs):  # noqa: E501
        """Extract slide text items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slide_text_items_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slide_text_itemsRequest request: get_slides_slide_text_items request object
        :return: TextItems
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slide_text_items_with_http_info(request.name, request.slide_index, request.with_empty, request.password, request.folder, request.storage, **kwargs)

    def get_slides(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_slides_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_slides_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation slides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_slides_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_slides_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_slides_list(self, request, **kwargs):  # noqa: E501
        """Read presentation slides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slides_list(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slides_listRequest request: get_slides_slides_list request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slides(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_slides_list_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation slides info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_slides_list_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_slides_listRequest request: get_slides_slides_list request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_slides_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_theme(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_theme(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Theme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_theme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_theme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_theme_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_theme_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Theme
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_theme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_theme`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_theme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/theme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Theme',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_theme(self, request, **kwargs):  # noqa: E501
        """Read slide theme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_themeRequest request: get_slides_theme request object
        :return: Theme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_theme(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_theme_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide theme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_themeRequest request: get_slides_theme request object
        :return: Theme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_theme_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_color_scheme(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme color scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_color_scheme(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ColorScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_color_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_color_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_color_scheme_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme color scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_color_scheme_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ColorScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_theme_color_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_theme_color_scheme`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_theme_color_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/theme/colorScheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ColorScheme',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_theme_color_scheme(self, request, **kwargs):  # noqa: E501
        """Read slide theme color scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_color_scheme(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_color_schemeRequest request: get_slides_theme_color_scheme request object
        :return: ColorScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_color_scheme(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_theme_color_scheme_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide theme color scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_color_scheme_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_color_schemeRequest request: get_slides_theme_color_scheme request object
        :return: ColorScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_color_scheme_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_font_scheme(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme font scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_font_scheme(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: FontScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_font_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_font_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_font_scheme_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme font scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_font_scheme_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: FontScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_theme_font_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_theme_font_scheme`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_theme_font_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/theme/fontScheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='FontScheme',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_theme_font_scheme(self, request, **kwargs):  # noqa: E501
        """Read slide theme font scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_font_scheme(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_font_schemeRequest request: get_slides_theme_font_scheme request object
        :return: FontScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_font_scheme(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_theme_font_scheme_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide theme font scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_font_scheme_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_font_schemeRequest request: get_slides_theme_font_scheme request object
        :return: FontScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_font_scheme_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_format_scheme(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme format scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_format_scheme(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: FormatScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_format_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_format_scheme_with_http_info(name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_format_scheme_with_http_info(self, name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read slide theme format scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_format_scheme_with_http_info(name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: FormatScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_theme_format_scheme" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_theme_format_scheme`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_slides_theme_format_scheme`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/theme/formatScheme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='FormatScheme',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_theme_format_scheme(self, request, **kwargs):  # noqa: E501
        """Read slide theme format scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_format_scheme(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_format_schemeRequest request: get_slides_theme_format_scheme request object
        :return: FormatScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_format_scheme(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_slides_theme_format_scheme_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read slide theme format scheme info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_theme_format_scheme_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_theme_format_schemeRequest request: get_slides_theme_format_scheme request object
        :return: FormatScheme
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_format_scheme_with_http_info(request.name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def get_view_properties(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_view_properties(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_view_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_view_properties_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_view_properties_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_view_properties_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slides_view_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_slides_view_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/viewProperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ViewProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_slides_view_properties(self, request, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_view_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_view_propertiesRequest request: get_slides_view_properties request object
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_view_properties(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_slides_view_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_slides_view_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_slides_view_propertiesRequest request: get_slides_view_properties request object
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_view_properties_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_portion(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshape_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portion info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subshape_paragraph_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_subshape_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_subshape_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_subshape_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_subshape_paragraph_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `get_subshape_paragraph_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subshape_paragraph_portion(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_subshape_paragraph_portionRequest request: get_subshape_paragraph_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_paragraph_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portion info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_subshape_paragraph_portionRequest request: get_subshape_paragraph_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_portions(self, name, slide_index, shape_index, paragraph_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_portions(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def get_subshape_portions_with_http_info(self, name, slide_index, shape_index, paragraph_index, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Read paragraph portions info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_portions_with_http_info(name, slide_index, shape_index, paragraph_index, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subshape_paragraph_portions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `get_subshape_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `get_subshape_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `get_subshape_paragraph_portions`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `get_subshape_paragraph_portions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portions',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subshape_paragraph_portions(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph_portions(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_subshape_paragraph_portionsRequest request: get_subshape_paragraph_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_portions(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def get_subshape_paragraph_portions_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read paragraph portions info (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_subshape_paragraph_portions_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param get_subshape_paragraph_portionsRequest request: get_subshape_paragraph_portions request object
        :return: Portions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_subshape_portions_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.path, request.password, request.folder, request.storage, **kwargs)

    def move_file(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Move file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_file(src_path, dest_path, src_storage_name, dest_storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source file path e.g. '/src.ext'
        :param dest_path Destination file path e.g. '/dest.ext'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :param version_id File version ID to move
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.move_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.move_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, **kwargs)  # noqa: E501
            return data

    def move_file_with_http_info(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Move file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_file_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Source file path e.g. '/src.ext'
        :param dest_path Destination file path e.g. '/dest.ext'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :param version_id File version ID to move
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(src_path, MoveFileRequest):
            request_object = src_path
            src_path = request_object.src_path
            dest_path = request_object.dest_path
            src_storage_name = request_object.src_storage_name
            dest_storage_name = request_object.dest_storage_name
            version_id = request_object.version_id

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'src_path' is set
        if not src_path:
            raise ValueError("Missing the required parameter `request.src_path` when calling `move_file`")  # noqa: E501
        # verify the required parameter 'dest_path' is set
        if not dest_path:
            raise ValueError("Missing the required parameter `request.dest_path` when calling `move_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['srcPath'] = src_path  # noqa: E501

        query_params = []
        if dest_path:
            query_params.append(('destPath', dest_path))  # noqa: E501
        if src_storage_name:
            query_params.append(('srcStorageName', src_storage_name))  # noqa: E501
        if dest_storage_name:
            query_params.append(('destStorageName', dest_storage_name))  # noqa: E501
        if version_id:
            query_params.append(('versionId', version_id))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/file/move/{srcPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_folder(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, **kwargs):  # noqa: E501
        """Move folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_folder(src_path, dest_path, src_storage_name, dest_storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Folder path to move e.g. '/folder'
        :param dest_path Destination folder path to move to e.g '/dst'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.move_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.move_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, **kwargs)  # noqa: E501
            return data

    def move_folder_with_http_info(self, src_path = None, dest_path = None, src_storage_name = None, dest_storage_name = None, **kwargs):  # noqa: E501
        """Move folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_folder_with_http_info(src_path, dest_path, src_storage_name, dest_storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param src_path Folder path to move e.g. '/folder'
        :param dest_path Destination folder path to move to e.g '/dst'
        :param src_storage_name Source storage name
        :param dest_storage_name Destination storage name
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(src_path, MoveFolderRequest):
            request_object = src_path
            src_path = request_object.src_path
            dest_path = request_object.dest_path
            src_storage_name = request_object.src_storage_name
            dest_storage_name = request_object.dest_storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_folder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'src_path' is set
        if not src_path:
            raise ValueError("Missing the required parameter `request.src_path` when calling `move_folder`")  # noqa: E501
        # verify the required parameter 'dest_path' is set
        if not dest_path:
            raise ValueError("Missing the required parameter `request.dest_path` when calling `move_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['srcPath'] = src_path  # noqa: E501

        query_params = []
        if dest_path:
            query_params.append(('destPath', dest_path))  # noqa: E501
        if src_storage_name:
            query_params.append(('srcStorageName', src_storage_name))  # noqa: E501
        if dest_storage_name:
            query_params.append(('destStorageName', dest_storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/folder/move/{srcPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def object_exists(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Check if file or folder exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.object_exists(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File or folder path e.g. '/file.ext' or '/folder'
        :param storage_name Storage name
        :param version_id File version ID
        :return: ObjectExist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.object_exists_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.object_exists_with_http_info(path, storage_name, version_id, **kwargs)  # noqa: E501
            return data

    def object_exists_with_http_info(self, path = None, storage_name = None, version_id = None, **kwargs):  # noqa: E501
        """Check if file or folder exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.object_exists_with_http_info(path, storage_name, version_id, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param path File or folder path e.g. '/file.ext' or '/folder'
        :param storage_name Storage name
        :param version_id File version ID
        :return: ObjectExist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(path, ObjectExistsRequest):
            request_object = path
            path = request_object.path
            storage_name = request_object.storage_name
            version_id = request_object.version_id

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method object_exists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501
        if version_id:
            query_params.append(('versionId', version_id))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/exist/{path}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ObjectExist',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_paragraph(self, name, slide_index, shape_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_paragraph(name, slide_index, shape_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_paragraph_with_http_info(self, name, slide_index, shape_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_add_new_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_paragraph(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_paragraphRequest request: post_add_new_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_paragraph(request.name, request.slide_index, request.shape_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_paragraphRequest request: post_add_new_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_portion(self, name, slide_index, shape_index, paragraph_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_portion(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_add_new_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `post_add_new_portion`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_add_new_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_portion(self, request, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_portionRequest request: post_add_new_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_portionRequest request: post_add_new_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_shape(self, name, slide_index, dto = None, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_shape(name, slide_index, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_shape_with_http_info(self, name, slide_index, dto = None, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if shape_to_clone:
            query_params.append(('shapeToClone', shape_to_clone))  # noqa: E501
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_shape(self, request, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_shapeRequest request: post_add_new_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_shape(request.name, request.slide_index, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_shapeRequest request: post_add_new_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_shape_with_http_info(request.name, request.slide_index, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_subshape(self, name, slide_index, path = None, dto = None, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape(name, slide_index, path, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_subshape_with_http_info(name, slide_index, path, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subshape_with_http_info(name, slide_index, path, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_subshape_with_http_info(self, name, slide_index, path = None, dto = None, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape_with_http_info(name, slide_index, path, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param path Shape path.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_subshape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_subshape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_subshape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501

        query_params = []
        if shape_to_clone:
            query_params.append(('shapeToClone', shape_to_clone))  # noqa: E501
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_subshape(self, request, **kwargs):  # noqa: E501
        """Create new shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshapeRequest request: post_add_new_subshape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape(request.name, request.slide_index, request.path, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_subshape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create new shape (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshapeRequest request: post_add_new_subshape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape_with_http_info(request.name, request.slide_index, request.path, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_subshape_paragraph(self, name, slide_index, shape_index, dto, path = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape_paragraph(name, slide_index, shape_index, dto, path, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param path Shape path.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_subshape_paragraph_with_http_info(name, slide_index, shape_index, dto, path, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subshape_paragraph_with_http_info(name, slide_index, shape_index, dto, path, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_subshape_paragraph_with_http_info(self, name, slide_index, shape_index, dto, path = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape_paragraph_with_http_info(name, slide_index, shape_index, dto, path, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param path Shape path.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_subshape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_add_new_subshape_paragraph`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_add_new_subshape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_subshape_paragraph(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshape_paragraphRequest request: post_add_new_subshape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape_paragraph(request.name, request.slide_index, request.shape_index, request.dto, request.path, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_subshape_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshape_paragraphRequest request: post_add_new_subshape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.path, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_subshape_portion(self, name, slide_index, shape_index, paragraph_index, dto, path = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape_portion(name, slide_index, shape_index, paragraph_index, dto, path, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param path Shape path.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_subshape_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, path = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param path Shape path.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_new_subshape_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_new_subshape_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_new_subshape_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_add_new_subshape_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `post_add_new_subshape_portion`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_add_new_subshape_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_new_subshape_portion(self, request, **kwargs):  # noqa: E501
        """Creates new portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshape_portionRequest request: post_add_new_subshape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.path, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_add_new_subshape_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new portion (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_new_subshape_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_new_subshape_portionRequest request: post_add_new_subshape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_subshape_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.path, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_notes_slide(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add new notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto A NotesSlide object with notes slide data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_notes_slide_with_http_info(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add new notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto A NotesSlide object with notes slide data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_add_notes_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_add_notes_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_add_notes_slide`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_add_notes_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_add_notes_slide(self, request, **kwargs):  # noqa: E501
        """Add new notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_notes_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_notes_slideRequest request: post_add_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def post_add_notes_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add new notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_add_notes_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_add_notes_slideRequest request: post_add_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_with_http_info(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def align_shapes(self, name, slide_index, alignment_type, align_to_slide = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.align_shapes(name, slide_index, alignment_type, align_to_slide, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param alignment_type Alignment type that will be applied to the shapes.
        :param align_to_slide If true, shapes will be aligned relative to the slide edges.
        :param shapes Shapes indexes.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.align_shapes_with_http_info(name, slide_index, alignment_type, align_to_slide, shapes, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.align_shapes_with_http_info(name, slide_index, alignment_type, align_to_slide, shapes, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def align_shapes_with_http_info(self, name, slide_index, alignment_type, align_to_slide = None, shapes = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.align_shapes_with_http_info(name, slide_index, alignment_type, align_to_slide, shapes, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param alignment_type Alignment type that will be applied to the shapes.
        :param align_to_slide If true, shapes will be aligned relative to the slide edges.
        :param shapes Shapes indexes.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_align_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_align_shapes`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_align_shapes`")  # noqa: E501
        # verify the required parameter 'alignment_type' is set
        if not alignment_type:
            raise ValueError("Missing the required parameter `request.alignment_type` when calling `post_align_shapes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['alignmentType'] = alignment_type  # noqa: E501

        query_params = []
        if align_to_slide:
            query_params.append(('alignToSlide', align_to_slide))  # noqa: E501
        if shapes:
            query_params.append(('shapes', shapes))  # noqa: E501
            collection_formats['shapes'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/align/{alignmentType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Shapes',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_align_shapes(self, request, **kwargs):  # noqa: E501
        """Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_align_shapes(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_align_shapesRequest request: post_align_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.align_shapes(request.name, request.slide_index, request.alignment_type, request.align_to_slide, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def post_align_shapes_with_http_info(self, request, **kwargs):  # noqa: E501
        """Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_align_shapes_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_align_shapesRequest request: post_align_shapes request object
        :return: Shapes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.align_shapes_with_http_info(request.name, request.slide_index, request.alignment_type, request.align_to_slide, request.shapes, request.password, request.folder, request.storage, **kwargs)

    def create_chart_category(self, name, slide_index, shape_index, category, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new category to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_category(name, slide_index, shape_index, category, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category Category DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_chart_category_with_http_info(name, slide_index, shape_index, category, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_chart_category_with_http_info(name, slide_index, shape_index, category, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_chart_category_with_http_info(self, name, slide_index, shape_index, category, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new category to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_category_with_http_info(name, slide_index, shape_index, category, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category Category DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_chart_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_chart_category`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_chart_category`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_chart_category`")  # noqa: E501
        # verify the required parameter 'category' is set
        if not category:
            raise ValueError("Missing the required parameter `request.category` when calling `post_chart_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if category:
            body_params = category

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_chart_category(self, request, **kwargs):  # noqa: E501
        """Add a new category to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_category(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_categoryRequest request: post_chart_category request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_category(request.name, request.slide_index, request.shape_index, request.category, request.password, request.folder, request.storage, **kwargs)

    def post_chart_category_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add a new category to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_category_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_categoryRequest request: post_chart_category request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_category_with_http_info(request.name, request.slide_index, request.shape_index, request.category, request.password, request.folder, request.storage, **kwargs)

    def create_chart_data_point(self, name, slide_index, shape_index, series_index, data_point, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new data point to a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_data_point(name, slide_index, shape_index, series_index, data_point, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param data_point Data point DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, data_point, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, data_point, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_chart_data_point_with_http_info(self, name, slide_index, shape_index, series_index, data_point, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new data point to a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, data_point, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param data_point Data point DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_chart_data_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_chart_data_point`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_chart_data_point`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_chart_data_point`")  # noqa: E501
        # verify the required parameter 'series_index' is set
        if not series_index:
            raise ValueError("Missing the required parameter `request.series_index` when calling `post_chart_data_point`")  # noqa: E501
        # verify the required parameter 'data_point' is set
        if not data_point:
            raise ValueError("Missing the required parameter `request.data_point` when calling `post_chart_data_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['seriesIndex'] = series_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if data_point:
            body_params = data_point

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_chart_data_point(self, request, **kwargs):  # noqa: E501
        """Add a new data point to a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_data_point(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_data_pointRequest request: post_chart_data_point request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_data_point(request.name, request.slide_index, request.shape_index, request.series_index, request.data_point, request.password, request.folder, request.storage, **kwargs)

    def post_chart_data_point_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add a new data point to a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_data_point_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_data_pointRequest request: post_chart_data_point request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_data_point_with_http_info(request.name, request.slide_index, request.shape_index, request.series_index, request.data_point, request.password, request.folder, request.storage, **kwargs)

    def create_chart_series(self, name, slide_index, shape_index, series, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new series to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_series(name, slide_index, shape_index, series, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series Series DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_chart_series_with_http_info(name, slide_index, shape_index, series, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_chart_series_with_http_info(name, slide_index, shape_index, series, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_chart_series_with_http_info(self, name, slide_index, shape_index, series, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add a new series to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_chart_series_with_http_info(name, slide_index, shape_index, series, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series Series DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_chart_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_chart_series`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_chart_series`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_chart_series`")  # noqa: E501
        # verify the required parameter 'series' is set
        if not series:
            raise ValueError("Missing the required parameter `request.series` when calling `post_chart_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if series:
            body_params = series

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_chart_series(self, request, **kwargs):  # noqa: E501
        """Add a new series to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_series(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_seriesRequest request: post_chart_series request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_series(request.name, request.slide_index, request.shape_index, request.series, request.password, request.folder, request.storage, **kwargs)

    def post_chart_series_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add a new series to a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_chart_series_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_chart_seriesRequest request: post_chart_series request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_chart_series_with_http_info(request.name, request.slide_index, request.shape_index, request.series, request.password, request.folder, request.storage, **kwargs)

    def copy_layout_slide(self, name, clone_from, clone_from_position, clone_from_password = None, clone_from_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy layoutSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_layout_slide(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param clone_from Name of the document to clone layoutSlide from.
        :param clone_from_position Position of cloned layout slide.
        :param clone_from_password Password for the document to clone layoutSlide from.
        :param clone_from_storage Storage of the document to clone layoutSlide from.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.copy_layout_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_layout_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def copy_layout_slide_with_http_info(self, name, clone_from, clone_from_position, clone_from_password = None, clone_from_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy layoutSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_layout_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param clone_from Name of the document to clone layoutSlide from.
        :param clone_from_position Position of cloned layout slide.
        :param clone_from_password Password for the document to clone layoutSlide from.
        :param clone_from_storage Storage of the document to clone layoutSlide from.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_copy_layout_slide_from_source_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_copy_layout_slide_from_source_presentation`")  # noqa: E501
        # verify the required parameter 'clone_from' is set
        if not clone_from:
            raise ValueError("Missing the required parameter `request.clone_from` when calling `post_copy_layout_slide_from_source_presentation`")  # noqa: E501
        # verify the required parameter 'clone_from_position' is set
        if not clone_from_position:
            raise ValueError("Missing the required parameter `request.clone_from_position` when calling `post_copy_layout_slide_from_source_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if clone_from:
            query_params.append(('cloneFrom', clone_from))  # noqa: E501
        if clone_from_position:
            query_params.append(('cloneFromPosition', clone_from_position))  # noqa: E501
        if clone_from_storage:
            query_params.append(('cloneFromStorage', clone_from_storage))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if clone_from_password:
            header_params['cloneFromPassword'] = clone_from_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/layoutSlides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='LayoutSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_copy_layout_slide_from_source_presentation(self, request, **kwargs):  # noqa: E501
        """Copy layoutSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_copy_layout_slide_from_source_presentation(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_copy_layout_slide_from_source_presentationRequest request: post_copy_layout_slide_from_source_presentation request object
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_layout_slide(request.name, request.clone_from, request.clone_from_position, request.clone_from_password, request.clone_from_storage, request.password, request.folder, request.storage, **kwargs)

    def post_copy_layout_slide_from_source_presentation_with_http_info(self, request, **kwargs):  # noqa: E501
        """Copy layoutSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_copy_layout_slide_from_source_presentation_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_copy_layout_slide_from_source_presentationRequest request: post_copy_layout_slide_from_source_presentation request object
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_layout_slide_with_http_info(request.name, request.clone_from, request.clone_from_position, request.clone_from_password, request.clone_from_storage, request.password, request.folder, request.storage, **kwargs)

    def copy_master_slide(self, name, clone_from, clone_from_position, clone_from_password = None, clone_from_storage = None, apply_to_all = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy masterSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_master_slide(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, apply_to_all, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param clone_from Name of the document to clone masterSlide from.
        :param clone_from_position Position of cloned master slide.
        :param clone_from_password Password for the document to clone masterSlide from.
        :param clone_from_storage Storage of the document to clone masterSlide from.
        :param apply_to_all True to apply cloned master slide to every existing slide.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.copy_master_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, apply_to_all, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_master_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, apply_to_all, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def copy_master_slide_with_http_info(self, name, clone_from, clone_from_position, clone_from_password = None, clone_from_storage = None, apply_to_all = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy masterSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_master_slide_with_http_info(name, clone_from, clone_from_position, clone_from_password, clone_from_storage, apply_to_all, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param clone_from Name of the document to clone masterSlide from.
        :param clone_from_position Position of cloned master slide.
        :param clone_from_password Password for the document to clone masterSlide from.
        :param clone_from_storage Storage of the document to clone masterSlide from.
        :param apply_to_all True to apply cloned master slide to every existing slide.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_copy_master_slide_from_source_presentation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_copy_master_slide_from_source_presentation`")  # noqa: E501
        # verify the required parameter 'clone_from' is set
        if not clone_from:
            raise ValueError("Missing the required parameter `request.clone_from` when calling `post_copy_master_slide_from_source_presentation`")  # noqa: E501
        # verify the required parameter 'clone_from_position' is set
        if not clone_from_position:
            raise ValueError("Missing the required parameter `request.clone_from_position` when calling `post_copy_master_slide_from_source_presentation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if clone_from:
            query_params.append(('cloneFrom', clone_from))  # noqa: E501
        if clone_from_position:
            query_params.append(('cloneFromPosition', clone_from_position))  # noqa: E501
        if clone_from_storage:
            query_params.append(('cloneFromStorage', clone_from_storage))  # noqa: E501
        if apply_to_all:
            query_params.append(('applyToAll', apply_to_all))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if clone_from_password:
            header_params['cloneFromPassword'] = clone_from_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/masterSlides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='MasterSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_copy_master_slide_from_source_presentation(self, request, **kwargs):  # noqa: E501
        """Copy masterSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_copy_master_slide_from_source_presentation(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_copy_master_slide_from_source_presentationRequest request: post_copy_master_slide_from_source_presentation request object
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_master_slide(request.name, request.clone_from, request.clone_from_position, request.clone_from_password, request.clone_from_storage, request.apply_to_all, request.password, request.folder, request.storage, **kwargs)

    def post_copy_master_slide_from_source_presentation_with_http_info(self, request, **kwargs):  # noqa: E501
        """Copy masterSlide from source presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_copy_master_slide_from_source_presentation_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_copy_master_slide_from_source_presentationRequest request: post_copy_master_slide_from_source_presentation request object
        :return: MasterSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_master_slide_with_http_info(request.name, request.clone_from, request.clone_from_position, request.clone_from_password, request.clone_from_storage, request.apply_to_all, request.password, request.folder, request.storage, **kwargs)

    def download_image_default_format_online(self, document, index, password = None, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_default_format_online(document, index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param index Image index.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_image_default_format_online_with_http_info(document, index, password, **kwargs)  # noqa: E501
        else:
            (data) = self.download_image_default_format_online_with_http_info(document, index, password, **kwargs)  # noqa: E501
            return data

    def download_image_default_format_online_with_http_info(self, document, index, password = None, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_default_format_online_with_http_info(document, index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param index Image index.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_image_with_default_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_export_image_with_default_format`")  # noqa: E501
        # verify the required parameter 'index' is set
        if not index:
            raise ValueError("Missing the required parameter `request.index` when calling `post_export_image_with_default_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['index'] = index  # noqa: E501

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/images/{index}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_image_with_default_format(self, request, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_image_with_default_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_image_with_default_formatRequest request: post_export_image_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_default_format_online(request.document, request.index, request.password, **kwargs)

    def post_export_image_with_default_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get image binary data.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_image_with_default_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_image_with_default_formatRequest request: post_export_image_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_default_format_online_with_http_info(request.document, request.index, request.password, **kwargs)

    def download_image_online(self, document, index, format, password = None, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_online(document, index, format, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param index Image index.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_image_online_with_http_info(document, index, format, password, **kwargs)  # noqa: E501
        else:
            (data) = self.download_image_online_with_http_info(document, index, format, password, **kwargs)  # noqa: E501
            return data

    def download_image_online_with_http_info(self, document, index, format, password = None, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_image_online_with_http_info(document, index, format, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param index Image index.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_image_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_export_image_with_format`")  # noqa: E501
        # verify the required parameter 'index' is set
        if not index:
            raise ValueError("Missing the required parameter `request.index` when calling `post_export_image_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_export_image_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['index'] = index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/images/{index}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_image_with_format(self, request, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_image_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_image_with_formatRequest request: post_export_image_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_online(request.document, request.index, request.format, request.password, **kwargs)

    def post_export_image_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get image in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_image_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_image_with_formatRequest request: post_export_image_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_image_online_with_http_info(request.document, request.index, request.format, request.password, **kwargs)

    def download_images_online(self, document, format, password = None, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_online(document, format, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_images_online_with_http_info(document, format, password, **kwargs)  # noqa: E501
        else:
            (data) = self.download_images_online_with_http_info(document, format, password, **kwargs)  # noqa: E501
            return data

    def download_images_online_with_http_info(self, document, format, password = None, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_online_with_http_info(document, format, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_images_from_request_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_export_images_from_request_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_export_images_from_request_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['format'] = format  # noqa: E501

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/images/download/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_images_from_request_with_format(self, request, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_from_request_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_from_request_with_formatRequest request: post_export_images_from_request_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_online(request.document, request.format, request.password, **kwargs)

    def post_export_images_from_request_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_from_request_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_from_request_with_formatRequest request: post_export_images_from_request_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_online_with_http_info(request.document, request.format, request.password, **kwargs)

    def download_images_default_format(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_default_format(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name 
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_images_default_format_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.download_images_default_format_with_http_info(name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def download_images_default_format_with_http_info(self, name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_default_format_with_http_info(name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name 
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_images_with_default_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_export_images_with_default_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/images/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_images_with_default_format(self, request, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_with_default_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_with_default_formatRequest request: post_export_images_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_default_format(request.name, request.password, request.folder, request.storage, **kwargs)

    def post_export_images_with_default_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_with_default_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_with_default_formatRequest request: post_export_images_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_default_format_with_http_info(request.name, request.password, request.folder, request.storage, **kwargs)

    def download_images(self, name, format, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images(name, format, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name 
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_images_with_http_info(name, format, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.download_images_with_http_info(name, format, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def download_images_with_http_info(self, name, format, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_with_http_info(name, format, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name 
        :param format Export format (png, jpg, gif).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_images_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_export_images_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_export_images_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/images/download/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_images_with_format(self, request, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_with_formatRequest request: post_export_images_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images(request.name, request.format, request.password, request.folder, request.storage, **kwargs)

    def post_export_images_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get all presentation images in specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_images_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_images_with_formatRequest request: post_export_images_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_with_http_info(request.name, request.format, request.password, request.folder, request.storage, **kwargs)

    def download_shape_online(self, document, slide_index, shape_index, format, password = None, storage = None, scale_x = None, scale_y = None, bounds = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_shape_online(document, slide_index, shape_index, format, password, storage, scale_x, scale_y, bounds, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param password Document password.
        :param storage Document storage.
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_shape_online_with_http_info(document, slide_index, shape_index, format, password, storage, scale_x, scale_y, bounds, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_shape_online_with_http_info(document, slide_index, shape_index, format, password, storage, scale_x, scale_y, bounds, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_shape_online_with_http_info(self, document, slide_index, shape_index, format, password = None, storage = None, scale_x = None, scale_y = None, bounds = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_shape_online_with_http_info(document, slide_index, shape_index, format, password, storage, scale_x, scale_y, bounds, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param password Document password.
        :param storage Document storage.
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_export_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_export_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_export_shape`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_export_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_shape(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_shapeRequest request: post_export_shape request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_shape_online(request.document, request.slide_index, request.shape_index, request.format, request.password, request.storage, request.scale_x, request.scale_y, request.bounds, request.fonts_folder, **kwargs)

    def post_export_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_shapeRequest request: post_export_shape request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_shape_online_with_http_info(request.document, request.slide_index, request.shape_index, request.format, request.password, request.storage, request.scale_x, request.scale_y, request.bounds, request.fonts_folder, **kwargs)

    def download_slide_online(self, document, slide_index, format, width = None, height = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_slide_online(document, slide_index, format, width, height, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_slide_online_with_http_info(document, slide_index, format, width, height, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_slide_online_with_http_info(document, slide_index, format, width, height, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_slide_online_with_http_info(self, document, slide_index, format, width = None, height = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_slide_online_with_http_info(document, slide_index, format, width, height, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_export_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_export_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_export_slide`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_export_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_export_slide(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_slideRequest request: post_export_slide request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_slide_online(request.document, request.slide_index, request.format, request.width, request.height, request.password, request.storage, request.fonts_folder, **kwargs)

    def post_export_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_export_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_export_slideRequest request: post_export_slide request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_slide_online_with_http_info(request.document, request.slide_index, request.format, request.width, request.height, request.password, request.storage, request.fonts_folder, **kwargs)

    def get_notes_slide_online(self, document, slide_index, password = None, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_online(document, slide_index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param password Document password.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.get_notes_slide_online_with_http_info(document, slide_index, password, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notes_slide_online_with_http_info(document, slide_index, password, **kwargs)  # noqa: E501
            return data

    def get_notes_slide_online_with_http_info(self, document, slide_index, password = None, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.get_notes_slide_online_with_http_info(document, slide_index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param password Document password.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get_notes_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_get_notes_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_get_notes_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/notesSlide', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_get_notes_slide(self, request, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slideRequest request: post_get_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_online(request.document, request.slide_index, request.password, **kwargs)

    def post_get_notes_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Read notes slide info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slideRequest request: post_get_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.get_notes_slide_online_with_http_info(request.document, request.slide_index, request.password, **kwargs)

    def notes_slide_exists_online(self, document, slide_index, password = None, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.notes_slide_exists_online(document, slide_index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param password Document password.
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.notes_slide_exists_online_with_http_info(document, slide_index, password, **kwargs)  # noqa: E501
        else:
            (data) = self.notes_slide_exists_online_with_http_info(document, slide_index, password, **kwargs)  # noqa: E501
            return data

    def notes_slide_exists_online_with_http_info(self, document, slide_index, password = None, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.notes_slide_exists_online_with_http_info(document, slide_index, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param password Document password.
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get_notes_slide_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_get_notes_slide_exists`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_get_notes_slide_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/notesSlide/exist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='EntityExists',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_get_notes_slide_exists(self, request, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide_exists(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slide_existsRequest request: post_get_notes_slide_exists request object
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.notes_slide_exists_online(request.document, request.slide_index, request.password, **kwargs)

    def post_get_notes_slide_exists_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get info whether a notes slide exists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide_exists_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slide_existsRequest request: post_get_notes_slide_exists request object
        :return: EntityExists
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.notes_slide_exists_online_with_http_info(request.document, request.slide_index, request.password, **kwargs)

    def download_notes_slide_online(self, document, slide_index, format, width = None, height = None, password = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide_online(document, slide_index, format, width, height, password, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width.
        :param height Output file height.
        :param password Document password.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_notes_slide_online_with_http_info(document, slide_index, format, width, height, password, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_notes_slide_online_with_http_info(document, slide_index, format, width, height, password, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_notes_slide_online_with_http_info(self, document, slide_index, format, width = None, height = None, password = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide_online_with_http_info(document, slide_index, format, width, height, password, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param width Output file width.
        :param height Output file height.
        :param password Document password.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_get_notes_slide_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_get_notes_slide_with_format`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_get_notes_slide_with_format`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_get_notes_slide_with_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/notesSlide/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_get_notes_slide_with_format(self, request, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide_with_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slide_with_formatRequest request: post_get_notes_slide_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide_online(request.document, request.slide_index, request.format, request.width, request.height, request.password, request.fonts_folder, **kwargs)

    def post_get_notes_slide_with_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Convert notes slide to the specified image format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_get_notes_slide_with_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_get_notes_slide_with_formatRequest request: post_get_notes_slide_with_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide_online_with_http_info(request.document, request.slide_index, request.format, request.width, request.height, request.password, request.fonts_folder, **kwargs)

    def download_images_default_format_online(self, document, password = None, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_default_format_online(document, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_images_default_format_online_with_http_info(document, password, **kwargs)  # noqa: E501
        else:
            (data) = self.download_images_default_format_online_with_http_info(document, password, **kwargs)  # noqa: E501
            return data

    def download_images_default_format_online_with_http_info(self, document, password = None, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_images_default_format_online_with_http_info(document, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_images_from_request_with_default_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_images_from_request_with_default_format`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/images/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_images_from_request_with_default_format(self, request, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_images_from_request_with_default_format(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_images_from_request_with_default_formatRequest request: post_images_from_request_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_default_format_online(request.document, request.password, **kwargs)

    def post_images_from_request_with_default_format_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get all presentation images.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_images_from_request_with_default_format_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_images_from_request_with_default_formatRequest request: post_images_from_request_with_default_format request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_images_default_format_online_with_http_info(request.document, request.password, **kwargs)

    def create_notes_slide_paragraph(self, name, slide_index, shape_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_paragraph(name, slide_index, shape_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_notes_slide_paragraph_with_http_info(self, name, slide_index, shape_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Paragraph DTO.
        :param position Position of the new paragraph in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notes_slide_add_new_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_notes_slide_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_notes_slide_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_notes_slide_add_new_paragraph`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_notes_slide_add_new_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notes_slide_add_new_paragraph(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_paragraphRequest request: post_notes_slide_add_new_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_paragraph(request.name, request.slide_index, request.shape_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_notes_slide_add_new_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new paragraph.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_paragraphRequest request: post_notes_slide_add_new_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_notes_slide_portion(self, name, slide_index, shape_index, paragraph_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_portion(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_notes_slide_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, dto, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Portion DTO.
        :param position Position of the new portion in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notes_slide_add_new_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_notes_slide_add_new_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_notes_slide_add_new_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_notes_slide_add_new_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `post_notes_slide_add_new_portion`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_notes_slide_add_new_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notes_slide_add_new_portion(self, request, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_portionRequest request: post_notes_slide_add_new_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_notes_slide_add_new_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Creates new portion.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_portionRequest request: post_notes_slide_add_new_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.position, request.password, request.folder, request.storage, **kwargs)

    def create_notes_slide_shape(self, name, slide_index, dto, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_shape(name, slide_index, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_notes_slide_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_notes_slide_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_notes_slide_shape_with_http_info(self, name, slide_index, dto, shape_to_clone = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_notes_slide_shape_with_http_info(name, slide_index, dto, shape_to_clone, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Shape DTO.
        :param shape_to_clone Optional index for clone shape instead of adding a new one.
        :param position Position of the new shape in the list. Default is at the end of the list.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notes_slide_add_new_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_notes_slide_add_new_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_notes_slide_add_new_shape`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `post_notes_slide_add_new_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if shape_to_clone:
            query_params.append(('shapeToClone', shape_to_clone))  # noqa: E501
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notes_slide_add_new_shape(self, request, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_shapeRequest request: post_notes_slide_add_new_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_shape(request.name, request.slide_index, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_notes_slide_add_new_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create new shape.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_add_new_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_add_new_shapeRequest request: post_notes_slide_add_new_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_notes_slide_shape_with_http_info(request.name, request.slide_index, request.dto, request.shape_to_clone, request.position, request.password, request.folder, request.storage, **kwargs)

    def download_notes_slide_shape(self, name, slide_index, shape_index, format, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide_shape(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_notes_slide_shape_with_http_info(self, name, slide_index, shape_index, format, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notes_slide_shape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_notes_slide_shape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notes_slide_shape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_shape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_shape_save_asRequest request: post_notes_slide_shape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide_shape(request.name, request.slide_index, request.shape_index, request.format, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_notes_slide_shape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_notes_slide_shape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_notes_slide_shape_save_asRequest request: post_notes_slide_shape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_notes_slide_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def merge(self, name, request, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge(name, request, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param request PresentationsMergeRequest with a list of presentations to merge.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.merge_with_http_info(name, request, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.merge_with_http_info(name, request, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def merge_with_http_info(self, name, request, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge_with_http_info(name, request, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param request PresentationsMergeRequest with a list of presentations to merge.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_presentation_merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_presentation_merge`")  # noqa: E501
        # verify the required parameter 'request' is set
        if not request:
            raise ValueError("Missing the required parameter `request.request` when calling `post_presentation_merge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if request:
            body_params = request

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_presentation_merge(self, request, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_merge(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_mergeRequest request: post_presentation_merge request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge(request.name, request.request, request.password, request.folder, request.storage, **kwargs)

    def post_presentation_merge_with_http_info(self, request, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_merge_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_mergeRequest request: post_presentation_merge request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge_with_http_info(request.name, request.request, request.password, request.folder, request.storage, **kwargs)

    def replace_presentation_text_online(self, document, old_value, new_value, ignore_case = None, password = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_presentation_text_online(document, old_value, new_value, ignore_case, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.replace_presentation_text_online_with_http_info(document, old_value, new_value, ignore_case, password, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_presentation_text_online_with_http_info(document, old_value, new_value, ignore_case, password, **kwargs)  # noqa: E501
            return data

    def replace_presentation_text_online_with_http_info(self, document, old_value, new_value, ignore_case = None, password = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_presentation_text_online_with_http_info(document, old_value, new_value, ignore_case, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_presentation_replace_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_presentation_replace_text`")  # noqa: E501
        # verify the required parameter 'old_value' is set
        if not old_value:
            raise ValueError("Missing the required parameter `request.old_value` when calling `post_presentation_replace_text`")  # noqa: E501
        # verify the required parameter 'new_value' is set
        if not new_value:
            raise ValueError("Missing the required parameter `request.new_value` when calling `post_presentation_replace_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if old_value:
            query_params.append(('oldValue', old_value))  # noqa: E501
        if new_value:
            query_params.append(('newValue', new_value))  # noqa: E501
        if ignore_case:
            query_params.append(('ignoreCase', ignore_case))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/replaceText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_presentation_replace_text(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_replace_text(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_replace_textRequest request: post_presentation_replace_text request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_presentation_text_online(request.document, request.old_value, request.new_value, request.ignore_case, request.password, **kwargs)

    def post_presentation_replace_text_with_http_info(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_replace_text_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_replace_textRequest request: post_presentation_replace_text request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_presentation_text_online_with_http_info(request.document, request.old_value, request.new_value, request.ignore_case, request.password, **kwargs)

    def split_online(self, document, format, width = None, height = None, _from = None, to = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split_online(document, format, width, height, _from, to, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format ExportFormat
        :param width Slide width.
        :param height Slide height.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.split_online_with_http_info(document, format, width, height, _from, to, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.split_online_with_http_info(document, format, width, height, _from, to, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def split_online_with_http_info(self, document, format, width = None, height = None, _from = None, to = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split_online_with_http_info(document, format, width, height, _from, to, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format ExportFormat
        :param width Slide width.
        :param height Slide height.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_presentation_split" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_presentation_split`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_presentation_split`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['format'] = format  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if _from:
            query_params.append(('from', _from))  # noqa: E501
        if to:
            query_params.append(('to', to))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/split/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_presentation_split(self, request, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_split(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_splitRequest request: post_presentation_split request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split_online(request.document, request.format, request.width, request.height, request._from, request.to, request.password, request.storage, request.fonts_folder, **kwargs)

    def post_presentation_split_with_http_info(self, request, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_presentation_split_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_presentation_splitRequest request: post_presentation_split request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split_online_with_http_info(request.document, request.format, request.width, request.height, request._from, request.to, request.password, request.storage, request.fonts_folder, **kwargs)

    def create_section(self, name, section_name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a section starting at a specified slide index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_section(name, section_name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_name Section name.
        :param slide_index Slide index (one-based).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_section_with_http_info(name, section_name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_section_with_http_info(name, section_name, slide_index, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_section_with_http_info(self, name, section_name, slide_index, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a section starting at a specified slide index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_section_with_http_info(name, section_name, slide_index, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_name Section name.
        :param slide_index Slide index (one-based).
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_section`")  # noqa: E501
        # verify the required parameter 'section_name' is set
        if not section_name:
            raise ValueError("Missing the required parameter `request.section_name` when calling `post_section`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if section_name:
            query_params.append(('sectionName', section_name))  # noqa: E501
        if slide_index:
            query_params.append(('slideIndex', slide_index))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_section(self, request, **kwargs):  # noqa: E501
        """Create a section starting at a specified slide index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_section(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_sectionRequest request: post_section request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_section(request.name, request.section_name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def post_section_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create a section starting at a specified slide index.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_section_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_sectionRequest request: post_section request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_section_with_http_info(request.name, request.section_name, request.slide_index, request.password, request.folder, request.storage, **kwargs)

    def move_section(self, name, section_index, new_position, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Move presentation section to a specified position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_section(name, section_index, new_position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index The position of the section to be reordered.
        :param new_position The new position of the reordered section.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.move_section_with_http_info(name, section_index, new_position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.move_section_with_http_info(name, section_index, new_position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def move_section_with_http_info(self, name, section_index, new_position, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Move presentation section to a specified position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_section_with_http_info(name, section_index, new_position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index The position of the section to be reordered.
        :param new_position The new position of the reordered section.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_section_move" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_section_move`")  # noqa: E501
        # verify the required parameter 'section_index' is set
        if not section_index:
            raise ValueError("Missing the required parameter `request.section_index` when calling `post_section_move`")  # noqa: E501
        # verify the required parameter 'new_position' is set
        if not new_position:
            raise ValueError("Missing the required parameter `request.new_position` when calling `post_section_move`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['sectionIndex'] = section_index  # noqa: E501

        query_params = []
        if new_position:
            query_params.append(('newPosition', new_position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections/{sectionIndex}/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_section_move(self, request, **kwargs):  # noqa: E501
        """Move presentation section to a specified position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_section_move(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_section_moveRequest request: post_section_move request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.move_section(request.name, request.section_index, request.new_position, request.password, request.folder, request.storage, **kwargs)

    def post_section_move_with_http_info(self, request, **kwargs):  # noqa: E501
        """Move presentation section to a specified position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_section_move_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_section_moveRequest request: post_section_move request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.move_section_with_http_info(request.name, request.section_index, request.new_position, request.password, request.folder, request.storage, **kwargs)

    def download_shape(self, name, slide_index, shape_index, format, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_shape(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_shape_with_http_info(self, name, slide_index, shape_index, format, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_shape_with_http_info(name, slide_index, shape_index, format, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_shape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_shape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_shape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_shape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_shape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_shape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_shape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_shape_save_asRequest request: post_shape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_shape(request.name, request.slide_index, request.shape_index, request.format, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_shape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_shape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_shape_save_asRequest request: post_shape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def create_animation_effect(self, name, slide_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add an effect to slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_effect(name, slide_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_animation_effect_with_http_info(name, slide_index, effect, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_animation_effect_with_http_info(name, slide_index, effect, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_animation_effect_with_http_info(self, name, slide_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add an effect to slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_effect_with_http_info(name, slide_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slide_animation_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'effect' is set
        if not effect:
            raise ValueError("Missing the required parameter `request.effect` when calling `post_slide_animation_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if effect:
            body_params = effect

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/mainSequence', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slide_animation_effect(self, request, **kwargs):  # noqa: E501
        """Add an effect to slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_effectRequest request: post_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_effect(request.name, request.slide_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def post_slide_animation_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add an effect to slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_effectRequest request: post_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_effect_with_http_info(request.name, request.slide_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def create_animation_interactive_sequence(self, name, slide_index, sequence, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_interactive_sequence(name, slide_index, sequence, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence Animation sequence DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_animation_interactive_sequence_with_http_info(name, slide_index, sequence, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_animation_interactive_sequence_with_http_info(name, slide_index, sequence, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_animation_interactive_sequence_with_http_info(self, name, slide_index, sequence, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_interactive_sequence_with_http_info(name, slide_index, sequence, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence Animation sequence DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slide_animation_interactive_sequence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slide_animation_interactive_sequence`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slide_animation_interactive_sequence`")  # noqa: E501
        # verify the required parameter 'sequence' is set
        if not sequence:
            raise ValueError("Missing the required parameter `request.sequence` when calling `post_slide_animation_interactive_sequence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if sequence:
            body_params = sequence

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slide_animation_interactive_sequence(self, request, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_interactive_sequence(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_interactive_sequenceRequest request: post_slide_animation_interactive_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_interactive_sequence(request.name, request.slide_index, request.sequence, request.password, request.folder, request.storage, **kwargs)

    def post_slide_animation_interactive_sequence_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_interactive_sequence_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_interactive_sequenceRequest request: post_slide_animation_interactive_sequence request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_interactive_sequence_with_http_info(request.name, request.slide_index, request.sequence, request.password, request.folder, request.storage, **kwargs)

    def create_animation_interactive_sequence_effect(self, name, slide_index, sequence_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add an animation effect to a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_interactive_sequence_effect(name, slide_index, sequence_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The position of the interactive sequence.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_animation_interactive_sequence_effect_with_http_info(self, name, slide_index, sequence_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Add an animation effect to a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The position of the interactive sequence.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slide_animation_interactive_sequence_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'sequence_index' is set
        if not sequence_index:
            raise ValueError("Missing the required parameter `request.sequence_index` when calling `post_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'effect' is set
        if not effect:
            raise ValueError("Missing the required parameter `request.effect` when calling `post_slide_animation_interactive_sequence_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['sequenceIndex'] = sequence_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if effect:
            body_params = effect

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slide_animation_interactive_sequence_effect(self, request, **kwargs):  # noqa: E501
        """Add an animation effect to a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_interactive_sequence_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_interactive_sequence_effectRequest request: post_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_interactive_sequence_effect(request.name, request.slide_index, request.sequence_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def post_slide_animation_interactive_sequence_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Add an animation effect to a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_animation_interactive_sequence_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_animation_interactive_sequence_effectRequest request: post_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_animation_interactive_sequence_effect_with_http_info(request.name, request.slide_index, request.sequence_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def replace_slide_text_online(self, document, slide_index, old_value, new_value, ignore_case = None, password = None, **kwargs):  # noqa: E501
        """Replace slide text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_slide_text_online(document, slide_index, old_value, new_value, ignore_case, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Index of target slide.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.replace_slide_text_online_with_http_info(document, slide_index, old_value, new_value, ignore_case, password, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_slide_text_online_with_http_info(document, slide_index, old_value, new_value, ignore_case, password, **kwargs)  # noqa: E501
            return data

    def replace_slide_text_online_with_http_info(self, document, slide_index, old_value, new_value, ignore_case = None, password = None, **kwargs):  # noqa: E501
        """Replace slide text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_slide_text_online_with_http_info(document, slide_index, old_value, new_value, ignore_case, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Index of target slide.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slide_replace_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'old_value' is set
        if not old_value:
            raise ValueError("Missing the required parameter `request.old_value` when calling `post_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'new_value' is set
        if not new_value:
            raise ValueError("Missing the required parameter `request.new_value` when calling `post_slide_replace_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if old_value:
            query_params.append(('oldValue', old_value))  # noqa: E501
        if new_value:
            query_params.append(('newValue', new_value))  # noqa: E501
        if ignore_case:
            query_params.append(('ignoreCase', ignore_case))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/replaceText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slide_replace_text(self, request, **kwargs):  # noqa: E501
        """Replace slide text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_replace_text(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_replace_textRequest request: post_slide_replace_text request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_slide_text_online(request.document, request.slide_index, request.old_value, request.new_value, request.ignore_case, request.password, **kwargs)

    def post_slide_replace_text_with_http_info(self, request, **kwargs):  # noqa: E501
        """Replace slide text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_replace_text_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_replace_textRequest request: post_slide_replace_text request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_slide_text_online_with_http_info(request.document, request.slide_index, request.old_value, request.new_value, request.ignore_case, request.password, **kwargs)

    def download_slide(self, name, slide_index, format, options = None, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_slide(name, slide_index, format, options, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param options Export options.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_slide_with_http_info(name, slide_index, format, options, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_slide_with_http_info(name, slide_index, format, options, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_slide_with_http_info(self, name, slide_index, format, options = None, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_slide_with_http_info(name, slide_index, format, options, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param options Export options.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slide_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slide_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slide_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_slide_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slide_save_as(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_save_asRequest request: post_slide_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_slide(request.name, request.slide_index, request.format, request.options, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_slide_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slide_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slide_save_asRequest request: post_slide_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_slide_with_http_info(request.name, request.slide_index, request.format, request.options, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def create_slide(self, name, layout_alias = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_slide(name, layout_alias, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param layout_alias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index
        :param position The target position at which to create the slide. Add to the end by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_slide_with_http_info(name, layout_alias, position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_slide_with_http_info(name, layout_alias, position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_slide_with_http_info(self, name, layout_alias = None, position = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_slide_with_http_info(name, layout_alias, position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param layout_alias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index
        :param position The target position at which to create the slide. Add to the end by default.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if layout_alias:
            query_params.append(('layoutAlias', layout_alias))  # noqa: E501
        if position:
            query_params.append(('position', position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_add(self, request, **kwargs):  # noqa: E501
        """Create a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_add(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_addRequest request: post_slides_add request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_slide(request.name, request.layout_alias, request.position, request.password, request.folder, request.storage, **kwargs)

    def post_slides_add_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_add_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_addRequest request: post_slides_add request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_slide_with_http_info(request.name, request.layout_alias, request.position, request.password, request.folder, request.storage, **kwargs)

    def convert(self, document, format, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.convert(document, format, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.convert_with_http_info(document, format, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.convert_with_http_info(document, format, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def convert_with_http_info(self, document, format, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.convert_with_http_info(document, format, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_convert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `post_slides_convert`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_slides_convert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['format'] = format  # noqa: E501

        query_params = []
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/convert/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_convert(self, request, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_convert(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_convertRequest request: post_slides_convert request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.convert(request.document, request.format, request.password, request.storage, request.fonts_folder, **kwargs)

    def post_slides_convert_with_http_info(self, request, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_convert_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_convertRequest request: post_slides_convert request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.convert_with_http_info(request.document, request.format, request.password, request.storage, request.fonts_folder, **kwargs)

    def copy_slide(self, name, slide_to_copy, position = None, source = None, source_password = None, source_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy a slide from the current or another presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_slide(name, slide_to_copy, position, source, source_password, source_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_to_copy The index of the slide to be copied from the source presentation.
        :param position The target position at which to copy the slide. Copy to the end by default.
        :param source Name of the document to copy a slide from.
        :param source_password Password for the document to copy a slide from.
        :param source_storage Template storage name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.copy_slide_with_http_info(name, slide_to_copy, position, source, source_password, source_storage, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_slide_with_http_info(name, slide_to_copy, position, source, source_password, source_storage, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def copy_slide_with_http_info(self, name, slide_to_copy, position = None, source = None, source_password = None, source_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Copy a slide from the current or another presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.copy_slide_with_http_info(name, slide_to_copy, position, source, source_password, source_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_to_copy The index of the slide to be copied from the source presentation.
        :param position The target position at which to copy the slide. Copy to the end by default.
        :param source Name of the document to copy a slide from.
        :param source_password Password for the document to copy a slide from.
        :param source_storage Template storage name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_copy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_copy`")  # noqa: E501
        # verify the required parameter 'slide_to_copy' is set
        if not slide_to_copy:
            raise ValueError("Missing the required parameter `request.slide_to_copy` when calling `post_slides_copy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if slide_to_copy:
            query_params.append(('slideToCopy', slide_to_copy))  # noqa: E501
        if position:
            query_params.append(('position', position))  # noqa: E501
        if source:
            query_params.append(('source', source))  # noqa: E501
        if source_storage:
            query_params.append(('sourceStorage', source_storage))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if source_password:
            header_params['sourcePassword'] = source_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_copy(self, request, **kwargs):  # noqa: E501
        """Copy a slide from the current or another presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_copy(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_copyRequest request: post_slides_copy request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_slide(request.name, request.slide_to_copy, request.position, request.source, request.source_password, request.source_storage, request.password, request.folder, request.storage, **kwargs)

    def post_slides_copy_with_http_info(self, request, **kwargs):  # noqa: E501
        """Copy a slide from the current or another presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_copy_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_copyRequest request: post_slides_copy request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.copy_slide_with_http_info(request.name, request.slide_to_copy, request.position, request.source, request.source_password, request.source_storage, request.password, request.folder, request.storage, **kwargs)

    def create_presentation(self, name, data = None, input_password = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation(name, data, input_password, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param data Document input data.
        :param input_password The password for input document.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_presentation_with_http_info(name, data, input_password, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_presentation_with_http_info(name, data, input_password, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_presentation_with_http_info(self, name, data = None, input_password = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation_with_http_info(name, data, input_password, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param data Document input data.
        :param input_password The password for input document.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if input_password:
            header_params['inputPassword'] = input_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if data:
            param_files['data'] = data  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_document(self, request, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_documentRequest request: post_slides_document request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation(request.name, request.data, request.input_password, request.password, request.folder, request.storage, **kwargs)

    def post_slides_document_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_documentRequest request: post_slides_document request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation_with_http_info(request.name, request.data, request.input_password, request.password, request.folder, request.storage, **kwargs)

    def import_from_html(self, name, html = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.import_from_html(name, html, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param html HTML data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.import_from_html_with_http_info(name, html, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.import_from_html_with_http_info(name, html, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def import_from_html_with_http_info(self, name, html = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.import_from_html_with_http_info(name, html, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param html HTML data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_document_from_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_document_from_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if html:
            body_params = html

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/fromHtml', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_document_from_html(self, request, **kwargs):  # noqa: E501
        """Create presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_html(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_htmlRequest request: post_slides_document_from_html request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.import_from_html(request.name, request.html, request.password, request.folder, request.storage, **kwargs)

    def post_slides_document_from_html_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_html_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_htmlRequest request: post_slides_document_from_html request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.import_from_html_with_http_info(request.name, request.html, request.password, request.folder, request.storage, **kwargs)

    def import_from_pdf(self, name, pdf = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create presentation document from pdf or append pdf to an existing presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.import_from_pdf(name, pdf, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param pdf PDF data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.import_from_pdf_with_http_info(name, pdf, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.import_from_pdf_with_http_info(name, pdf, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def import_from_pdf_with_http_info(self, name, pdf = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create presentation document from pdf or append pdf to an existing presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.import_from_pdf_with_http_info(name, pdf, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param pdf PDF data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_document_from_pdf" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_document_from_pdf`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if pdf:
            param_files['pdf'] = pdf  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/fromPdf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_document_from_pdf(self, request, **kwargs):  # noqa: E501
        """Create presentation document from pdf or append pdf to an existing presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_pdf(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_pdfRequest request: post_slides_document_from_pdf request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.import_from_pdf(request.name, request.pdf, request.password, request.folder, request.storage, **kwargs)

    def post_slides_document_from_pdf_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create presentation document from pdf or append pdf to an existing presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_pdf_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_pdfRequest request: post_slides_document_from_pdf request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.import_from_pdf_with_http_info(request.name, request.pdf, request.password, request.folder, request.storage, **kwargs)

    def create_presentation_from_source(self, name, source_path = None, source_password = None, source_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation from an existing source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation_from_source(name, source_path, source_password, source_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param source_path Template file path.
        :param source_password Template file password.
        :param source_storage Template storage name.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_presentation_from_source_with_http_info(name, source_path, source_password, source_storage, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_presentation_from_source_with_http_info(name, source_path, source_password, source_storage, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_presentation_from_source_with_http_info(self, name, source_path = None, source_password = None, source_storage = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation from an existing source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation_from_source_with_http_info(name, source_path, source_password, source_storage, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param source_path Template file path.
        :param source_password Template file password.
        :param source_storage Template storage name.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_document_from_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_document_from_source`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if source_path:
            query_params.append(('sourcePath', source_path))  # noqa: E501
        if source_storage:
            query_params.append(('sourceStorage', source_storage))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if source_password:
            header_params['sourcePassword'] = source_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/fromSource', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_document_from_source(self, request, **kwargs):  # noqa: E501
        """Create a presentation from an existing source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_source(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_sourceRequest request: post_slides_document_from_source request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation_from_source(request.name, request.source_path, request.source_password, request.source_storage, request.password, request.folder, request.storage, **kwargs)

    def post_slides_document_from_source_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create a presentation from an existing source.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_source_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_sourceRequest request: post_slides_document_from_source request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation_from_source_with_http_info(request.name, request.source_path, request.source_password, request.source_storage, request.password, request.folder, request.storage, **kwargs)

    def create_presentation_from_template(self, name, template_path, data = None, template_password = None, template_storage = None, is_image_data_embedded = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation_from_template(name, template_path, data, template_password, template_storage, is_image_data_embedded, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param template_path Template file path.
        :param data Document input data.
        :param template_password Template file password.
        :param template_storage Template storage name.
        :param is_image_data_embedded True if image data is embedded.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.create_presentation_from_template_with_http_info(name, template_path, data, template_password, template_storage, is_image_data_embedded, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.create_presentation_from_template_with_http_info(name, template_path, data, template_password, template_storage, is_image_data_embedded, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def create_presentation_from_template_with_http_info(self, name, template_path, data = None, template_password = None, template_storage = None, is_image_data_embedded = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.create_presentation_from_template_with_http_info(name, template_path, data, template_password, template_storage, is_image_data_embedded, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param template_path Template file path.
        :param data Document input data.
        :param template_password Template file password.
        :param template_storage Template storage name.
        :param is_image_data_embedded True if image data is embedded.
        :param password The document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_document_from_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_document_from_template`")  # noqa: E501
        # verify the required parameter 'template_path' is set
        if not template_path:
            raise ValueError("Missing the required parameter `request.template_path` when calling `post_slides_document_from_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if template_path:
            query_params.append(('templatePath', template_path))  # noqa: E501
        if template_storage:
            query_params.append(('templateStorage', template_storage))  # noqa: E501
        if is_image_data_embedded:
            query_params.append(('isImageDataEmbedded', is_image_data_embedded))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if template_password:
            header_params['templatePassword'] = template_password  # noqa: E501
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if data:
            body_params = data

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/fromTemplate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_document_from_template(self, request, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_template(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_templateRequest request: post_slides_document_from_template request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation_from_template(request.name, request.template_path, request.data, request.template_password, request.template_storage, request.is_image_data_embedded, request.password, request.folder, request.storage, **kwargs)

    def post_slides_document_from_template_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_document_from_template_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_document_from_templateRequest request: post_slides_document_from_template request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.create_presentation_from_template_with_http_info(request.name, request.template_path, request.data, request.template_password, request.template_storage, request.is_image_data_embedded, request.password, request.folder, request.storage, **kwargs)

    def merge_online(self, files = None, request = None, password = None, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge_online(files, request, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param files Files to merge
        :param request Merge request.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.merge_online_with_http_info(files, request, password, **kwargs)  # noqa: E501
        else:
            (data) = self.merge_online_with_http_info(files, request, password, **kwargs)  # noqa: E501
            return data

    def merge_online_with_http_info(self, files = None, request = None, password = None, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge_online_with_http_info(files, request, password, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param files Files to merge
        :param request Merge request.
        :param password Document password.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_merge" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        param_files = files

        body_params = None
        if request:
            body_params = request

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_merge(self, request, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_merge(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_mergeRequest request: post_slides_merge request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge_online(request.files, request.request, request.password, **kwargs)

    def post_slides_merge_with_http_info(self, request, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_merge_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_mergeRequest request: post_slides_merge request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge_online_with_http_info(request.files, request.request, request.password, **kwargs)

    def pipeline(self, pipeline, files = None, **kwargs):  # noqa: E501
        """Performs slides pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.pipeline(pipeline, files, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param pipeline A Pipeline object.
        :param files Files to upload with the pipeline
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.pipeline_with_http_info(pipeline, files, **kwargs)  # noqa: E501
        else:
            (data) = self.pipeline_with_http_info(pipeline, files, **kwargs)  # noqa: E501
            return data

    def pipeline_with_http_info(self, pipeline, files = None, **kwargs):  # noqa: E501
        """Performs slides pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.pipeline_with_http_info(pipeline, files, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param pipeline A Pipeline object.
        :param files Files to upload with the pipeline
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_pipeline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline' is set
        if not pipeline:
            raise ValueError("Missing the required parameter `request.pipeline` when calling `post_slides_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        param_files = {}
        param_files = files

        body_params = None
        if pipeline:
            body_params = pipeline

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/pipeline', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_pipeline(self, request, **kwargs):  # noqa: E501
        """Performs slides pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_pipeline(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_pipelineRequest request: post_slides_pipeline request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.pipeline(request.pipeline, request.files, **kwargs)

    def post_slides_pipeline_with_http_info(self, request, **kwargs):  # noqa: E501
        """Performs slides pipeline.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_pipeline_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_pipelineRequest request: post_slides_pipeline request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.pipeline_with_http_info(request.pipeline, request.files, **kwargs)

    def replace_presentation_text(self, name, old_value, new_value, ignore_case = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_presentation_text(name, old_value, new_value, ignore_case, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.replace_presentation_text_with_http_info(name, old_value, new_value, ignore_case, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_presentation_text_with_http_info(name, old_value, new_value, ignore_case, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def replace_presentation_text_with_http_info(self, name, old_value, new_value, ignore_case = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_presentation_text_with_http_info(name, old_value, new_value, ignore_case, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_presentation_replace_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_presentation_replace_text`")  # noqa: E501
        # verify the required parameter 'old_value' is set
        if not old_value:
            raise ValueError("Missing the required parameter `request.old_value` when calling `post_slides_presentation_replace_text`")  # noqa: E501
        # verify the required parameter 'new_value' is set
        if not new_value:
            raise ValueError("Missing the required parameter `request.new_value` when calling `post_slides_presentation_replace_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if old_value:
            query_params.append(('oldValue', old_value))  # noqa: E501
        if new_value:
            query_params.append(('newValue', new_value))  # noqa: E501
        if ignore_case:
            query_params.append(('ignoreCase', ignore_case))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/replaceText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentReplaceResult',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_presentation_replace_text(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_presentation_replace_text(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_presentation_replace_textRequest request: post_slides_presentation_replace_text request object
        :return: DocumentReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_presentation_text(request.name, request.old_value, request.new_value, request.ignore_case, request.password, request.folder, request.storage, **kwargs)

    def post_slides_presentation_replace_text_with_http_info(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_presentation_replace_text_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_presentation_replace_textRequest request: post_slides_presentation_replace_text request object
        :return: DocumentReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_presentation_text_with_http_info(request.name, request.old_value, request.new_value, request.ignore_case, request.password, request.folder, request.storage, **kwargs)

    def move_slide(self, name, slide_index, new_position, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Reorder presentation slide position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_slide(name, slide_index, new_position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param new_position The new position of the reordered slide.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.move_slide_with_http_info(name, slide_index, new_position, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.move_slide_with_http_info(name, slide_index, new_position, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def move_slide_with_http_info(self, name, slide_index, new_position, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Reorder presentation slide position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.move_slide_with_http_info(name, slide_index, new_position, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param new_position The new position of the reordered slide.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_reorder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_reorder`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slides_reorder`")  # noqa: E501
        # verify the required parameter 'new_position' is set
        if not new_position:
            raise ValueError("Missing the required parameter `request.new_position` when calling `post_slides_reorder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if new_position:
            query_params.append(('newPosition', new_position))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_reorder(self, request, **kwargs):  # noqa: E501
        """Reorder presentation slide position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_reorder(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_reorderRequest request: post_slides_reorder request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.move_slide(request.name, request.slide_index, request.new_position, request.password, request.folder, request.storage, **kwargs)

    def post_slides_reorder_with_http_info(self, request, **kwargs):  # noqa: E501
        """Reorder presentation slide position.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_reorder_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_reorderRequest request: post_slides_reorder request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.move_slide_with_http_info(request.name, request.slide_index, request.new_position, request.password, request.folder, request.storage, **kwargs)

    def reorder_slides(self, name, old_positions = None, new_positions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Reorder presentation slides positions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.reorder_slides(name, old_positions, new_positions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param old_positions A comma separated array of positions of slides to be reordered.
        :param new_positions A comma separated array of new slide positions.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.reorder_slides_with_http_info(name, old_positions, new_positions, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_slides_with_http_info(name, old_positions, new_positions, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def reorder_slides_with_http_info(self, name, old_positions = None, new_positions = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Reorder presentation slides positions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.reorder_slides_with_http_info(name, old_positions, new_positions, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param old_positions A comma separated array of positions of slides to be reordered.
        :param new_positions A comma separated array of new slide positions.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_reorder_many" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_reorder_many`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if old_positions:
            query_params.append(('oldPositions', old_positions))  # noqa: E501
            collection_formats['oldPositions'] = ''  # noqa: E501
        if new_positions:
            query_params.append(('newPositions', new_positions))  # noqa: E501
            collection_formats['newPositions'] = ''  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/reorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slides',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_reorder_many(self, request, **kwargs):  # noqa: E501
        """Reorder presentation slides positions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_reorder_many(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_reorder_manyRequest request: post_slides_reorder_many request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.reorder_slides(request.name, request.old_positions, request.new_positions, request.password, request.folder, request.storage, **kwargs)

    def post_slides_reorder_many_with_http_info(self, request, **kwargs):  # noqa: E501
        """Reorder presentation slides positions.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_reorder_many_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_reorder_manyRequest request: post_slides_reorder_many request object
        :return: Slides
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.reorder_slides_with_http_info(request.name, request.old_positions, request.new_positions, request.password, request.folder, request.storage, **kwargs)

    def download_presentation(self, name, format, options = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_presentation(name, format, options, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param format Export format.
        :param options Export options.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_presentation_with_http_info(name, format, options, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_presentation_with_http_info(name, format, options, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_presentation_with_http_info(self, name, format, options = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_presentation_with_http_info(name, format, options, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param format Export format.
        :param options Export options.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_slides_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_save_as(self, request, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_save_asRequest request: post_slides_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_presentation(request.name, request.format, request.options, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_slides_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_save_asRequest request: post_slides_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_presentation_with_http_info(request.name, request.format, request.options, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def set_document_properties(self, name, properties, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_document_properties(name, properties, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param properties New properties.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_document_properties_with_http_info(name, properties, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_document_properties_with_http_info(name, properties, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_document_properties_with_http_info(self, name, properties, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_document_properties_with_http_info(name, properties, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param properties New properties.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_set_document_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_set_document_properties`")  # noqa: E501
        # verify the required parameter 'properties' is set
        if not properties:
            raise ValueError("Missing the required parameter `request.properties` when calling `post_slides_set_document_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if properties:
            body_params = properties

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_set_document_properties(self, request, **kwargs):  # noqa: E501
        """Set document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_set_document_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_set_document_propertiesRequest request: post_slides_set_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_document_properties(request.name, request.properties, request.password, request.folder, request.storage, **kwargs)

    def post_slides_set_document_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_set_document_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_set_document_propertiesRequest request: post_slides_set_document_properties request object
        :return: DocumentProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_document_properties_with_http_info(request.name, request.properties, request.password, request.folder, request.storage, **kwargs)

    def replace_slide_text(self, name, slide_index, old_value, new_value, ignore_case = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_slide_text(name, slide_index, old_value, new_value, ignore_case, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.replace_slide_text_with_http_info(name, slide_index, old_value, new_value, ignore_case, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_slide_text_with_http_info(name, slide_index, old_value, new_value, ignore_case, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def replace_slide_text_with_http_info(self, name, slide_index, old_value, new_value, ignore_case = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.replace_slide_text_with_http_info(name, slide_index, old_value, new_value, ignore_case, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param old_value Text value to be replaced.
        :param new_value Text value to replace with.
        :param ignore_case True if character case must be ignored.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_slide_replace_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_slides_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'old_value' is set
        if not old_value:
            raise ValueError("Missing the required parameter `request.old_value` when calling `post_slides_slide_replace_text`")  # noqa: E501
        # verify the required parameter 'new_value' is set
        if not new_value:
            raise ValueError("Missing the required parameter `request.new_value` when calling `post_slides_slide_replace_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if old_value:
            query_params.append(('oldValue', old_value))  # noqa: E501
        if new_value:
            query_params.append(('newValue', new_value))  # noqa: E501
        if ignore_case:
            query_params.append(('ignoreCase', ignore_case))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/replaceText', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideReplaceResult',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_slide_replace_text(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_slide_replace_text(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_slide_replace_textRequest request: post_slides_slide_replace_text request object
        :return: SlideReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_slide_text(request.name, request.slide_index, request.old_value, request.new_value, request.ignore_case, request.password, request.folder, request.storage, **kwargs)

    def post_slides_slide_replace_text_with_http_info(self, request, **kwargs):  # noqa: E501
        """Replace text with a new value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_slide_replace_text_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_slide_replace_textRequest request: post_slides_slide_replace_text request object
        :return: SlideReplaceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.replace_slide_text_with_http_info(request.name, request.slide_index, request.old_value, request.new_value, request.ignore_case, request.password, request.folder, request.storage, **kwargs)

    def split(self, name, options = None, format = None, width = None, height = None, _from = None, to = None, dest_folder = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splitting presentations. Create one image per slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split(name, options, format, width, height, _from, to, dest_folder, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param options Export options.
        :param format Export format. Default value is jpeg.
        :param width The width of created images.
        :param height The height of created images.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.split_with_http_info(name, options, format, width, height, _from, to, dest_folder, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.split_with_http_info(name, options, format, width, height, _from, to, dest_folder, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def split_with_http_info(self, name, options = None, format = None, width = None, height = None, _from = None, to = None, dest_folder = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splitting presentations. Create one image per slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split_with_http_info(name, options, format, width, height, _from, to, dest_folder, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param options Export options.
        :param format Export format. Default value is jpeg.
        :param width The width of created images.
        :param height The height of created images.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_slides_split" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_slides_split`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if format:
            query_params.append(('format', format))  # noqa: E501
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if _from:
            query_params.append(('from', _from))  # noqa: E501
        if to:
            query_params.append(('to', to))  # noqa: E501
        if dest_folder:
            query_params.append(('destFolder', dest_folder))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/split', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SplitDocumentResult',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_slides_split(self, request, **kwargs):  # noqa: E501
        """Splitting presentations. Create one image per slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_split(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_splitRequest request: post_slides_split request object
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split(request.name, request.options, request.format, request.width, request.height, request._from, request.to, request.dest_folder, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_slides_split_with_http_info(self, request, **kwargs):  # noqa: E501
        """Splitting presentations. Create one image per slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_slides_split_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_slides_splitRequest request: post_slides_split request object
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split_with_http_info(request.name, request.options, request.format, request.width, request.height, request._from, request.to, request.dest_folder, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def download_subshape(self, name, slide_index, shape_index, format, path = None, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_subshape(name, slide_index, shape_index, format, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param path Shape path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.download_subshape_with_http_info(name, slide_index, shape_index, format, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.download_subshape_with_http_info(name, slide_index, shape_index, format, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def download_subshape_with_http_info(self, name, slide_index, shape_index, format, path = None, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.download_subshape_with_http_info(name, slide_index, shape_index, format, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param path Shape path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_subshape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `post_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `post_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `post_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `post_subshape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_subshape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_subshape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_subshape_save_asRequest request: post_subshape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_subshape(request.name, request.slide_index, request.shape_index, request.format, request.path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def post_subshape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.post_subshape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param post_subshape_save_asRequest request: post_subshape_save_as request object
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.download_subshape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def update_chart_category(self, name, slide_index, shape_index, category_index, category, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a chart category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_category(name, slide_index, shape_index, category_index, category, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category_index Category index.
        :param category Category DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_chart_category_with_http_info(name, slide_index, shape_index, category_index, category, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_chart_category_with_http_info(name, slide_index, shape_index, category_index, category, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_chart_category_with_http_info(self, name, slide_index, shape_index, category_index, category, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a chart category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_category_with_http_info(name, slide_index, shape_index, category_index, category, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param category_index Category index.
        :param category Category DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_chart_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_chart_category`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_chart_category`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_chart_category`")  # noqa: E501
        # verify the required parameter 'category_index' is set
        if not category_index:
            raise ValueError("Missing the required parameter `request.category_index` when calling `put_chart_category`")  # noqa: E501
        # verify the required parameter 'category' is set
        if not category:
            raise ValueError("Missing the required parameter `request.category` when calling `put_chart_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['categoryIndex'] = category_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if category:
            body_params = category

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_chart_category(self, request, **kwargs):  # noqa: E501
        """Update a chart category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_category(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_categoryRequest request: put_chart_category request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_category(request.name, request.slide_index, request.shape_index, request.category_index, request.category, request.password, request.folder, request.storage, **kwargs)

    def put_chart_category_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update a chart category.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_category_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_categoryRequest request: put_chart_category request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_category_with_http_info(request.name, request.slide_index, request.shape_index, request.category_index, request.category, request.password, request.folder, request.storage, **kwargs)

    def update_chart_data_point(self, name, slide_index, shape_index, series_index, point_index, data_point, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a data point in a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_data_point(name, slide_index, shape_index, series_index, point_index, data_point, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param point_index Data point index.
        :param data_point Data point DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, data_point, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, data_point, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_chart_data_point_with_http_info(self, name, slide_index, shape_index, series_index, point_index, data_point, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a data point in a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_data_point_with_http_info(name, slide_index, shape_index, series_index, point_index, data_point, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param series_index Series index.
        :param point_index Data point index.
        :param data_point Data point DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_chart_data_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_chart_data_point`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_chart_data_point`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_chart_data_point`")  # noqa: E501
        # verify the required parameter 'series_index' is set
        if not series_index:
            raise ValueError("Missing the required parameter `request.series_index` when calling `put_chart_data_point`")  # noqa: E501
        # verify the required parameter 'point_index' is set
        if not point_index:
            raise ValueError("Missing the required parameter `request.point_index` when calling `put_chart_data_point`")  # noqa: E501
        # verify the required parameter 'data_point' is set
        if not data_point:
            raise ValueError("Missing the required parameter `request.data_point` when calling `put_chart_data_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['seriesIndex'] = series_index  # noqa: E501
        path_params['pointIndex'] = point_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if data_point:
            body_params = data_point

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_chart_data_point(self, request, **kwargs):  # noqa: E501
        """Update a data point in a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_data_point(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_data_pointRequest request: put_chart_data_point request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_data_point(request.name, request.slide_index, request.shape_index, request.series_index, request.point_index, request.data_point, request.password, request.folder, request.storage, **kwargs)

    def put_chart_data_point_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update a data point in a chart series.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_data_point_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_data_pointRequest request: put_chart_data_point request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_data_point_with_http_info(request.name, request.slide_index, request.shape_index, request.series_index, request.point_index, request.data_point, request.password, request.folder, request.storage, **kwargs)

    def update_chart_series(self, name, slide_index, shape_index, series_index, series, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a series in a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_series(name, slide_index, shape_index, series_index, series, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series_index Series index.
        :param series Series DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_chart_series_with_http_info(name, slide_index, shape_index, series_index, series, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_chart_series_with_http_info(name, slide_index, shape_index, series_index, series, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_chart_series_with_http_info(self, name, slide_index, shape_index, series_index, series, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a series in a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_chart_series_with_http_info(name, slide_index, shape_index, series_index, series, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index (must be a chart).
        :param series_index Series index.
        :param series Series DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_chart_series" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_chart_series`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_chart_series`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_chart_series`")  # noqa: E501
        # verify the required parameter 'series_index' is set
        if not series_index:
            raise ValueError("Missing the required parameter `request.series_index` when calling `put_chart_series`")  # noqa: E501
        # verify the required parameter 'series' is set
        if not series:
            raise ValueError("Missing the required parameter `request.series` when calling `put_chart_series`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['seriesIndex'] = series_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if series:
            body_params = series

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Chart',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_chart_series(self, request, **kwargs):  # noqa: E501
        """Update a series in a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_series(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_seriesRequest request: put_chart_series request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_series(request.name, request.slide_index, request.shape_index, request.series_index, request.series, request.password, request.folder, request.storage, **kwargs)

    def put_chart_series_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update a series in a chart.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_chart_series_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_chart_seriesRequest request: put_chart_series request object
        :return: Chart
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_chart_series_with_http_info(request.name, request.slide_index, request.shape_index, request.series_index, request.series, request.password, request.folder, request.storage, **kwargs)

    def save_shape_online(self, document, slide_index, shape_index, format, out_path, password = None, storage = None, scale_x = None, scale_y = None, bounds = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_shape_online(document, slide_index, shape_index, format, out_path, password, storage, scale_x, scale_y, bounds, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Path to save result.
        :param password Document password.
        :param storage Document storage.
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_shape_online_with_http_info(document, slide_index, shape_index, format, out_path, password, storage, scale_x, scale_y, bounds, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_shape_online_with_http_info(document, slide_index, shape_index, format, out_path, password, storage, scale_x, scale_y, bounds, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_shape_online_with_http_info(self, document, slide_index, shape_index, format, out_path, password = None, storage = None, scale_x = None, scale_y = None, bounds = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_shape_online_with_http_info(document, slide_index, shape_index, format, out_path, password, storage, scale_x, scale_y, bounds, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Path to save result.
        :param password Document password.
        :param storage Document storage.
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_export_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `put_export_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_export_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_export_shape`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_export_shape`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_export_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_export_shape(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_export_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_export_shapeRequest request: put_export_shape request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_shape_online(request.document, request.slide_index, request.shape_index, request.format, request.out_path, request.password, request.storage, request.scale_x, request.scale_y, request.bounds, request.fonts_folder, **kwargs)

    def put_export_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_export_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_export_shapeRequest request: put_export_shape request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_shape_online_with_http_info(request.document, request.slide_index, request.shape_index, request.format, request.out_path, request.password, request.storage, request.scale_x, request.scale_y, request.bounds, request.fonts_folder, **kwargs)

    def save_slide_online(self, document, slide_index, format, out_path, width = None, height = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_slide_online(document, slide_index, format, out_path, width, height, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param out_path Path to save result.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_slide_online_with_http_info(document, slide_index, format, out_path, width, height, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_slide_online_with_http_info(document, slide_index, format, out_path, width, height, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_slide_online_with_http_info(self, document, slide_index, format, out_path, width = None, height = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_slide_online_with_http_info(document, slide_index, format, out_path, width, height, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param slide_index Slide index.
        :param format Output file format.
        :param out_path Path to save result.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_export_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `put_export_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_export_slide`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_export_slide`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_export_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/slides/{slideIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_export_slide(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_export_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_export_slideRequest request: put_export_slide request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_slide_online(request.document, request.slide_index, request.format, request.out_path, request.width, request.height, request.password, request.storage, request.fonts_folder, **kwargs)

    def put_export_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_export_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_export_slideRequest request: put_export_slide request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_slide_online_with_http_info(request.document, request.slide_index, request.format, request.out_path, request.width, request.height, request.password, request.storage, request.fonts_folder, **kwargs)

    def update_layout_slide(self, name, slide_index, slide_dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a layoutSlide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_layout_slide(name, slide_index, slide_dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param slide_dto Slide update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_layout_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_layout_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_layout_slide_with_http_info(self, name, slide_index, slide_dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a layoutSlide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_layout_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param slide_dto Slide update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_layout_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_layout_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_layout_slide`")  # noqa: E501
        # verify the required parameter 'slide_dto' is set
        if not slide_dto:
            raise ValueError("Missing the required parameter `request.slide_dto` when calling `put_layout_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if slide_dto:
            body_params = slide_dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/layoutSlides/{slideIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='LayoutSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_layout_slide(self, request, **kwargs):  # noqa: E501
        """Update a layoutSlide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_layout_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_layout_slideRequest request: put_layout_slide request object
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_layout_slide(request.name, request.slide_index, request.slide_dto, request.password, request.folder, request.storage, **kwargs)

    def put_layout_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update a layoutSlide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_layout_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_layout_slideRequest request: put_layout_slide request object
        :return: LayoutSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_layout_slide_with_http_info(request.name, request.slide_index, request.slide_dto, request.password, request.folder, request.storage, **kwargs)

    def set_notes_slide_header_footer(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set header/footer the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_notes_slide_header_footer(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Header/footer to set.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_notes_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_notes_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_notes_slide_header_footer_with_http_info(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set header/footer the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_notes_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto Header/footer to set.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_notes_slide_header_footer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_notes_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_notes_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_notes_slide_header_footer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlideHeaderFooter',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_notes_slide_header_footer(self, request, **kwargs):  # noqa: E501
        """Set header/footer the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_notes_slide_header_footer(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_notes_slide_header_footerRequest request: put_notes_slide_header_footer request object
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_notes_slide_header_footer(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_notes_slide_header_footer_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set header/footer the notes slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_notes_slide_header_footer_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_notes_slide_header_footerRequest request: put_notes_slide_header_footer request object
        :return: NotesSlideHeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_notes_slide_header_footer_with_http_info(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def save_notes_slide_shape(self, name, slide_index, shape_index, format, out_path, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_notes_slide_shape(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_notes_slide_shape_with_http_info(self, name, slide_index, shape_index, format, out_path, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_notes_slide_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_notes_slide_shape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_notes_slide_shape_save_as`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_notes_slide_shape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_notes_slide_shape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_notes_slide_shape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_notes_slide_shape_save_asRequest request: put_notes_slide_shape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_notes_slide_shape(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def put_notes_slide_shape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_notes_slide_shape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_notes_slide_shape_save_asRequest request: put_notes_slide_shape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_notes_slide_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def ordered_merge(self, name, request, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations or some of their slides specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.ordered_merge(name, request, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param request OrderedMergeRequest with a list of presentations and slide indices to merge.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.ordered_merge_with_http_info(name, request, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.ordered_merge_with_http_info(name, request, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def ordered_merge_with_http_info(self, name, request, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations or some of their slides specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.ordered_merge_with_http_info(name, request, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param request OrderedMergeRequest with a list of presentations and slide indices to merge.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_presentation_merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_presentation_merge`")  # noqa: E501
        # verify the required parameter 'request' is set
        if not request:
            raise ValueError("Missing the required parameter `request.request` when calling `put_presentation_merge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if request:
            body_params = request

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/merge', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_presentation_merge(self, request, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations or some of their slides specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_presentation_merge(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_presentation_mergeRequest request: put_presentation_merge request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.ordered_merge(request.name, request.request, request.password, request.folder, request.storage, **kwargs)

    def put_presentation_merge_with_http_info(self, request, **kwargs):  # noqa: E501
        """Merge the presentation with other presentations or some of their slides specified in the request parameter.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_presentation_merge_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_presentation_mergeRequest request: put_presentation_merge request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.ordered_merge_with_http_info(request.name, request.request, request.password, request.folder, request.storage, **kwargs)

    def split_and_save_online(self, document, format, dest_folder = None, width = None, height = None, _from = None, to = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split_and_save_online(document, format, dest_folder, width, height, _from, to, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format ExportFormat
        :param dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder.
        :param width Slide width.
        :param height Slide height.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.split_and_save_online_with_http_info(document, format, dest_folder, width, height, _from, to, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.split_and_save_online_with_http_info(document, format, dest_folder, width, height, _from, to, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def split_and_save_online_with_http_info(self, document, format, dest_folder = None, width = None, height = None, _from = None, to = None, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.split_and_save_online_with_http_info(document, format, dest_folder, width, height, _from, to, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format ExportFormat
        :param dest_folder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder.
        :param width Slide width.
        :param height Slide height.
        :param _from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation.
        :param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_presentation_split" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `put_presentation_split`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_presentation_split`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['format'] = format  # noqa: E501

        query_params = []
        if dest_folder:
            query_params.append(('destFolder', dest_folder))  # noqa: E501
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if _from:
            query_params.append(('from', _from))  # noqa: E501
        if to:
            query_params.append(('to', to))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/split/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SplitDocumentResult',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_presentation_split(self, request, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_presentation_split(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_presentation_splitRequest request: put_presentation_split request object
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split_and_save_online(request.document, request.format, request.dest_folder, request.width, request.height, request._from, request.to, request.password, request.storage, request.fonts_folder, **kwargs)

    def put_presentation_split_with_http_info(self, request, **kwargs):  # noqa: E501
        """Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_presentation_split_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_presentation_splitRequest request: put_presentation_split request object
        :return: SplitDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.split_and_save_online_with_http_info(request.document, request.format, request.dest_folder, request.width, request.height, request._from, request.to, request.password, request.storage, request.fonts_folder, **kwargs)

    def update_section(self, name, section_index, section_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update section name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_section(name, section_index, section_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index The position of the section to be updated.
        :param section_name Section name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_section_with_http_info(name, section_index, section_name, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_section_with_http_info(name, section_index, section_name, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_section_with_http_info(self, name, section_index, section_name, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update section name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_section_with_http_info(name, section_index, section_name, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param section_index The position of the section to be updated.
        :param section_name Section name.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_section`")  # noqa: E501
        # verify the required parameter 'section_index' is set
        if not section_index:
            raise ValueError("Missing the required parameter `request.section_index` when calling `put_section`")  # noqa: E501
        # verify the required parameter 'section_name' is set
        if not section_name:
            raise ValueError("Missing the required parameter `request.section_name` when calling `put_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['sectionIndex'] = section_index  # noqa: E501

        query_params = []
        if section_name:
            query_params.append(('sectionName', section_name))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections/{sectionIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_section(self, request, **kwargs):  # noqa: E501
        """Update section name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_section(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_sectionRequest request: put_section request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_section(request.name, request.section_index, request.section_name, request.password, request.folder, request.storage, **kwargs)

    def put_section_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update section name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_section_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_sectionRequest request: put_section request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_section_with_http_info(request.name, request.section_index, request.section_name, request.password, request.folder, request.storage, **kwargs)

    def set_sections(self, name, sections, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace existing presentation sections with the ones provided in the sections DTO.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_sections(name, sections, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param sections Sections DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_sections_with_http_info(name, sections, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_sections_with_http_info(name, sections, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_sections_with_http_info(self, name, sections, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Replace existing presentation sections with the ones provided in the sections DTO.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_sections_with_http_info(name, sections, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param sections Sections DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_sections`")  # noqa: E501
        # verify the required parameter 'sections' is set
        if not sections:
            raise ValueError("Missing the required parameter `request.sections` when calling `put_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if sections:
            body_params = sections

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/sections', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Sections',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sections(self, request, **kwargs):  # noqa: E501
        """Replace existing presentation sections with the ones provided in the sections DTO.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_sections(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_sectionsRequest request: put_sections request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_sections(request.name, request.sections, request.password, request.folder, request.storage, **kwargs)

    def put_sections_with_http_info(self, request, **kwargs):  # noqa: E501
        """Replace existing presentation sections with the ones provided in the sections DTO.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_sections_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_sectionsRequest request: put_sections request object
        :return: Sections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_sections_with_http_info(request.name, request.sections, request.password, request.folder, request.storage, **kwargs)

    def update_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_portion(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_set_paragraph_portion_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_set_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_set_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_set_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_set_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `put_set_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_set_paragraph_portion_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_set_paragraph_portion_properties(self, request, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_paragraph_portion_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_paragraph_portion_propertiesRequest request: put_set_paragraph_portion_properties request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_set_paragraph_portion_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_paragraph_portion_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_paragraph_portion_propertiesRequest request: put_set_paragraph_portion_properties request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_paragraph(self, name, slide_index, shape_index, paragraph_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_paragraph(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_set_paragraph_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_set_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_set_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_set_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_set_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_set_paragraph_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_set_paragraph_properties(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_paragraph_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_paragraph_propertiesRequest request: put_set_paragraph_properties request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_set_paragraph_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_paragraph_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_paragraph_propertiesRequest request: put_set_paragraph_properties request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_subshape_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape_portion(name, slide_index, shape_index, paragraph_index, portion_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_subshape_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_set_subshape_paragraph_portion_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_set_subshape_paragraph_portion_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_set_subshape_paragraph_portion_properties(self, request, **kwargs):  # noqa: E501
        """Update portion properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_subshape_paragraph_portion_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_subshape_paragraph_portion_propertiesRequest request: put_set_subshape_paragraph_portion_properties request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def put_set_subshape_paragraph_portion_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update portion properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_subshape_paragraph_portion_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_subshape_paragraph_portion_propertiesRequest request: put_set_subshape_paragraph_portion_properties request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def update_subshape_paragraph(self, name, slide_index, shape_index, paragraph_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape_paragraph(name, slide_index, shape_index, paragraph_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_subshape_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_set_subshape_paragraph_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_set_subshape_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_set_subshape_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_set_subshape_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_set_subshape_paragraph_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_set_subshape_paragraph_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_set_subshape_paragraph_properties(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_subshape_paragraph_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_subshape_paragraph_propertiesRequest request: put_set_subshape_paragraph_properties request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def put_set_subshape_paragraph_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_set_subshape_paragraph_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_set_subshape_paragraph_propertiesRequest request: put_set_subshape_paragraph_properties request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def save_shape(self, name, slide_index, shape_index, format, out_path, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_shape(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_shape_with_http_info(self, name, slide_index, shape_index, format, out_path, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_shape_with_http_info(name, slide_index, shape_index, format, out_path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_shape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_shape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_shape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_shape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_shape_save_as`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_shape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_shape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_shape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_shape_save_asRequest request: put_shape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_shape(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def put_shape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_shape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_shape_save_asRequest request: put_shape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def set_animation(self, name, slide_index, animation, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_animation(name, slide_index, animation, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param animation Animation DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_animation_with_http_info(name, slide_index, animation, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_animation_with_http_info(name, slide_index, animation, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_animation_with_http_info(self, name, slide_index, animation, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_animation_with_http_info(name, slide_index, animation, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param animation Animation DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_animation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_animation`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_animation`")  # noqa: E501
        # verify the required parameter 'animation' is set
        if not animation:
            raise ValueError("Missing the required parameter `request.animation` when calling `put_slide_animation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if animation:
            body_params = animation

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_animation(self, request, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animationRequest request: put_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_animation(request.name, request.slide_index, request.animation, request.password, request.folder, request.storage, **kwargs)

    def put_slide_animation_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set slide animation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animationRequest request: put_slide_animation request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_animation_with_http_info(request.name, request.slide_index, request.animation, request.password, request.folder, request.storage, **kwargs)

    def update_animation_effect(self, name, slide_index, effect_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_animation_effect(name, slide_index, effect_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect_index The position of the effect to be modified.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_animation_effect_with_http_info(name, slide_index, effect_index, effect, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_animation_effect_with_http_info(name, slide_index, effect_index, effect, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_animation_effect_with_http_info(self, name, slide_index, effect_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_animation_effect_with_http_info(name, slide_index, effect_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param effect_index The position of the effect to be modified.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_animation_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'effect_index' is set
        if not effect_index:
            raise ValueError("Missing the required parameter `request.effect_index` when calling `put_slide_animation_effect`")  # noqa: E501
        # verify the required parameter 'effect' is set
        if not effect:
            raise ValueError("Missing the required parameter `request.effect` when calling `put_slide_animation_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['effectIndex'] = effect_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if effect:
            body_params = effect

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_animation_effect(self, request, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animation_effectRequest request: put_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_animation_effect(request.name, request.slide_index, request.effect_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def put_slide_animation_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animation_effectRequest request: put_slide_animation_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_animation_effect_with_http_info(request.name, request.slide_index, request.effect_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def update_animation_interactive_sequence_effect(self, name, slide_index, sequence_index, effect_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_animation_interactive_sequence_effect(name, slide_index, sequence_index, effect_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The position of the interactive sequence.
        :param effect_index The position of the effect to be modified.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, effect, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, effect, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_animation_interactive_sequence_effect_with_http_info(self, name, slide_index, sequence_index, effect_index, effect, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_animation_interactive_sequence_effect_with_http_info(name, slide_index, sequence_index, effect_index, effect, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param sequence_index The position of the interactive sequence.
        :param effect_index The position of the effect to be modified.
        :param effect Animation effect DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_animation_interactive_sequence_effect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'sequence_index' is set
        if not sequence_index:
            raise ValueError("Missing the required parameter `request.sequence_index` when calling `put_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'effect_index' is set
        if not effect_index:
            raise ValueError("Missing the required parameter `request.effect_index` when calling `put_slide_animation_interactive_sequence_effect`")  # noqa: E501
        # verify the required parameter 'effect' is set
        if not effect:
            raise ValueError("Missing the required parameter `request.effect` when calling `put_slide_animation_interactive_sequence_effect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['sequenceIndex'] = sequence_index  # noqa: E501
        path_params['effectIndex'] = effect_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if effect:
            body_params = effect

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideAnimation',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_animation_interactive_sequence_effect(self, request, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation_interactive_sequence_effect(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animation_interactive_sequence_effectRequest request: put_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_animation_interactive_sequence_effect(request.name, request.slide_index, request.sequence_index, request.effect_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def put_slide_animation_interactive_sequence_effect_with_http_info(self, request, **kwargs):  # noqa: E501
        """Modify an animation effect for a slide interactive sequence.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_animation_interactive_sequence_effect_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_animation_interactive_sequence_effectRequest request: put_slide_animation_interactive_sequence_effect request object
        :return: SlideAnimation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_animation_interactive_sequence_effect_with_http_info(request.name, request.slide_index, request.sequence_index, request.effect_index, request.effect, request.password, request.folder, request.storage, **kwargs)

    def set_slide_header_footer(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set footer the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_slide_header_footer(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param dto Footer to set.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_slide_header_footer_with_http_info(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set footer the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_slide_header_footer_with_http_info(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index The position of the slide to be reordered.
        :param dto Footer to set.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_header_footer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_header_footer`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slide_header_footer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/headerFooter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='HeaderFooter',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_header_footer(self, request, **kwargs):  # noqa: E501
        """Set footer the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_header_footer(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_header_footerRequest request: put_slide_header_footer request object
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_slide_header_footer(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slide_header_footer_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set footer the slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_header_footer_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_header_footerRequest request: put_slide_header_footer request object
        :return: HeaderFooter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_slide_header_footer_with_http_info(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def save_slide(self, name, slide_index, format, out_path, options = None, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_slide(name, slide_index, format, out_path, options, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param out_path Path to upload the output file to.
        :param options Export options.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_slide_with_http_info(name, slide_index, format, out_path, options, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_slide_with_http_info(name, slide_index, format, out_path, options, width, height, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_slide_with_http_info(self, name, slide_index, format, out_path, options = None, width = None, height = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_slide_with_http_info(name, slide_index, format, out_path, options, width, height, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param format Output file format.
        :param out_path Path to upload the output file to.
        :param options Export options.
        :param width Output file width; 0 to not adjust the size. Default is 0.
        :param height Output file height; 0 to not adjust the size. Default is 0.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Storage folder containing custom fonts to be used with the document.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_slide_save_as`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_slide_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_save_as(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_save_asRequest request: put_slide_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_slide(request.name, request.slide_index, request.format, request.out_path, request.options, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def put_slide_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a slide to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_save_asRequest request: put_slide_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_slide_with_http_info(request.name, request.slide_index, request.format, request.out_path, request.options, request.width, request.height, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def update_shape(self, name, slide_index, shape_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_shape(name, slide_index, shape_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_shape_with_http_info(self, name, slide_index, shape_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_shape_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_shape_info`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_shape_info`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_slide_shape_info`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slide_shape_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_shape_info(self, request, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_shape_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_shape_infoRequest request: put_slide_shape_info request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_shape(request.name, request.slide_index, request.shape_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slide_shape_info_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_shape_info_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_shape_infoRequest request: put_slide_shape_info request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_subshape(self, name, slide_index, shape_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape(name, slide_index, shape_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_subshape_with_http_info(name, slide_index, shape_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subshape_with_http_info(name, slide_index, shape_index, dto, path, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_subshape_with_http_info(self, name, slide_index, shape_index, dto, path = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_subshape_with_http_info(name, slide_index, shape_index, dto, path, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param path Shape path.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slide_subshape_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slide_subshape_info`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slide_subshape_info`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_slide_subshape_info`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slide_subshape_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slide_subshape_info(self, request, **kwargs):  # noqa: E501
        """Update shape properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_subshape_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_subshape_infoRequest request: put_slide_subshape_info request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape(request.name, request.slide_index, request.shape_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def put_slide_subshape_info_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update shape properties (for smart art and group shapes).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slide_subshape_info_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slide_subshape_infoRequest request: put_slide_subshape_info request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_subshape_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.path, request.password, request.folder, request.storage, **kwargs)

    def convert_and_save(self, document, format, out_path, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.convert_and_save(document, format, out_path, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format.
        :param out_path Path to save result.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.convert_and_save_with_http_info(document, format, out_path, password, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.convert_and_save_with_http_info(document, format, out_path, password, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def convert_and_save_with_http_info(self, document, format, out_path, password = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.convert_and_save_with_http_info(document, format, out_path, password, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param document Document data.
        :param format Export format.
        :param out_path Path to save result.
        :param password Document password.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_convert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document' is set
        if not document:
            raise ValueError("Missing the required parameter `request.document` when calling `put_slides_convert`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_slides_convert`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_slides_convert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        if document:
            param_files['document'] = document  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/convert/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_convert(self, request, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_convert(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_convertRequest request: put_slides_convert request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.convert_and_save(request.document, request.format, request.out_path, request.password, request.storage, request.fonts_folder, **kwargs)

    def put_slides_convert_with_http_info(self, request, **kwargs):  # noqa: E501
        """Convert presentation from request content to format specified.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_convert_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_convertRequest request: put_slides_convert request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.convert_and_save_with_http_info(request.document, request.format, request.out_path, request.password, request.storage, request.fonts_folder, **kwargs)

    def put_slides_document_from_html(self, name = None, html = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_document_from_html(name, html, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param html HTML data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.put_slides_document_from_html_with_http_info(name, html, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.put_slides_document_from_html_with_http_info(name, html, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def put_slides_document_from_html_with_http_info(self, name = None, html = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation document from html.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_document_from_html_with_http_info(name, html, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param html HTML data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, PutSlidesDocumentFromHtmlRequest):
            request_object = name
            name = request_object.name
            html = request_object.html
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_document_from_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_document_from_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if html:
            body_params = html

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/fromHtml', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_presentation_header_footer(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set footers for all slides in a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_presentation_header_footer(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto HeaderFooter instance.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_presentation_header_footer_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_presentation_header_footer_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_presentation_header_footer_with_http_info(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set footers for all slides in a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_presentation_header_footer_with_http_info(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto HeaderFooter instance.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_header_footer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_header_footer`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slides_header_footer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/headerFooter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_header_footer(self, request, **kwargs):  # noqa: E501
        """Set footers for all slides in a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_header_footer(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_header_footerRequest request: put_slides_header_footer request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_presentation_header_footer(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_header_footer_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set footers for all slides in a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_header_footer_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_header_footerRequest request: put_slides_header_footer request object
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_presentation_header_footer_with_http_info(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def merge_and_save_online(self, out_path, files = None, request = None, password = None, storage = None, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge_and_save_online(out_path, files, request, password, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param out_path Path to save result.
        :param files Files to merge
        :param request Merge request.
        :param password Document password.
        :param storage Document storage.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.merge_and_save_online_with_http_info(out_path, files, request, password, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.merge_and_save_online_with_http_info(out_path, files, request, password, storage, **kwargs)  # noqa: E501
            return data

    def merge_and_save_online_with_http_info(self, out_path, files = None, request = None, password = None, storage = None, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.merge_and_save_online_with_http_info(out_path, files, request, password, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param out_path Path to save result.
        :param files Files to merge
        :param request Merge request.
        :param password Document password.
        :param storage Document storage.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_slides_merge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}
        param_files = files

        body_params = None
        if request:
            body_params = request

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/merge', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_merge(self, request, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_merge(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_mergeRequest request: put_slides_merge request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge_and_save_online(request.out_path, request.files, request.request, request.password, request.storage, **kwargs)

    def put_slides_merge_with_http_info(self, request, **kwargs):  # noqa: E501
        """Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_merge_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_mergeRequest request: put_slides_merge request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.merge_and_save_online_with_http_info(request.out_path, request.files, request.request, request.password, request.storage, **kwargs)

    def set_protection_properties(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_protection_properties(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_protection_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_protection_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_protection_properties_with_http_info(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_protection_properties_with_http_info(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_protection_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_protection_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slides_protection_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/protectionProperties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ProtectionProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_protection_properties(self, request, **kwargs):  # noqa: E501
        """Update presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_protection_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_protection_propertiesRequest request: put_slides_protection_properties request object
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_protection_properties(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_protection_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update presentation protection properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_protection_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_protection_propertiesRequest request: put_slides_protection_properties request object
        :return: ProtectionProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_protection_properties_with_http_info(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def save_presentation(self, name, format, out_path, options = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_presentation(name, format, out_path, options, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param format Export format.
        :param out_path Output path.
        :param options Export options.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_presentation_with_http_info(name, format, out_path, options, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_presentation_with_http_info(name, format, out_path, options, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_presentation_with_http_info(self, name, format, out_path, options = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_presentation_with_http_info(name, format, out_path, options, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param format Export format.
        :param out_path Output path.
        :param options Export options.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :param fonts_folder Custom fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_slides_save_as`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_slides_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_save_as(self, request, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_save_asRequest request: put_slides_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_presentation(request.name, request.format, request.out_path, request.options, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def put_slides_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Save a presentation to a specified format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_save_asRequest request: put_slides_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_presentation_with_http_info(request.name, request.format, request.out_path, request.options, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def set_document_property(self, name, property_name, _property, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_document_property(name, property_name, _property, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param _property Property with the value.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_document_property_with_http_info(name, property_name, _property, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_document_property_with_http_info(name, property_name, _property, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_document_property_with_http_info(self, name, property_name, _property, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_document_property_with_http_info(name, property_name, _property, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param property_name The property name.
        :param _property Property with the value.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_set_document_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_set_document_property`")  # noqa: E501
        # verify the required parameter 'property_name' is set
        if not property_name:
            raise ValueError("Missing the required parameter `request.property_name` when calling `put_slides_set_document_property`")  # noqa: E501
        # verify the required parameter '_property' is set
        if not _property:
            raise ValueError("Missing the required parameter `request._property` when calling `put_slides_set_document_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['propertyName'] = property_name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if _property:
            body_params = _property

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/documentproperties/{propertyName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='DocumentProperty',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_set_document_property(self, request, **kwargs):  # noqa: E501
        """Set document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_set_document_property(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_set_document_propertyRequest request: put_slides_set_document_property request object
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_document_property(request.name, request.property_name, request._property, request.password, request.folder, request.storage, **kwargs)

    def put_slides_set_document_property_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set document property.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_set_document_property_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_set_document_propertyRequest request: put_slides_set_document_property request object
        :return: DocumentProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_document_property_with_http_info(request.name, request.property_name, request._property, request.password, request.folder, request.storage, **kwargs)

    def update_slide(self, name, slide_index, slide_dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_slide(name, slide_index, slide_dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param slide_dto Slide update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_slide_with_http_info(self, name, slide_index, slide_dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_slide_with_http_info(name, slide_index, slide_dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param slide_dto Slide update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slides_slide`")  # noqa: E501
        # verify the required parameter 'slide_dto' is set
        if not slide_dto:
            raise ValueError("Missing the required parameter `request.slide_dto` when calling `put_slides_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if slide_dto:
            body_params = slide_dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Slide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_slide(self, request, **kwargs):  # noqa: E501
        """Update a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slideRequest request: put_slides_slide request object
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_slide(request.name, request.slide_index, request.slide_dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slideRequest request: put_slides_slide request object
        :return: Slide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_slide_with_http_info(request.name, request.slide_index, request.slide_dto, request.password, request.folder, request.storage, **kwargs)

    def set_background(self, name, slide_index, background, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set background for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_background(name, slide_index, background, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param background Slide background update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_background_with_http_info(name, slide_index, background, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_background_with_http_info(name, slide_index, background, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_background_with_http_info(self, name, slide_index, background, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set background for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_background_with_http_info(name, slide_index, background, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param background Slide background update data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_slide_background" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_slide_background`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slides_slide_background`")  # noqa: E501
        # verify the required parameter 'background' is set
        if not background:
            raise ValueError("Missing the required parameter `request.background` when calling `put_slides_slide_background`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if background:
            body_params = background

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/background', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideBackground',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_slide_background(self, request, **kwargs):  # noqa: E501
        """Set background for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_background(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_backgroundRequest request: put_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_background(request.name, request.slide_index, request.background, request.password, request.folder, request.storage, **kwargs)

    def put_slides_slide_background_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set background for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_background_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_backgroundRequest request: put_slides_slide_background request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_background_with_http_info(request.name, request.slide_index, request.background, request.password, request.folder, request.storage, **kwargs)

    def set_background_color(self, name, slide_index, color, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set background color for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_background_color(name, slide_index, color, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param color Slide background target color in RRGGBB format.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_background_color_with_http_info(name, slide_index, color, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_background_color_with_http_info(name, slide_index, color, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_background_color_with_http_info(self, name, slide_index, color, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set background color for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_background_color_with_http_info(name, slide_index, color, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param color Slide background target color in RRGGBB format.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_slide_background_color" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_slide_background_color`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_slides_slide_background_color`")  # noqa: E501
        # verify the required parameter 'color' is set
        if not color:
            raise ValueError("Missing the required parameter `request.color` when calling `put_slides_slide_background_color`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if color:
            query_params.append(('color', color))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/backgroundColor', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideBackground',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_slide_background_color(self, request, **kwargs):  # noqa: E501
        """Set background color for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_background_color(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_background_colorRequest request: put_slides_slide_background_color request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_background_color(request.name, request.slide_index, request.color, request.password, request.folder, request.storage, **kwargs)

    def put_slides_slide_background_color_with_http_info(self, request, **kwargs):  # noqa: E501
        """Set background color for a slide.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_background_color_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_background_colorRequest request: put_slides_slide_background_color request object
        :return: SlideBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_background_color_with_http_info(request.name, request.slide_index, request.color, request.password, request.folder, request.storage, **kwargs)

    def set_slide_properties(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_slide_properties(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_slide_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_slide_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_slide_properties_with_http_info(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_slide_properties_with_http_info(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_slide_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_slide_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slides_slide_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slideProperties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='SlideProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_slide_properties(self, request, **kwargs):  # noqa: E501
        """Update presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_propertiesRequest request: put_slides_slide_properties request object
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_slide_properties(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_slide_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update presentation slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_slide_propertiesRequest request: put_slides_slide_properties request object
        :return: SlideProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_slide_properties_with_http_info(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_slide_size(self, name = None, width = None, height = None, size_type = None, scale_type = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide size for a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_size(name, width, height, size_type, scale_type, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param width Slide width.
        :param height Slide height.
        :param size_type Standard slide size type.
        :param scale_type Standard slide scale type.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.put_slides_slide_size_with_http_info(name, width, height, size_type, scale_type, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.put_slides_slide_size_with_http_info(name, width, height, size_type, scale_type, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def put_slides_slide_size_with_http_info(self, name = None, width = None, height = None, size_type = None, scale_type = None, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Set slide size for a presentation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_slide_size_with_http_info(name, width, height, size_type, scale_type, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param width Slide width.
        :param height Slide height.
        :param size_type Standard slide size type.
        :param scale_type Standard slide scale type.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(name, PutSlidesSlideSizeRequest):
            request_object = name
            name = request_object.name
            width = request_object.width
            height = request_object.height
            size_type = request_object.size_type
            scale_type = request_object.scale_type
            password = request_object.password
            folder = request_object.folder
            storage = request_object.storage

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_slide_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_slide_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if width:
            query_params.append(('width', width))  # noqa: E501
        if height:
            query_params.append(('height', height))  # noqa: E501
        if size_type:
            query_params.append(('sizeType', size_type))  # noqa: E501
        if scale_type:
            query_params.append(('scaleType', scale_type))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slideSize', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_view_properties(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_view_properties(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.set_view_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.set_view_properties_with_http_info(name, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def set_view_properties_with_http_info(self, name, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.set_view_properties_with_http_info(name, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param dto The view properties data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_slides_view_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_slides_view_properties`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_slides_view_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/viewProperties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ViewProperties',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_slides_view_properties(self, request, **kwargs):  # noqa: E501
        """Update presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_view_properties(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_view_propertiesRequest request: put_slides_view_properties request object
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_view_properties(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_slides_view_properties_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update presentation document properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_slides_view_properties_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_slides_view_propertiesRequest request: put_slides_view_properties request object
        :return: ViewProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.set_view_properties_with_http_info(request.name, request.dto, request.password, request.folder, request.storage, **kwargs)

    def save_subshape(self, name, slide_index, shape_index, format, out_path, path = None, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_subshape(name, slide_index, shape_index, format, out_path, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param path Shape path (for smart art and group shapes).
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.save_subshape_with_http_info(name, slide_index, shape_index, format, out_path, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
        else:
            (data) = self.save_subshape_with_http_info(name, slide_index, shape_index, format, out_path, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, **kwargs)  # noqa: E501
            return data

    def save_subshape_with_http_info(self, name, slide_index, shape_index, format, out_path, path = None, options = None, scale_x = None, scale_y = None, bounds = None, password = None, folder = None, storage = None, fonts_folder = None, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.save_subshape_with_http_info(name, slide_index, shape_index, format, out_path, path, options, scale_x, scale_y, bounds, password, folder, storage, fonts_folder, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Presentation name.
        :param slide_index Slide index.
        :param shape_index Index of shape starting from 1
        :param format Export picture format.
        :param out_path Output path.
        :param path Shape path (for smart art and group shapes).
        :param options export options
        :param scale_x X scale ratio.
        :param scale_y Y scale ratio.
        :param bounds Shape thumbnail bounds type.
        :param password Document password.
        :param folder Presentation folder.
        :param storage Presentation storage.
        :param fonts_folder Fonts folder.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_subshape_save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'format' is set
        if not format:
            raise ValueError("Missing the required parameter `request.format` when calling `put_subshape_save_as`")  # noqa: E501
        # verify the required parameter 'out_path' is set
        if not out_path:
            raise ValueError("Missing the required parameter `request.out_path` when calling `put_subshape_save_as`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['path'] = path  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['format'] = format  # noqa: E501

        query_params = []
        if out_path:
            query_params.append(('outPath', out_path))  # noqa: E501
        if scale_x:
            query_params.append(('scaleX', scale_x))  # noqa: E501
        if scale_y:
            query_params.append(('scaleY', scale_y))  # noqa: E501
        if bounds:
            query_params.append(('bounds', bounds))  # noqa: E501
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501
        if fonts_folder:
            query_params.append(('fontsFolder', fonts_folder))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if options:
            body_params = options

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_subshape_save_as(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_subshape_save_as(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_subshape_save_asRequest request: put_subshape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_subshape(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def put_subshape_save_as_with_http_info(self, request, **kwargs):  # noqa: E501
        """Render shape to specified picture format.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_subshape_save_as_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_subshape_save_asRequest request: put_subshape_save_as request object
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.save_subshape_with_http_info(request.name, request.slide_index, request.shape_index, request.format, request.out_path, request.path, request.options, request.scale_x, request.scale_y, request.bounds, request.password, request.folder, request.storage, request.fonts_folder, **kwargs)

    def update_notes_slide(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update notes slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto A NotesSlide object with notes slide data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_notes_slide_with_http_info(self, name, slide_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update notes slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_with_http_info(name, slide_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param dto A NotesSlide object with notes slide data.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_update_notes_slide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_update_notes_slide`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_update_notes_slide`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_update_notes_slide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='NotesSlide',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_update_notes_slide(self, request, **kwargs):  # noqa: E501
        """Update notes slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slideRequest request: put_update_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_update_notes_slide_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update notes slide properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slideRequest request: put_update_notes_slide request object
        :return: NotesSlide
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_with_http_info(request.name, request.slide_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_notes_slide_shape(self, name, slide_index, shape_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_shape(name, slide_index, shape_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_notes_slide_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notes_slide_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_notes_slide_shape_with_http_info(self, name, slide_index, shape_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_shape_with_http_info(name, slide_index, shape_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param dto Shape DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_update_notes_slide_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_update_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_update_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_update_notes_slide_shape`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_update_notes_slide_shape`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='ShapeBase',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_update_notes_slide_shape(self, request, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shapeRequest request: put_update_notes_slide_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_shape(request.name, request.slide_index, request.shape_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_update_notes_slide_shape_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update shape properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shapeRequest request: put_update_notes_slide_shape request object
        :return: ShapeBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_shape_with_http_info(request.name, request.slide_index, request.shape_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_notes_slide_paragraph(self, name, slide_index, shape_index, paragraph_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_paragraph(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_notes_slide_paragraph_with_http_info(self, name, slide_index, shape_index, paragraph_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_paragraph_with_http_info(name, slide_index, shape_index, paragraph_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param dto Paragraph DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_update_notes_slide_shape_paragraph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_update_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_update_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_update_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_update_notes_slide_shape_paragraph`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_update_notes_slide_shape_paragraph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Paragraph',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_update_notes_slide_shape_paragraph(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape_paragraph(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shape_paragraphRequest request: put_update_notes_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_paragraph(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_update_notes_slide_shape_paragraph_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update paragraph properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape_paragraph_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shape_paragraphRequest request: put_update_notes_slide_shape_paragraph request object
        :return: Paragraph
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_paragraph_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def update_notes_slide_portion(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_portion(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.update_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, **kwargs)  # noqa: E501
        else:
            (data) = self.update_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, **kwargs)  # noqa: E501
            return data

    def update_notes_slide_portion_with_http_info(self, name, slide_index, shape_index, paragraph_index, portion_index, dto, password = None, folder = None, storage = None, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.update_notes_slide_portion_with_http_info(name, slide_index, shape_index, paragraph_index, portion_index, dto, password, folder, storage, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param name Document name.
        :param slide_index Slide index.
        :param shape_index Shape index.
        :param paragraph_index Paragraph index.
        :param portion_index Portion index.
        :param dto Portion DTO.
        :param password Document password.
        :param folder Document folder.
        :param storage Document storage.
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """


        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_update_notes_slide_shape_portion" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if not name:
            raise ValueError("Missing the required parameter `request.name` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'slide_index' is set
        if not slide_index:
            raise ValueError("Missing the required parameter `request.slide_index` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'shape_index' is set
        if not shape_index:
            raise ValueError("Missing the required parameter `request.shape_index` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'paragraph_index' is set
        if not paragraph_index:
            raise ValueError("Missing the required parameter `request.paragraph_index` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'portion_index' is set
        if not portion_index:
            raise ValueError("Missing the required parameter `request.portion_index` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501
        # verify the required parameter 'dto' is set
        if not dto:
            raise ValueError("Missing the required parameter `request.dto` when calling `put_update_notes_slide_shape_portion`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['name'] = name  # noqa: E501
        path_params['slideIndex'] = slide_index  # noqa: E501
        path_params['shapeIndex'] = shape_index  # noqa: E501
        path_params['paragraphIndex'] = paragraph_index  # noqa: E501
        path_params['portionIndex'] = portion_index  # noqa: E501

        query_params = []
        if folder:
            query_params.append(('folder', folder))  # noqa: E501
        if storage:
            query_params.append(('storage', storage))  # noqa: E501

        header_params = {}
        if password:
            header_params['password'] = password  # noqa: E501

        form_params = []
        param_files = {}

        body_params = None
        if dto:
            body_params = dto

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='Portion',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_update_notes_slide_shape_portion(self, request, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape_portion(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shape_portionRequest request: put_update_notes_slide_shape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_portion(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def put_update_notes_slide_shape_portion_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update portion properties.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.put_update_notes_slide_shape_portion_with_http_info(request, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param put_update_notes_slide_shape_portionRequest request: put_update_notes_slide_shape_portion request object
        :return: Portion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        return self.update_notes_slide_portion_with_http_info(request.name, request.slide_index, request.shape_index, request.paragraph_index, request.portion_index, request.dto, request.password, request.folder, request.storage, **kwargs)

    def storage_exists(self, storage_name = None, **kwargs):  # noqa: E501
        """Check if storage exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.storage_exists(storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param storage_name Storage name
        :return: StorageExist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.storage_exists_with_http_info(storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_exists_with_http_info(storage_name, **kwargs)  # noqa: E501
            return data

    def storage_exists_with_http_info(self, storage_name = None, **kwargs):  # noqa: E501
        """Check if storage exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.storage_exists_with_http_info(storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param storage_name Storage name
        :return: StorageExist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(storage_name, StorageExistsRequest):
            request_object = storage_name
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_name' is set
        if not storage_name:
            raise ValueError("Missing the required parameter `request.storage_name` when calling `storage_exists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['storageName'] = storage_name  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        param_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/{storageName}/exist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='StorageExist',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, file = None, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.upload_file(file, path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param file File to upload
        :param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
        :param storage_name Storage name
        :return: FilesUploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('is_async'):
            return self.upload_file_with_http_info(file, path, storage_name, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_with_http_info(file, path, storage_name, **kwargs)  # noqa: E501
            return data

    def upload_file_with_http_info(self, file = None, path = None, storage_name = None, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass is_async=True
        >>> thread = api.upload_file_with_http_info(file, path, storage_name, is_async=True)
        >>> result = thread.get()

        :param is_async bool
        :param file File to upload
        :param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
        :param storage_name Storage name
        :return: FilesUploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        if isinstance(file, UploadFileRequest):
            request_object = file
            file = request_object.file
            path = request_object.path
            storage_name = request_object.storage_name

        all_params = []  # noqa: E501
        all_params.append('is_async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if not file:
            raise ValueError("Missing the required parameter `request.file` when calling `upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        path_params['path'] = path  # noqa: E501

        query_params = []
        if storage_name:
            query_params.append(('storageName', storage_name))  # noqa: E501

        header_params = {}

        form_params = []
        param_files = {}
        if file:
            param_files['file'] = file  # noqa: E501

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/slides/storage/file/{path}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=param_files,
            response_type='FilesUploadResult',  # noqa: E501
            auth_settings=auth_settings,
            is_async=params.get('is_async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
