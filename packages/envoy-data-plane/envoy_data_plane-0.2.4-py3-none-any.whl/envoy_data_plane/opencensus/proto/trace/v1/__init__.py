# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: opencensus/proto/trace/v1/trace_config.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class ConstantSamplerConstantDecision(betterproto.Enum):
    ALWAYS_OFF = 0
    ALWAYS_ON = 1
    ALWAYS_PARENT = 2


@dataclass(eq=False, repr=False)
class TraceConfig(betterproto.Message):
    """
    Global configuration of the trace service. All fields must be specified, or
    the default (zero) values will be used for each type.
    """

    probability_sampler: "ProbabilitySampler" = betterproto.message_field(
        1, group="sampler"
    )
    constant_sampler: "ConstantSampler" = betterproto.message_field(2, group="sampler")
    rate_limiting_sampler: "RateLimitingSampler" = betterproto.message_field(
        3, group="sampler"
    )
    # The global default max number of attributes per span.
    max_number_of_attributes: int = betterproto.int64_field(4)
    # The global default max number of annotation events per span.
    max_number_of_annotations: int = betterproto.int64_field(5)
    # The global default max number of message events per span.
    max_number_of_message_events: int = betterproto.int64_field(6)
    # The global default max number of link entries per span.
    max_number_of_links: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class ProbabilitySampler(betterproto.Message):
    """
    Sampler that tries to uniformly sample traces with a given probability. The
    probability of sampling a trace is equal to that of the specified
    probability.
    """

    # The desired probability of sampling. Must be within [0.0, 1.0].
    sampling_probability: float = betterproto.double_field(1)


@dataclass(eq=False, repr=False)
class ConstantSampler(betterproto.Message):
    """Sampler that always makes a constant decision on span sampling."""

    decision: "ConstantSamplerConstantDecision" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class RateLimitingSampler(betterproto.Message):
    """Sampler that tries to sample with a rate per time window."""

    # Rate per second.
    qps: int = betterproto.int64_field(1)
