{"version":3,"sources":["webpack:///./app/views/settings/incidentRules/create.tsx","webpack:///./app/views/settings/projectAlerts/alertTypeChooser.tsx","webpack:///./app/views/settings/projectAlerts/create.tsx"],"names":["IncidentRulesCreate","handleSubmitSuccess","router","props","orgId","params","push","this","project","eventView","wizardTemplate","sessionId","teams","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","userTeamIdArr","filter","isMember","map","id","userTeamIds","Set","organization","features","includes","projectTeamIds","defaultOwnerId","find","has","owner","onSubmitSuccess","rule","projects","slug","React","withTeams","MetricsTooltip","children","title","t","IssuesTooltip","TypeChooser","onChange","selected","trackedOnChange","type","trackAnalyticsEvent","eventKey","eventName","organization_id","Container","TypeCard","interactive","onClick","RadioLabel","aria-label","checked","requireAll","hasFeature","tct","tooltip","ExampleHeading","symbol","code","space","p","theme","fontSizeSmall","subText","Card","textStyles","Create","state","undefined","alertType","location","pathname","uniqueId","handleChangeAlertType","setState","project_id","session_id","query","createFromDiscover","createFromWizard","EventView","aggregate","dataset","eventTypes","wizardAlertType","hasMetricAlerts","projectId","hasWizard","shouldShowAlertTypeChooser","getAlertTypeFromAggregateDataset","projectSlug","orgSlug","alertName","AlertWizardAlertNames","StyledPageHeader","PageHeader"],"mappings":"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","file":"ProjectAlertsCreate.js","sourcesContent":["import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project, Team} from 'app/types';\nimport EventView from 'app/utils/discover/eventView';\nimport withTeams from 'app/utils/withTeams';\nimport {WizardRuleTemplate} from 'app/views/alerts/wizard/options';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'app/views/settings/incidentRules/constants';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  eventView: EventView | undefined;\n  wizardTemplate?: WizardRuleTemplate;\n  sessionId?: string;\n  teams: Team[];\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nclass IncidentRulesCreate extends React.Component<Props> {\n  handleSubmitSuccess = () => {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  };\n\n  render() {\n    const {project, eventView, wizardTemplate, sessionId, teams, ...props} = this.props;\n    const defaultRule = eventView\n      ? createRuleFromEventView(eventView)\n      : wizardTemplate\n      ? createRuleFromWizardTemplate(wizardTemplate)\n      : createDefaultRule();\n\n    const userTeamIdArr = teams.filter(({isMember}) => isMember).map(({id}) => id);\n    const userTeamIds = new Set(userTeamIdArr);\n\n    if (props.organization.features.includes('team-alerts-ownership')) {\n      const projectTeamIds = new Set(project.teams.map(({id}) => id));\n      const defaultOwnerId = userTeamIdArr.find(id => projectTeamIds.has(id)) ?? null;\n      defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n    }\n\n    return (\n      <RuleForm\n        onSubmitSuccess={this.handleSubmitSuccess}\n        rule={{...defaultRule, projects: [project.slug]}}\n        sessionId={sessionId}\n        project={project}\n        userTeamIds={userTeamIds}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withTeams(IncidentRulesCreate);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport Card from 'app/components/card';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport Radio from 'app/components/radio';\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport textStyles from 'app/styles/text';\nimport {Organization} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype Props = {\n  organization: Organization;\n  selected?: string | null;\n  onChange: (type: AlertType) => void;\n};\n\nconst MetricsTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `A metric is the value of an aggregate function like count() or avg()\n       applied to your events over time`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst IssuesTooltip = ({children}: {children?: React.ReactNode}) => (\n  <Tooltip\n    title={t(\n      `Sentry groups similar events into an Issue based on their stack trace\n       and other factors.`\n    )}\n  >\n    <abbr>{children}</abbr>\n  </Tooltip>\n);\n\nconst TypeChooser = ({onChange, organization, selected}: Props) => {\n  const trackedOnChange = (type: AlertType) => {\n    trackAnalyticsEvent({\n      eventKey: 'alert_chooser_cards.select',\n      eventName: 'Alert Chooser Cards: Select',\n      organization_id: organization.id,\n      type,\n    });\n\n    onChange(type);\n  };\n\n  return (\n    <Container>\n      <TypeCard interactive onClick={() => trackedOnChange('metric')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"metric\"\n            checked={selected === 'metric'}\n            onChange={() => trackedOnChange('metric')}\n          />\n          {t('Metric Alert')}\n        </RadioLabel>\n        <Feature requireAll features={['organizations:performance-view']}>\n          {({hasFeature}) =>\n            hasFeature ? (\n              <React.Fragment>\n                <p>\n                  {tct(`Notifies you when a [tooltip:metric] crosses a threshold.`, {\n                    tooltip: <MetricsTooltip />,\n                  })}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List symbol=\"bullet\">\n                      <ListItem>\n                        {t('Performance metrics like latency and apdex')}\n                      </ListItem>\n                      <ListItem>\n                        {t('Frequency of error events or users affected in the project')}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <p>\n                  {tct(\n                    `Notifies you when a [tooltip:metric] like frequency of events or users affected in\n                   the project crosses a threshold.`,\n                    {tooltip: <MetricsTooltip />}\n                  )}\n                </p>\n                {!selected && (\n                  <React.Fragment>\n                    <ExampleHeading>{t('For Example:')}</ExampleHeading>\n                    <List symbol=\"bullet\">\n                      <ListItem>\n                        {t('Total events in the project exceed 1000/minute')}\n                      </ListItem>\n                      <ListItem>\n                        {tct(\n                          'Events with tag [code:database] and \"API\" in the title exceed 100/minute',\n                          {code: <code />}\n                        )}\n                      </ListItem>\n                    </List>\n                  </React.Fragment>\n                )}\n              </React.Fragment>\n            )\n          }\n        </Feature>\n      </TypeCard>\n      <TypeCard interactive onClick={() => trackedOnChange('issue')}>\n        <RadioLabel>\n          <Radio\n            aria-label=\"issue\"\n            checked={selected === 'issue'}\n            onChange={() => trackedOnChange('issue')}\n          />\n          {t('Issue Alert')}\n        </RadioLabel>\n        <p>\n          {tct(\n            `Notifies you when individual [tooltip:Sentry Issues] trigger your\n           alerting criteria.`,\n            {tooltip: <IssuesTooltip />}\n          )}\n        </p>\n        {!selected && (\n          <React.Fragment>\n            <ExampleHeading>{t('For Example:')}</ExampleHeading>\n            <List symbol=\"bullet\">\n              <ListItem>{t('New Issues or regressions')}</ListItem>\n              <ListItem>\n                {t('Frequency of individual Issues exceeds 100/minute')}\n              </ListItem>\n            </List>\n          </React.Fragment>\n        )}\n      </TypeCard>\n    </Container>\n  );\n};\n\nconst RadioLabel = styled('label')`\n  cursor: pointer;\n  margin-bottom: ${space(3)};\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: max-content;\n  align-items: center;\n  grid-gap: ${space(2)};\n`;\n\nconst ExampleHeading = styled('div')`\n  text-transform: uppercase;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: bold;\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(2)};\n`;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: ${space(3)};\n`;\n\nconst TypeCard = styled(Card)`\n  cursor: pointer;\n  padding: ${space(4)};\n  margin-bottom: ${space(3)};\n  ${textStyles};\n`;\n\nexport default TypeChooser;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport PageHeading from 'app/components/pageHeading';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport EventView from 'app/utils/discover/eventView';\nimport {uniqueId} from 'app/utils/guid';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  WizardRuleTemplate,\n} from 'app/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'app/views/alerts/wizard/utils';\nimport IncidentRulesCreate from 'app/views/settings/incidentRules/create';\nimport IssueRuleEditor from 'app/views/settings/projectAlerts/issueRuleEditor';\n\nimport AlertTypeChooser from './alertTypeChooser';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype AlertType = 'metric' | 'issue' | null;\n\ntype State = {\n  alertType: AlertType;\n  eventView: EventView | undefined;\n  wizardTemplate?: WizardRuleTemplate;\n};\n\nclass Create extends React.Component<Props, State> {\n  state: State = {\n    eventView: undefined,\n    alertType: this.props.location.pathname.includes('/alerts/rules/')\n      ? 'issue'\n      : this.props.location.pathname.includes('/alerts/metric-rules/')\n      ? 'metric'\n      : null,\n  };\n\n  componentDidMount() {\n    const {organization, location, project} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'new_alert_rule.viewed',\n      eventName: 'New Alert Rule: Viewed',\n      organization_id: organization.id,\n      project_id: project.id,\n      session_id: this.sessionId,\n    });\n\n    if (location?.query) {\n      const {query} = location;\n      const {createFromDiscover, createFromWizard} = query;\n      if (createFromDiscover) {\n        const eventView = EventView.fromLocation(location);\n        // eslint-disable-next-line react/no-did-mount-set-state\n        this.setState({alertType: 'metric', eventView});\n      } else if (createFromWizard) {\n        const {aggregate, dataset, eventTypes} = query;\n        if (aggregate && dataset && eventTypes) {\n          // eslint-disable-next-line react/no-did-mount-set-state\n          this.setState({\n            alertType: 'metric',\n            wizardTemplate: {aggregate, dataset, eventTypes},\n          });\n        } else {\n          // eslint-disable-next-line react/no-did-mount-set-state\n          this.setState({\n            alertType: 'issue',\n          });\n        }\n      }\n    }\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  handleChangeAlertType = (alertType: AlertType) => {\n    // alertType should be `issue` or `metric`\n    this.setState({alertType});\n  };\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      project,\n      params: {projectId},\n      location,\n    } = this.props;\n    const {alertType, eventView, wizardTemplate} = this.state;\n\n    const hasWizard = organization.features.includes('alert-wizard');\n    const shouldShowAlertTypeChooser = hasMetricAlerts && !hasWizard;\n    let wizardAlertType: undefined | WizardAlertType;\n    if (location?.query?.createFromWizard) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <PageContent>\n          <BuilderBreadCrumbs\n            hasMetricAlerts={hasMetricAlerts}\n            orgSlug={organization.slug}\n            alertName={wizardAlertType && AlertWizardAlertNames[wizardAlertType]}\n            title={wizardAlertType ? t('Create Alert Rule') : title}\n            projectSlug={projectId}\n          />\n          <StyledPageHeader>\n            <PageHeading>\n              {wizardAlertType ? t('Set Alert Conditions') : title}\n            </PageHeading>\n          </StyledPageHeader>\n          {shouldShowAlertTypeChooser && (\n            <AlertTypeChooser\n              organization={organization}\n              selected={alertType}\n              onChange={this.handleChangeAlertType}\n            />\n          )}\n\n          {(!hasMetricAlerts || alertType === 'issue') && (\n            <IssueRuleEditor {...this.props} project={project} />\n          )}\n\n          {hasMetricAlerts && alertType === 'metric' && (\n            <IncidentRulesCreate\n              {...this.props}\n              eventView={eventView}\n              wizardTemplate={wizardTemplate}\n              sessionId={this.sessionId}\n              project={project}\n            />\n          )}\n        </PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(4)};\n`;\n\nexport default Create;\n"],"sourceRoot":""}