{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/wizard/radioPanelGroup.tsx","webpack:///./app/views/alerts/wizard/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"names":["Breadcrumbs","crumbs","linkLastItem","props","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","space","subText","IconChevron","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","WEB_VITAL_DETAILS","WebVital","slug","name","t","acronym","description","poorThreshold","type","measurementType","BuilderBreadCrumbs","hasMetricAlerts","alertName","push","StyledBreadcrumbs","RadioPanelGroup","value","choices","onChange","Container","role","aria-labelledby","id","extraContent","RadioPanel","RadioPanelBody","RadioLineItem","aria-checked","radioSize","aria-label","checked","e","Panel","PanelBody","AlertWizard","state","alertOption","handleChangeAlertOption","setState","this","organization","project","location","metricRuleTemplate","AlertWizardRuleTemplates","disabled","features","includes","dataset","Dataset","pathname","query","createFromWizard","referrer","priority","projectId","params","panelContent","AlertWizardPanelContent","StyledPageHeader","Heading","WizardBody","WizardOptions","AlertWizardOptions","i","categoryHeading","options","OptionsWrapper","alertType","AlertWizardAlertNames","WebVitalAlertTypes","StyledBadge","text","WizardPanel","visible","WizardPanelBody","PanelDescription","docsLink","href","height","ExampleHeader","symbol","examples","example","ExampleItem","renderCreateAlertButton","React","PageHeader","fontSizeExtraLarge","Badge","fontSizeLarge","ListItem","fontSizeMedium","Set","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","fcp","custom","aggregate","eventTypes","EventTypes","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","environment","statsPeriod","start","end","SidebarSpacer"],"mappings":"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","file":"ProjectAlertsWizard.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import {t} from 'app/locale';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  hasMetricAlerts: boolean;\n  orgSlug: string;\n  title: string;\n  projectSlug: string;\n  alertName?: string;\n};\n\nfunction BuilderBreadCrumbs(props: Props) {\n  const {hasMetricAlerts, orgSlug, title, alertName, projectSlug} = props;\n  const crumbs: Crumb[] = [\n    {\n      to: hasMetricAlerts\n        ? `/organizations/${orgSlug}/alerts/`\n        : `/organizations/${orgSlug}/alerts/rules/`,\n      label: t('Alerts'),\n      preserveGlobalSelection: true,\n    },\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${orgSlug}/alerts/${projectSlug}/wizard`,\n            preserveGlobalSelection: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'app/components/panels';\nimport Radio from 'app/components/radio';\nimport space from 'app/styles/space';\n\ntype RadioPanelGroupProps<C extends string> = {\n  label: string;\n  /**\n   * An array of [id, name]\n   */\n  choices: [C, React.ReactNode, React.ReactNode?][];\n  value: string | null;\n  onChange: (id: C, e: React.FormEvent<HTMLInputElement>) => void;\n};\n\ntype Props<C extends string> = RadioPanelGroupProps<C> &\n  Omit<React.HTMLAttributes<HTMLDivElement>, keyof RadioPanelGroupProps<C>>;\n\nconst RadioPanelGroup = <C extends string>({\n  value,\n  choices,\n  label,\n  onChange,\n  ...props\n}: Props<C>) => (\n  <Container {...props} role=\"radiogroup\" aria-labelledby={label}>\n    {(choices || []).map(([id, name, extraContent], index) => (\n      <RadioPanel key={index}>\n        <RadioPanelBody>\n          <RadioLineItem role=\"radio\" index={index} aria-checked={value === id}>\n            <Radio\n              radioSize=\"small\"\n              aria-label={id}\n              checked={value === id}\n              onChange={(e: React.FormEvent<HTMLInputElement>) => onChange(id, e)}\n            />\n            <div>{name}</div>\n            {extraContent}\n          </RadioLineItem>\n        </RadioPanelBody>\n      </RadioPanel>\n    ))}\n  </Container>\n);\n\nexport default RadioPanelGroup;\n\nconst Container = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-auto-flow: row;\n  grid-auto-rows: max-content;\n  grid-auto-columns: auto;\n`;\n\nexport const RadioLineItem = styled('label')<{\n  index: number;\n}>`\n  display: grid;\n  grid-gap: 0.25em 0.5em;\n  grid-template-columns: max-content auto max-content;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst RadioPanel = styled(Panel)`\n  margin: 0;\n`;\n\nconst RadioPanelBody = styled(PanelBody)`\n  padding: ${space(1.5)};\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'app/components/acl/feature';\nimport Badge from 'app/components/badge';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport PageHeading from 'app/components/pageHeading';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport Placeholder from 'app/components/placeholder';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport {t} from 'app/locale';\nimport {PageContent, PageHeader} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport BuilderBreadCrumbs from 'app/views/alerts/builder/builderBreadCrumbs';\nimport {Dataset} from 'app/views/settings/incidentRules/types';\n\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardOptions,\n  AlertWizardPanelContent,\n  AlertWizardRuleTemplates,\n  WebVitalAlertTypes,\n} from './options';\nimport RadioPanelGroup from './radioPanelGroup';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  project: Project;\n  hasMetricAlerts: boolean;\n};\n\ntype State = {\n  alertOption: AlertType | null;\n};\nclass AlertWizard extends React.Component<Props, State> {\n  state: State = {\n    alertOption: null,\n  };\n\n  handleChangeAlertOption = (alertOption: AlertType) => {\n    this.setState({alertOption});\n  };\n\n  renderCreateAlertButton() {\n    const {organization, project, location} = this.props;\n    const {alertOption} = this.state;\n    const metricRuleTemplate = alertOption && AlertWizardRuleTemplates[alertOption];\n    const disabled =\n      !organization.features.includes('performance-view') &&\n      metricRuleTemplate?.dataset === Dataset.TRANSACTIONS;\n\n    const to = {\n      pathname: `/organizations/${organization.slug}/alerts/${project.slug}/new/`,\n      query: {\n        ...(metricRuleTemplate && metricRuleTemplate),\n        createFromWizard: true,\n        referrer: location?.query?.referrer,\n      },\n    };\n    return (\n      <CreateAlertButton\n        organization={organization}\n        projectSlug={project.slug}\n        priority=\"primary\"\n        to={to}\n        disabled={disabled}\n      />\n    );\n  }\n\n  render() {\n    const {\n      hasMetricAlerts,\n      organization,\n      params: {projectId},\n    } = this.props;\n    const {alertOption} = this.state;\n    const title = t('Alert Creation Wizard');\n    const panelContent = alertOption && AlertWizardPanelContent[alertOption];\n    return (\n      <React.Fragment>\n        <SentryDocumentTitle title={title} projectSlug={projectId} />\n        <PageContent>\n          <Feature features={['organizations:alert-wizard']}>\n            <BuilderBreadCrumbs\n              hasMetricAlerts={hasMetricAlerts}\n              orgSlug={organization.slug}\n              projectSlug={projectId}\n              title={t('Create Alert Rule')}\n            />\n            <StyledPageHeader>\n              <PageHeading>{t('What do you want to alert on?')}</PageHeading>\n            </StyledPageHeader>\n            <Heading>{t('Errors')}</Heading>\n            <WizardBody>\n              <WizardOptions>\n                {AlertWizardOptions.map(({categoryHeading, options}, i) => (\n                  <OptionsWrapper key={categoryHeading}>\n                    {i > 0 && <Heading>{categoryHeading}</Heading>}\n                    <RadioPanelGroup\n                      choices={options.map(alertType => {\n                        return [\n                          alertType,\n                          AlertWizardAlertNames[alertType],\n                          ...(WebVitalAlertTypes.has(alertType)\n                            ? [<StyledBadge key={alertType} text={t('Web Vital')} />]\n                            : []),\n                        ] as [AlertType, string, React.ReactNode];\n                      })}\n                      onChange={this.handleChangeAlertOption}\n                      value={alertOption}\n                      label=\"alert-option\"\n                    />\n                  </OptionsWrapper>\n                ))}\n              </WizardOptions>\n              <WizardPanel visible={!!panelContent && !!alertOption}>\n                {panelContent && alertOption && (\n                  <WizardPanelBody>\n                    <PageHeading>{AlertWizardAlertNames[alertOption]}</PageHeading>\n                    <PanelDescription>\n                      {panelContent.description}{' '}\n                      {panelContent.docsLink && (\n                        <ExternalLink href={panelContent.docsLink}>\n                          {t('Learn more')}\n                        </ExternalLink>\n                      )}\n                    </PanelDescription>\n                    <Placeholder height=\"250px\" />\n                    <ExampleHeader>{t('Examples')}</ExampleHeader>\n                    <List symbol=\"bullet\">\n                      {panelContent.examples.map((example, i) => (\n                        <ExampleItem key={i}>{example}</ExampleItem>\n                      ))}\n                    </List>\n                  </WizardPanelBody>\n                )}\n                {this.renderCreateAlertButton()}\n              </WizardPanel>\n            </WizardBody>\n          </Feature>\n        </PageContent>\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  margin-bottom: ${space(4)};\n`;\n\nconst Heading = styled('h1')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  font-weight: normal;\n  margin-bottom: ${space(1)};\n`;\n\nconst WizardBody = styled('div')`\n  display: flex;\n`;\n\nconst WizardOptions = styled('div')`\n  flex: 3;\n  margin-right: ${space(4)};\n`;\n\nconst StyledBadge = styled(Badge)`\n  color: ${p => p.theme.textColor};\n  font-weight: normal;\n`;\n\nconst WizardPanel = styled(Panel)<{visible?: boolean}>`\n  padding: ${space(3)};\n  flex: 5;\n  display: flex;\n  ${p => !p.visible && 'visibility: hidden'};\n  flex-direction: column;\n  align-items: start;\n  align-self: flex-start;\n`;\n\nconst WizardPanelBody = styled(PanelBody)`\n  margin-bottom: ${space(2)};\n  flex: 1;\n`;\n\nconst PanelDescription = styled('div')`\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(2)};\n`;\n\nconst ExampleHeader = styled('div')`\n  margin: ${space(2)} 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst ExampleItem = styled(ListItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst OptionsWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport default AlertWizard;\n","import {t} from 'app/locale';\nimport {Dataset, EventTypes} from 'app/views/settings/incidentRules/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'fcp'\n  | 'custom';\n\nexport const WebVitalAlertTypes = new Set(['lcp', 'fid', 'cls', 'fcp']);\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  fcp: t('First Contentful Paint'),\n  custom: t('Custom Metric'),\n};\n\nexport const AlertWizardOptions: {\n  categoryHeading: string;\n  options: AlertType[];\n}[] = [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n      'fcp',\n      'custom',\n    ],\n  },\n];\n\ntype PanelContent = {\n  description: string;\n  docsLink?: string;\n  examples: string[];\n  illustration?: string;\n};\n\nexport const AlertWizardPanelContent: Record<AlertType, PanelContent> = {\n  issues: {\n    description: t(\n      'Issues are groups of errors that have a similar stacktrace. You can set an alert for new issues, issue state changes, and frequency of errors or users affected by an issue.'\n    ),\n    examples: [\n      t(\"When the triggering event's level is fatal.\"),\n      t('When an issue was seen 100 times in the last 2 days.'),\n      t(\n        'Create a JIRA ticket when an issue changes state from resolved to unresolved and is unassigned.'\n      ),\n    ],\n  },\n  num_errors: {\n    description: t(\n      'Alert when the number of errors in a project matching your filters crosses a threshold. This is useful for monitoring the overall level or errors in your project or errors occurring in specific parts of your app.'\n    ),\n    examples: [\n      t('When the signup page has more than 10k errors in 5 minutes.'),\n      t('When there are more than 500k errors in 10 minutes from a specific file.'),\n    ],\n  },\n  users_experiencing_errors: {\n    description: t(\n      'Alert when the number of users affected by errors in your project crosses a threshold.'\n    ),\n    examples: [\n      t('When 100k users experience an error in 1 hour.'),\n      t('When 100 users experience a problem on the Checkout page.'),\n    ],\n  },\n  throughput: {\n    description: t('Throughput is the number of transactions in a period of time.'),\n    examples: [\n      t('When number of transactions on a key page exceeds 100k per minute.'),\n      t('When number of transactions drops below a threshold.'),\n    ],\n  },\n  trans_duration: {\n    description: t(\n      'Monitor how long it takes for transactions to complete. Use flexible aggregates like percentiles, averages, and min/max.'\n    ),\n    examples: [\n      t('When any transaction is slower than 3 seconds.'),\n      t('When the 75th percentile response time is higher than 250 milliseconds.'),\n    ],\n  },\n  apdex: {\n    description: t(\n      'Apdex is a metric used to track and measure user satisfaction based on your application response times. The Apdex score provides the ratio of satisfactory, tolerable, and frustrated requests in a specific transaction or endpoint.'\n    ),\n    examples: [t('When apdex is below 300.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#apdex',\n  },\n  failure_rate: {\n    description: t('Failure rate is the percentage of unsuccessful transactions.'),\n    examples: [t('When the failure rate for an important endpoint reaches 10%.')],\n    docsLink: 'https://docs.sentry.io/product/performance/metrics/#failure-rate',\n  },\n  lcp: {\n    description: t(\n      'Largest Contentful Paint (LCP) measures loading performance. Specifically, it marks the point when the largest image or text block is visible within the viewport. A fast LCP helps reassure the user that the page is useful, and we recommend LCP is less than 2.5 seconds.'\n    ),\n    examples: [\n      t('When the 75th percentile LCP of your homepage is longer than 2.5 seconds.'),\n    ],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  fid: {\n    description: t(\n      'First Input Delay (FID) measures interactivity as the response time when the user tries to interact with the viewport. A low FID helps ensure that a page is useful, and recommend it be less than 100 milliseconds.'\n    ),\n    examples: [t('When the average FID of a page is longer than 4 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  cls: {\n    description: t(\n      'Cumulative Layout Shift (CLS) measures visual stability by quantifying unexpected layout shifts that occur during the entire lifespan of the page. A CLS of less than 0.1 is a good user experience, while anything greater than 0.25 is poor.'\n    ),\n    examples: [t('When the CLS of a page is more than 0.5.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  fcp: {\n    description: t(\n      'First Contentful Paint (FCP), like Largest Contentful Paint (LCP), measures loading performance. Specifically, it marks the point when content such as text and images can first be seen on a page.'\n    ),\n    examples: [t('When the average FCP of a page is longer than 0.25 seconds.')],\n    docsLink: 'https://docs.sentry.io/product/performance/web-vitals',\n  },\n  custom: {\n    description: t(\n      'Alert on metrics which are not listed above, such as first paint (FP) and time to first byte (TTFB).'\n    ),\n    examples: [\n      t('When the 95th percentile FP of a page is longer than 250 milliseconds.'),\n      t('When the average TTFB of a page is longer than 600 millliseconds.'),\n    ],\n  },\n};\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  Exclude<AlertType, 'issues'>,\n  WizardRuleTemplate\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(tags[sentry:user])',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fcp: {\n    aggregate: 'p95(measurements.fcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n};\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"sourceRoot":""}