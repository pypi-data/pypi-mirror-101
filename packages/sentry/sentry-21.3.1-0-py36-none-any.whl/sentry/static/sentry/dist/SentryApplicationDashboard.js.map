{"version":3,"sources":["webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/index.tsx"],"names":["LineChart","this","props","series","seriesOptions","map","seriesName","data","dataArray","options","LineSeries","name","value","animation","animationThreshold","animationDuration","React","AsyncView","title","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ALL_EVENTS","t","getEventTypes","memoize","app","issueLinkEvents","issueLinkComponent","schema","elements","find","element","type","hasSelectUri","fields","some","field","createHasSelectUri","create","required_fields","optional_fields","linkHasSelectUri","link","componentHasSelectUri","push","status","events","includes","isAlertable","ResponseCode","code","Tags","StyledTag","TimestampLink","date","href","StyledIconOpen","size","RequestLog","shouldReload","handleChangeEventType","eventType","setState","currentPage","remountComponent","handleChangeErrorsOnly","errorsOnly","state","handleNextPage","handlePrevPage","requests","length","slug","query","renderBody","currentRequests","slice","RequestLogFilters","label","menuWidth","button","isOpen","getActorProps","StyledDropdownButton","key","onSelect","eventKey","isActive","StyledErrorsOnlyButton","onClick","ErrorsOnlyCheckbox","checked","onChange","TableLayout","hasOrganization","loading","request","idx","errorUrl","responseCode","organization","OverflowBox","webhookUrl","PaginationButtons","direction","disabled","hasPrevPage","hasNextPage","DropdownButton","zIndex","header","Button","IconOpen","subText","Tag","SentryApplicationDashboard","appSlug","params","now","Math","floor","Date","getTime","ninety_days_ago","since","until","stats","totalUninstalls","totalInstalls","Row","datePublished","StatsSection","StatsHeader","dateOnly","renderInstallCharts","installStats","uninstallStats","installSeries","point","uninstallSeries","ChartWrapper","height","stacked","isGroupedByDate","legend","show","orient","itemWidth","yAxis","minInterval","max","xAxis","grid","left","right","views","interactions","orgId","InteractionsChart","Views","StyledFooter","to","componentInteractions","componentInteractionsDetails","Object","keys","component","renderInstallData","renderIntegrationViews","renderComponentInteractions","elementInteractionsSeries"],"mappings":"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","file":"SentryApplicationDashboard.js","sourcesContent":["import React from 'react';\nimport {EChartOption} from 'echarts';\n\nimport {Series} from 'app/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nexport type LineChartSeries = Series &\n  Omit<EChartOption.SeriesLine, 'data' | 'name'> & {\n    dataArray?: EChartOption.SeriesLine['data'];\n  };\n\ntype Props = Omit<ChartProps, 'series'> & {\n  series: LineChartSeries[];\n  seriesOptions?: EChartOption.SeriesLine;\n};\n\nexport default class LineChart extends React.Component<Props> {\n  render() {\n    const {series, seriesOptions, ...props} = this.props;\n\n    return (\n      <BaseChart\n        {...props}\n        series={series.map(({seriesName, data, dataArray, ...options}) =>\n          LineSeries({\n            ...seriesOptions,\n            ...options,\n            name: seriesName,\n            data: dataArray || data.map(({value, name}) => [name, value]),\n            animation: false,\n            animationThreshold: 1,\n            animationDuration: 0,\n          })\n        )}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment-timezone';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport Checkbox from 'app/components/checkbox';\nimport DateTime from 'app/components/dateTime';\nimport DropdownButton from 'app/components/dropdownButton';\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport ExternalLink from 'app/components/links/externalLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport Tag from 'app/components/tag';\nimport {IconChevron, IconFlag, IconOpen} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {SentryApp, SentryAppSchemaIssueLink, SentryAppWebhookRequest} from 'app/types';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nconst ALL_EVENTS = t('All Events');\nconst MAX_PER_PAGE = 10;\n\nconst componentHasSelectUri = (issueLinkComponent: SentryAppSchemaIssueLink): boolean => {\n  const hasSelectUri = (fields: any[]): boolean =>\n    fields.some(field => field.type === 'select' && 'uri' in field);\n\n  const createHasSelectUri =\n    hasSelectUri(issueLinkComponent.create.required_fields) ||\n    hasSelectUri(issueLinkComponent.create.optional_fields || []);\n\n  const linkHasSelectUri =\n    hasSelectUri(issueLinkComponent.link.required_fields) ||\n    hasSelectUri(issueLinkComponent.link.optional_fields || []);\n\n  return createHasSelectUri || linkHasSelectUri;\n};\n\nconst getEventTypes = memoize((app: SentryApp) => {\n  // TODO(nola): ideally this would be kept in sync with EXTENDED_VALID_EVENTS on the backend\n\n  let issueLinkEvents: string[] = [];\n  const issueLinkComponent = (app.schema.elements || []).find(\n    element => element.type === 'issue-link'\n  );\n  if (issueLinkComponent) {\n    issueLinkEvents = ['external_issue.created', 'external_issue.linked'];\n    if (componentHasSelectUri(issueLinkComponent as SentryAppSchemaIssueLink)) {\n      issueLinkEvents.push('select_options.requested');\n    }\n  }\n\n  const events = [\n    ALL_EVENTS,\n    // Internal apps don't have installation webhooks\n    ...(app.status !== 'internal'\n      ? ['installation.created', 'installation.deleted']\n      : []),\n    ...(app.events.includes('error') ? ['error.created'] : []),\n    ...(app.events.includes('issue')\n      ? ['issue.created', 'issue.resolved', 'issue.ignored', 'issue.assigned']\n      : []),\n    ...(app.isAlertable\n      ? [\n          'event_alert.triggered',\n          'metric_alert.open',\n          'metric_alert.resolved',\n          'metric_alert.critical',\n          'metric_alert.warning',\n        ]\n      : []),\n    ...issueLinkEvents,\n  ];\n\n  return events;\n});\n\nconst ResponseCode = ({code}: {code: number}) => {\n  let type: React.ComponentProps<typeof Tag>['type'] = 'error';\n  if (code <= 399 && code >= 300) {\n    type = 'warning';\n  } else if (code <= 299 && code >= 100) {\n    type = 'success';\n  }\n\n  return (\n    <Tags>\n      <StyledTag type={type}>{code === 0 ? 'timeout' : code}</StyledTag>\n    </Tags>\n  );\n};\n\nconst TimestampLink = ({date, link}: {date: moment.MomentInput; link?: string}) =>\n  link ? (\n    <ExternalLink href={link}>\n      <DateTime date={date} />\n      <StyledIconOpen size=\"12px\" />\n    </ExternalLink>\n  ) : (\n    <DateTime date={date} />\n  );\n\ntype Props = AsyncComponent['props'] & {\n  app: SentryApp;\n};\n\ntype State = AsyncComponent['state'] & {\n  eventType: string;\n  errorsOnly: boolean;\n  currentPage: number;\n  requests: SentryAppWebhookRequest[];\n};\n\nexport default class RequestLog extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  get hasNextPage() {\n    return (this.state.currentPage + 1) * MAX_PER_PAGE < this.state.requests.length;\n  }\n\n  get hasPrevPage() {\n    return this.state.currentPage > 0;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {slug} = this.props.app;\n\n    const query: any = {};\n    if (this.state) {\n      if (this.state.eventType !== ALL_EVENTS) {\n        query.eventType = this.state.eventType;\n      }\n      if (this.state.errorsOnly) {\n        query.errorsOnly = true;\n      }\n    }\n\n    return [['requests', `/sentry-apps/${slug}/requests/`, {query}]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      requests: [],\n      eventType: ALL_EVENTS,\n      errorsOnly: false,\n      currentPage: 0,\n    };\n  }\n\n  handleChangeEventType = (eventType: string) => {\n    this.setState(\n      {\n        eventType,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleChangeErrorsOnly = () => {\n    this.setState(\n      {\n        errorsOnly: !this.state.errorsOnly,\n        currentPage: 0,\n      },\n      this.remountComponent\n    );\n  };\n\n  handleNextPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage + 1,\n    });\n  };\n\n  handlePrevPage = () => {\n    this.setState({\n      currentPage: this.state.currentPage - 1,\n    });\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {requests, eventType, errorsOnly, currentPage} = this.state;\n    const {app} = this.props;\n\n    const currentRequests = requests.slice(\n      currentPage * MAX_PER_PAGE,\n      (currentPage + 1) * MAX_PER_PAGE\n    );\n\n    return (\n      <React.Fragment>\n        <h5>{t('Request Log')}</h5>\n\n        <div>\n          <p>\n            {t(\n              'This log shows the status of any outgoing webhook requests from Sentry to your integration.'\n            )}\n          </p>\n\n          <RequestLogFilters>\n            <DropdownControl\n              label={eventType}\n              menuWidth=\"220px\"\n              button={({isOpen, getActorProps}) => (\n                <StyledDropdownButton {...getActorProps()} isOpen={isOpen}>\n                  {eventType}\n                </StyledDropdownButton>\n              )}\n            >\n              {getEventTypes(app).map(type => (\n                <DropdownItem\n                  key={type}\n                  onSelect={this.handleChangeEventType}\n                  eventKey={type}\n                  isActive={eventType === type}\n                >\n                  {type}\n                </DropdownItem>\n              ))}\n            </DropdownControl>\n\n            <StyledErrorsOnlyButton onClick={this.handleChangeErrorsOnly}>\n              <ErrorsOnlyCheckbox>\n                <Checkbox checked={errorsOnly} onChange={() => {}} />\n                {t('Errors Only')}\n              </ErrorsOnlyCheckbox>\n            </StyledErrorsOnlyButton>\n          </RequestLogFilters>\n        </div>\n\n        <Panel>\n          <PanelHeader>\n            <TableLayout hasOrganization={app.status !== 'internal'}>\n              <div>{t('Time')}</div>\n              <div>{t('Status Code')}</div>\n              {app.status !== 'internal' && <div>{t('Organization')}</div>}\n              <div>{t('Event Type')}</div>\n              <div>{t('Webhook URL')}</div>\n            </TableLayout>\n          </PanelHeader>\n\n          {!this.state.loading ? (\n            <PanelBody>\n              {currentRequests.length > 0 ? (\n                currentRequests.map((request, idx) => (\n                  <PanelItem key={idx}>\n                    <TableLayout hasOrganization={app.status !== 'internal'}>\n                      <TimestampLink date={request.date} link={request.errorUrl} />\n                      <ResponseCode code={request.responseCode} />\n                      {app.status !== 'internal' && (\n                        <div>\n                          {request.organization ? request.organization.name : null}\n                        </div>\n                      )}\n                      <div>{request.eventType}</div>\n                      <OverflowBox>{request.webhookUrl}</OverflowBox>\n                    </TableLayout>\n                  </PanelItem>\n                ))\n              ) : (\n                <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n                  {t('No requests found in the last 30 days.')}\n                </EmptyMessage>\n              )}\n            </PanelBody>\n          ) : (\n            <LoadingIndicator />\n          )}\n        </Panel>\n\n        <PaginationButtons>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            onClick={this.handlePrevPage}\n            disabled={!this.hasPrevPage}\n            label={t('Previous page')}\n          />\n          <Button\n            icon={<IconChevron direction=\"right\" size=\"sm\" />}\n            onClick={this.handleNextPage}\n            disabled={!this.hasNextPage}\n            label={t('Next page')}\n          />\n        </PaginationButtons>\n      </React.Fragment>\n    );\n  }\n}\n\nconst TableLayout = styled('div')<{hasOrganization: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr 0.5fr ${p => (p.hasOrganization ? '1fr' : '')} 1fr 1fr;\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst OverflowBox = styled('div')`\n  word-break: break-word;\n`;\n\nconst PaginationButtons = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n\n  > :first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > :nth-child(2) {\n    margin-left: -1px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`;\n\nconst RequestLogFilters = styled('div')`\n  display: flex;\n  align-items: center;\n  padding-bottom: ${space(1)};\n`;\n\nconst ErrorsOnlyCheckbox = styled('div')`\n  input {\n    margin: 0 ${space(1)} 0 0;\n  }\n\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.header - 1};\n  white-space: nowrap;\n\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`;\n\nconst StyledErrorsOnlyButton = styled(Button)`\n  margin-left: -1px;\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst StyledIconOpen = styled(IconOpen)`\n  margin-left: 6px;\n  color: ${p => p.theme.subText};\n`;\n\nconst Tags = styled('div')`\n  margin: -${space(0.5)};\n`;\n\nconst StyledTag = styled(Tag)`\n  padding: ${space(0.5)};\n  display: inline-flex;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport BarChart from 'app/components/charts/barChart';\nimport LineChart from 'app/components/charts/lineChart';\nimport DateTime from 'app/components/dateTime';\nimport Link from 'app/components/links/link';\nimport {Panel, PanelBody, PanelFooter, PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {SentryApp} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\nimport RequestLog from './requestLog';\n\ntype Props = RouteComponentProps<{appSlug: string; orgId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  stats: {\n    totalUninstalls: number;\n    totalInstalls: number;\n    installStats: [number, number][];\n    uninstallStats: [number, number][];\n  };\n  interactions: {\n    componentInteractions: {\n      [key: string]: [number, number][];\n    };\n    views: [number, number][];\n  };\n  app: SentryApp;\n};\n\nexport default class SentryApplicationDashboard extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {appSlug} = this.props.params;\n\n    // Default time range for now: 90 days ago to now\n    const now = Math.floor(new Date().getTime() / 1000);\n    const ninety_days_ago = 3600 * 24 * 90;\n\n    return [\n      [\n        'stats',\n        `/sentry-apps/${appSlug}/stats/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n\n      [\n        'interactions',\n        `/sentry-apps/${appSlug}/interaction/`,\n        {query: {since: now - ninety_days_ago, until: now}},\n      ],\n      ['app', `/sentry-apps/${appSlug}/`],\n    ];\n  }\n\n  getTitle() {\n    return t('Integration Dashboard');\n  }\n\n  renderInstallData() {\n    const {app, stats} = this.state;\n    const {totalUninstalls, totalInstalls} = stats;\n    return (\n      <React.Fragment>\n        <h5>{t('Installation & Interaction Data')}</h5>\n        <Row>\n          {app.datePublished ? (\n            <StatsSection>\n              <StatsHeader>{t('Date published')}</StatsHeader>\n              <DateTime dateOnly date={app.datePublished} />\n            </StatsSection>\n          ) : null}\n          <StatsSection>\n            <StatsHeader>{t('Total installs')}</StatsHeader>\n            <p>{totalInstalls}</p>\n          </StatsSection>\n          <StatsSection>\n            <StatsHeader>{t('Total uninstalls')}</StatsHeader>\n            <p>{totalUninstalls}</p>\n          </StatsSection>\n        </Row>\n        {this.renderInstallCharts()}\n      </React.Fragment>\n    );\n  }\n\n  renderInstallCharts() {\n    const {installStats, uninstallStats} = this.state.stats;\n\n    const installSeries = {\n      data: installStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('installed'),\n    };\n    const uninstallSeries = {\n      data: uninstallStats.map(point => ({\n        name: point[0] * 1000,\n        value: point[1],\n      })),\n      seriesName: t('uninstalled'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Installations/Uninstallations over Last 90 Days')}</PanelHeader>\n        <ChartWrapper>\n          <BarChart\n            series={[installSeries, uninstallSeries]}\n            height={150}\n            stacked\n            isGroupedByDate\n            legend={{\n              show: true,\n              orient: 'horizontal',\n              data: ['installed', 'uninstalled'],\n              itemWidth: 15,\n            }}\n            yAxis={{type: 'value', minInterval: 1, max: 'dataMax'}}\n            xAxis={{type: 'time'}}\n            grid={{left: space(4), right: space(4)}}\n          />\n        </ChartWrapper>\n      </Panel>\n    );\n  }\n\n  renderIntegrationViews() {\n    const {views} = this.state.interactions;\n    const {appSlug, orgId} = this.props.params;\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Integration Views')}</PanelHeader>\n        <PanelBody>\n          <InteractionsChart data={{Views: views}} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {t('Integration views are measured through views on the ')}\n            <Link to={`/sentry-apps/${appSlug}/external-install/`}>\n              {t('external installation page')}\n            </Link>\n            {t(' and views on the Learn More/Install modal on the ')}\n            <Link to={`/settings/${orgId}/integrations/`}>{t('integrations page')}</Link>\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderComponentInteractions() {\n    const {componentInteractions} = this.state.interactions;\n    const componentInteractionsDetails = {\n      'stacktrace-link': t(\n        'Each link click or context menu open counts as one interaction'\n      ),\n      'issue-link': t('Each open of the issue link modal counts as one interaction'),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Component Interactions')}</PanelHeader>\n\n        <PanelBody>\n          <InteractionsChart data={componentInteractions} />\n        </PanelBody>\n\n        <PanelFooter>\n          <StyledFooter>\n            {Object.keys(componentInteractions).map(\n              (component, idx) =>\n                componentInteractionsDetails[component] && (\n                  <React.Fragment key={idx}>\n                    <strong>{`${component}: `}</strong>\n                    {componentInteractionsDetails[component]}\n                    <br />\n                  </React.Fragment>\n                )\n            )}\n          </StyledFooter>\n        </PanelFooter>\n      </Panel>\n    );\n  }\n\n  renderBody() {\n    const {app} = this.state;\n\n    return (\n      <div>\n        <SettingsPageHeader title={`${t('Integration Dashboard')} - ${app.name}`} />\n        {app.status === 'published' && this.renderInstallData()}\n        {app.status === 'published' && this.renderIntegrationViews()}\n        {app.schema.elements && this.renderComponentInteractions()}\n        <RequestLog app={app} />\n      </div>\n    );\n  }\n}\n\ntype InteractionsChartProps = {\n  data: {\n    [key: string]: [number, number][];\n  };\n};\nconst InteractionsChart = ({data}: InteractionsChartProps) => {\n  const elementInteractionsSeries = Object.keys(data).map((key: string) => {\n    const seriesData = data[key].map(point => ({\n      value: point[1],\n      name: point[0] * 1000,\n    }));\n    return {\n      seriesName: key,\n      data: seriesData,\n    };\n  });\n\n  return (\n    <ChartWrapper>\n      <LineChart\n        isGroupedByDate\n        series={elementInteractionsSeries}\n        grid={{left: space(4), right: space(4)}}\n        legend={{\n          show: true,\n          orient: 'horizontal',\n          data: Object.keys(data),\n        }}\n      />\n    </ChartWrapper>\n  );\n};\n\nconst Row = styled('div')`\n  display: flex;\n`;\n\nconst StatsSection = styled('div')`\n  margin-right: ${space(4)};\n`;\nconst StatsHeader = styled('h6')`\n  margin-bottom: ${space(1)};\n  font-size: 12px;\n  text-transform: uppercase;\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledFooter = styled('div')`\n  padding: ${space(1.5)};\n`;\n\nconst ChartWrapper = styled('div')`\n  padding-top: ${space(3)};\n`;\n"],"sourceRoot":""}