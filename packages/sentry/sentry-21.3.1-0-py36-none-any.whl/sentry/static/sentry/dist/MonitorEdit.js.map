{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/monitors/edit.tsx","webpack:///./app/views/monitors/monitorModel.tsx","webpack:///./app/views/monitors/monitorForm.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","EditMonitor","onUpdate","data","setState","state","monitor","onSubmitSuccess","browserHistory","props","params","orgId","id","monitorId","name","apiMethod","apiEndpoint","MonitorModel","Object","entries","fields","toJSON","reduce","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","getValue","FormModel","SCHEDULE_TYPES","MONITOR_TYPES","INTERVALS","MonitorForm","form","type","rv","schedule_type","checkin_margin","max_runtime","selectedProjectId","selection","projects","selectedProject","organization","find","p","access","hasAccess","allowUndo","requireChanges","model","initialData","project","slug","formDataFromConfig","t","label","className","disabled","choices","filter","isMember","map","required","placeholder","help","tct","link","href","Component","withGlobalSelection","withOrganization"],"mappings":"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","file":"MonitorEdit.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorForm from './monitorForm';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; monitorId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nexport default class EditMonitor extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`]];\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  onSubmitSuccess = (data: Monitor) =>\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <React.Fragment>\n        <h1>Edit Monitor</h1>\n\n        <MonitorForm\n          monitor={monitor}\n          apiMethod=\"PUT\"\n          apiEndpoint={`/monitors/${monitor.id}/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","import FormModel from 'app/views/settings/components/forms/model';\n\nimport {MonitorConfig} from './types';\n\ntype TransformedData = {\n  config?: Partial<MonitorConfig>;\n};\n\nexport default class MonitorModel extends FormModel {\n  getTransformedData() {\n    return Object.entries(this.fields.toJSON()).reduce<TransformedData>(\n      (data, [k, v]) => {\n        if (k.indexOf('config.') !== 0) {\n          data[k] = v;\n          return data;\n        }\n\n        if (!data.config) {\n          data.config = {};\n        }\n        if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n          if (!Array.isArray(data.config.schedule)) {\n            data.config.schedule = [null, null];\n          }\n        }\n\n        if (k === 'config.schedule.frequency') {\n          data.config!.schedule![0] = parseInt(v as string, 10);\n        } else if (k === 'config.schedule.interval') {\n          data.config!.schedule![1] = v;\n        } else {\n          data.config[k.substr(7)] = v;\n        }\n\n        return data;\n      },\n      {}\n    );\n  }\n\n  getTransformedValue(id: string) {\n    return id.indexOf('config') === 0 ? this.getValue(id) : super.getTransformedValue(id);\n  }\n}\n","import React, {Component} from 'react';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'app/components/acl/access';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {Choices, GlobalSelection, Organization} from 'app/types';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport NumberField from 'app/views/settings/components/forms/numberField';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport TextField from 'app/views/settings/components/forms/textField';\n\nimport MonitorModel from './monitorModel';\nimport {Monitor, MonitorConfig, MonitorTypes, ScheduleType} from './types';\n\nconst SCHEDULE_TYPES: [ScheduleType, string][] = [\n  ['crontab', 'Crontab'],\n  ['interval', 'Interval'],\n];\n\nconst MONITOR_TYPES: Choices = [['cron_job', 'Cron Job']];\n\nconst INTERVALS = [\n  ['minute', 'minute(s)'],\n  ['hour', 'hour(s)'],\n  ['day', 'day(s)'],\n  ['week', 'week(s)'],\n  ['month', 'month(s)'],\n  ['year', 'year(s)'],\n];\n\ntype Props = {\n  monitor?: Monitor;\n  organization: Organization;\n  selection: GlobalSelection;\n  apiEndpoint: string;\n  apiMethod: Form['props']['apiMethod'];\n  onSubmitSuccess: Form['props']['onSubmitSuccess'];\n};\n\nclass MonitorForm extends Component<Props> {\n  form = new MonitorModel();\n\n  formDataFromConfig(type: MonitorTypes, config: MonitorConfig) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.organization.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  choices={this.props.organization.projects\n                    .filter(p => p.isMember)\n                    .map(p => [p.slug, p.slug])}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <SelectField\n                  name=\"type\"\n                  label={t('Type')}\n                  disabled={!hasAccess}\n                  choices={MONITOR_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('type')) {\n                      case 'cron_job':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.max_runtime\"\n                              label={t('Max Runtime')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                            <SelectField\n                              name=\"config.schedule_type\"\n                              label={t('Schedule Type')}\n                              disabled={!hasAccess}\n                              choices={SCHEDULE_TYPES}\n                              required\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <React.Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * * *\"\n                              required\n                              help={tct(\n                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              required\n                            />\n                            <SelectField\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              choices={INTERVALS}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withGlobalSelection(withOrganization(MonitorForm));\n"],"sourceRoot":""}