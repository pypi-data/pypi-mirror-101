{"version":3,"sources":["webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminUsers.tsx","webpack:///./app/views/asyncView.tsx"],"names":["Filter","getSelector","title","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","query","location","key","isActive","to","pathname","path","selected","this","find","item","name","cursor","className","length","React","SortBy","getCurrentSortLabel","sortBy","getSortBySelector","ResultGrid","state","defaultState","onSearch","e","targetQueryParams","preventDefault","browserHistory","onQueryChange","evt","setState","target","fetchData","queryParams","defaultSort","filters","pageLinks","loading","error","rows","defaultParams","api","request","endpoint","method","data","success","_","jqXHR","getResponseHeader","colSpan","columns","row","keyForRow","columnsForRow","hasSearch","onSubmit","type","placeholder","style","width","autoComplete","onChange","size","sortOptions","Object","keys","filterKey","renderLoading","renderError","renderNoResults","renderResults","hasPagination","defaultProps","id","per_page","withApi","prettyDate","x","moment","format","AdminUsers","getRow","username","email","textAlign","dateJoined","lastLogin","t","status","AsyncView","getTitle","renderComponent","AsyncComponent"],"mappings":"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","file":"AdminUsers.js","sourcesContent":["import React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {Client, RequestOptions} from 'app/api';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\nimport withApi from 'app/utils/withApi';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  name: string;\n  queryKey: string;\n  options: Option[];\n  path: string;\n  value: string;\n  location: Location;\n};\n\nclass Filter extends React.Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  options: Option[];\n  path: string;\n  location: Location;\n  value: string;\n};\n\nclass SortBy extends React.Component<SortByProps> {\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultSort: string;\n  defaultParams: Record<string, any>;\n  filters: Record<string, FilterConfig>;\n  endpoint: string;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  rows: any[];\n  loading: boolean;\n  error: string | boolean;\n  pageLinks: null | string;\n  query: string;\n  sortBy: string;\n  filters: Record<string, string>;\n};\n\nclass ResultGrid extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({query: evt.target.value});\n  };\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions ?? []}\n            value={this.state.sortBy}\n            path={this.props.path ?? ''}\n            location={this.props.location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path ?? ''}\n              location={this.props.location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","import React from 'react';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport Link from 'app/components/links/link';\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\n\nexport const prettyDate = function (x) {\n  return moment(x).format('ll');\n};\n\ntype Row = {\n  id: string;\n  username: string;\n  email: string;\n  dateJoined: string;\n  lastLogin: string;\n};\n\ntype Props = {\n  location: Location;\n} & AsyncView['props'];\n\nexport default class AdminUsers extends AsyncView<Props> {\n  getRow = (row: Row) => [\n    <td key=\"username\">\n      <strong>\n        <Link to={`/manage/users/${row.id}/`}>{row.username}</Link>\n      </strong>\n      <br />\n      {row.email !== row.username && <small>{row.email}</small>}\n    </td>,\n    <td key=\"dateJoined\" style={{textAlign: 'center'}}>\n      {prettyDate(row.dateJoined)}\n    </td>,\n    <td key=\"lastLogin\" style={{textAlign: 'center'}}>\n      {prettyDate(row.lastLogin)}\n    </td>,\n  ];\n\n  render() {\n    const columns = [\n      <th key=\"username\">User</th>,\n      <th key=\"dateJoined\" style={{textAlign: 'center', width: 150}}>\n        Joined\n      </th>,\n      <th key=\"lastLogin\" style={{textAlign: 'center', width: 150}}>\n        Last Login\n      </th>,\n    ];\n\n    return (\n      <div>\n        <h3>{t('Users')}</h3>\n        <ResultGrid\n          path=\"/manage/users/\"\n          endpoint=\"/users/\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch\n          filters={{\n            status: {\n              name: 'Status',\n              options: [\n                ['active', 'Active'],\n                ['disabled', 'Disabled'],\n              ],\n            },\n          }}\n          sortOptions={[['date', 'Date Joined']]}\n          defaultSort=\"date\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n"],"sourceRoot":""}