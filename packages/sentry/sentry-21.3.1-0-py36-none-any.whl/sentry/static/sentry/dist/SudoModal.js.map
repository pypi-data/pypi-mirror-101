{"version":3,"sources":["webpack:///./app/components/u2f/u2fContainer.tsx","webpack:///./app/components/modals/sudoModal.tsx"],"names":["U2fContainer","state","authenticators","this","getAuthenticators","api","props","requestPromise","setState","className","length","map","auth","id","challenge","key","challengeData","React","withApi","SudoModal","error","busy","handleSuccess","closeModal","superuser","location","router","retryRequest","replace","pathname","forceUpdate","Date","then","handleError","handleU2fTap","data","method","user","ConfigStore","hasPasswordAuth","StyledTextBlock","t","StyledAlert","type","icon","size","apiMethod","apiEndpoint","submitLabel","onSubmitSuccess","onSubmitError","hideFooter","resetOnError","StyledInputField","inline","label","name","autoFocus","flexibleControlStateSize","displayMode","onTap","priority","href","encodeURIComponent","Header","Body","closeButton","onHide","renderBodyContent","withRouter","TextBlock","space","InputField","Alert"],"mappings":"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","file":"SudoModal.js","sourcesContent":["import React from 'react';\n\nimport {Client} from 'app/api';\nimport {Authenticator} from 'app/types';\nimport withApi from 'app/utils/withApi';\n\nimport U2fSign from './u2fsign';\n\ntype Props = {\n  api: Client;\n  onTap: U2fSign['props']['onTap'];\n  displayMode?: U2fSign['props']['displayMode'];\n  className?: string;\n};\ntype State = {\n  authenticators: Array<Authenticator>;\n};\n\nclass U2fContainer extends React.Component<Props, State> {\n  state: State = {\n    authenticators: [],\n  };\n  componentDidMount() {\n    this.getAuthenticators();\n  }\n\n  async getAuthenticators() {\n    const {api} = this.props;\n\n    try {\n      const authenticators = await api.requestPromise('/authenticators/');\n      this.setState({authenticators: authenticators ?? []});\n    } catch {\n      // ignore errors\n    }\n  }\n\n  render() {\n    const {className} = this.props;\n    const {authenticators} = this.state;\n\n    if (!authenticators.length) {\n      return null;\n    }\n\n    return (\n      <div className={className}>\n        {authenticators.map(auth =>\n          auth.id === 'u2f' && auth.challenge ? (\n            <U2fSign key={auth.id} {...this.props} challengeData={auth.challenge} />\n          ) : null\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withApi(U2fContainer);\n","import React from 'react';\nimport {withRouter} from 'react-router';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport U2fContainer from 'app/components/u2f/u2fContainer';\nimport {IconFlag} from 'app/icons';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport Form from 'app/views/settings/components/forms/form';\nimport InputField from 'app/views/settings/components/forms/inputField';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype OnTapProps = NonNullable<React.ComponentProps<typeof U2fContainer>['onTap']>;\n\ntype Props = WithRouterProps &\n  Pick<ModalRenderProps, 'Body' | 'Header'> & {\n    api: Client;\n    closeModal: () => void;\n    /**\n     * User is a superuser without an active su session\n     */\n    superuser?: boolean;\n    /**\n     * expects a function that returns a Promise\n     */\n    retryRequest?: () => Promise<any>;\n  };\n\ntype State = {\n  error: boolean;\n  busy: boolean;\n};\n\nclass SudoModal extends React.Component<Props, State> {\n  state: State = {\n    error: false,\n    busy: false,\n  };\n\n  handleSuccess = () => {\n    const {closeModal, superuser, location, router, retryRequest} = this.props;\n\n    if (!retryRequest) {\n      closeModal();\n      return;\n    }\n\n    if (superuser) {\n      router.replace({pathname: location.pathname, state: {forceUpdate: new Date()}});\n      return;\n    }\n\n    this.setState({busy: true}, () => {\n      retryRequest().then(() => {\n        this.setState({busy: false}, closeModal);\n      });\n    });\n  };\n\n  handleError = () => {\n    this.setState({busy: false, error: true});\n  };\n\n  handleU2fTap = async (data: Parameters<OnTapProps>[0]) => {\n    this.setState({busy: true});\n\n    const {api} = this.props;\n\n    try {\n      await api.requestPromise('/auth/', {method: 'PUT', data});\n      this.handleSuccess();\n    } catch (err) {\n      this.setState({busy: false});\n      // u2fInterface relies on this\n      throw err;\n    }\n  };\n\n  renderBodyContent() {\n    const {superuser} = this.props;\n    const {error} = this.state;\n    const user = ConfigStore.get('user');\n\n    if (!user.hasPasswordAuth) {\n      return (\n        <React.Fragment>\n          <TextBlock>{t('You will need to reauthenticate to continue.')}</TextBlock>\n          <Button\n            priority=\"primary\"\n            href={`/auth/login/?next=${encodeURIComponent(location.pathname)}`}\n          >\n            {t('Continue')}\n          </Button>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <StyledTextBlock>\n          {superuser\n            ? t(\n                'You are attempting to access a resource that requires superuser access, please re-authenticate as a superuser.'\n              )\n            : t('Help us keep your account safe by confirming your identity.')}\n        </StyledTextBlock>\n\n        {error && (\n          <StyledAlert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            {t('Incorrect password')}\n          </StyledAlert>\n        )}\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint=\"/auth/\"\n          submitLabel={t('Confirm Password')}\n          onSubmitSuccess={this.handleSuccess}\n          onSubmitError={this.handleError}\n          hideFooter={!user.hasPasswordAuth}\n          resetOnError\n        >\n          <StyledInputField\n            type=\"password\"\n            inline={false}\n            label={t('Password')}\n            name=\"password\"\n            autoFocus\n            flexibleControlStateSize\n          />\n          <U2fContainer displayMode=\"sudo\" onTap={this.handleU2fTap} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {closeModal, Header, Body} = this.props;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          {t('Confirm Password to Continue')}\n        </Header>\n        <Body>{this.renderBodyContent()}</Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(withApi(SudoModal));\nexport {SudoModal};\n\nconst StyledTextBlock = styled(TextBlock)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledInputField = styled(InputField)`\n  padding-left: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n"],"sourceRoot":""}