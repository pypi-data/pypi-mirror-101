{"version":3,"sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx"],"names":["doCallback","params","name","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","teamId","request","orgId","success","data","error","updateTeamSuccess","updateTeam","endpoint","method","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","requestPromise","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","route","title","fields","type","required","label","t","placeholder","help","disabled","access","has","transformInput","slugify","saveOnBlur","saveMessageAlertType","saveMessage","str","toLowerCase","replace","AsyncView","this","getTitle","renderComponent","AsyncComponent","Promise","resolve","reject","FormModel","TeamSettings","model","TeamModel","props","handleSubmitSuccess","resp","router","getValue","setState","loading","handleRemoveTeam","context","location","Set","apiMethod","allowUndo","onSubmitSuccess","onSubmitError","initialData","forms","teamSettingsFields","onConfirm","priority","message","icon","contextTypes","PropTypes","SentryTypes"],"mappings":"8WAaMA,EAAa,WAId,QAHHC,EAGG,uDAHuB,GAC1BC,EAEG,0DADAC,EACA,iCADAA,EACA,kBACHC,eAAA,GAAeH,EAAOC,IAAtB,OAAgCC,KA+B3B,SAASE,EACdC,EACAL,EACAM,GAGA,OADAC,iBAAyBP,EAAOQ,QACzBH,EAAII,QAAJ,iBAAsBT,EAAOU,MAA7B,YAAsCV,EAAOQ,OAA7C,KAAwD,CAC7DG,QAAS,SAAAC,GACPL,wBAAgCP,EAAOQ,OAAQI,GAC/Cb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,sBAA8BP,EAAOQ,OAAQK,GAC7Cd,EAAWO,EAAS,QAASO,MAK5B,SAASC,EAAkBN,EAAkCI,GAClEL,kBAA0BC,EAAQI,GAG7B,SAASG,EACdV,EACAL,EACAM,GAEA,IAAMU,EAAW,UAAH,OAAahB,EAAOU,MAApB,YAA6BV,EAAOQ,OAApC,KAGd,OAFAD,WAAmBP,EAAOQ,OAAQR,EAAOY,MAElCP,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,MACRL,KAAMZ,EAAOY,KACbD,QAAS,SAAAC,GACPE,EAAkBd,EAAOQ,OAAQI,GACjCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBP,EAAOQ,OAAQK,GACvCd,EAAWO,EAAS,QAASO,MAK5B,SAASK,EACdb,EACAL,EACAM,GACA,MACMU,EAAW,kBAAH,OAAqBhB,EAAOU,MAA5B,8BACZV,EAAOmB,gBADK,QACO,KADP,kBAEJnB,EAAOQ,OAFH,KAGRY,GAAKC,SAIX,OAFAd,WAAmBa,EAAIpB,EAAOQ,QAEvBH,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,OACRN,QAAS,SAAAC,GACPL,kBAA0BP,EAAOQ,OAAQI,GACzCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBa,EAAIpB,EAAOQ,OAAQK,GAC3Cd,EAAWO,EAAS,QAASO,MAK5B,SAASS,EACdjB,EACAL,EACAM,GAEA,IAAMU,EAAW,kBAAH,OAAqBhB,EAAOU,MAA5B,oBACZV,EAAOmB,UAAY,KADP,kBAEJnB,EAAOQ,OAFH,KAGRY,GAAKC,SAIX,OAFAd,WAAmBa,EAAIpB,EAAOQ,QAEvBH,EAAII,QAAQO,EAAU,CAC3BC,OAAQ,SACRN,QAAS,SAAAC,GACPL,kBAA0BP,EAAOQ,OAAQI,GACzCb,EAAWO,EAAS,UAAWM,IAEjCC,MAAO,SAAAA,GACLN,gBAAwBa,EAAIpB,EAAOQ,OAAQK,GAC3Cd,EAAWO,EAAS,QAASO,MAK5B,SAASU,EAAWlB,EAAamB,EAA0BxB,GAGhE,OAFAO,eAAuBiB,GAEhBnB,EACJoB,eADI,yBAC6BzB,EAAOU,MADpC,WACoD,CACvDO,OAAQ,OACRL,KAAMY,IAEPE,MACC,SAAAd,GAQE,OAPAL,sBAA8BK,IAC9Be,SACEC,QAAI,2DAA4D,CAC9DJ,KAAM,IAAF,OAAMZ,EAAKiB,MACfC,aAAc9B,EAAOU,SAGlBE,KAET,SAAAmB,GAQE,MAPAxB,oBAA4BiB,EAAKK,KAAME,IACvCC,SACEJ,QAAI,6DAA8D,CAChEJ,KAAM,IAAF,OAAMA,EAAKK,MACfC,aAAc9B,EAAOU,SAGnBqB,KAKP,SAASE,EAAW5B,EAAaL,GAGtC,OAFAO,eAAuBP,EAAOQ,QAEvBH,EACJoB,eADI,iBACqBzB,EAAOU,MAD5B,YACqCV,EAAOQ,OAD5C,KACuD,CAC1DS,OAAQ,WAETS,MACC,SAAAd,GAQE,OAPAL,sBAA8BP,EAAOQ,OAAQI,IAC7Ce,SACEC,QAAI,+DAAgE,CAClEJ,KAAM,IAAF,OAAMxB,EAAOQ,QACjBsB,aAAc9B,EAAOU,SAGlBE,KAET,SAAAmB,GAQE,MAPAxB,oBAA4BP,EAAOQ,OAAQuB,IAC3CC,SACEJ,QAAI,+DAAgE,CAClEJ,KAAM,IAAF,OAAMxB,EAAOQ,QACjBsB,aAAc9B,EAAOU,SAGnBqB,O,sKCpMDG,EAAQ,2CAyBrB,QAvBqC,CACnC,CAEEC,MAAO,gBACPC,OAAQ,CACN,CACEnC,KAAM,OACNoC,KAAM,SACNC,UAAU,EACVC,OAAOC,OAAE,QACTC,YAAa,gBACbC,MAAMF,OAAE,yCACRG,SAAU,qBAAEC,OAAoBC,IAAI,eACpCC,eAAgBC,IAEhBC,YAAY,EACZC,qBAAsB,OACtBC,aAAaV,OAAE,iE,iDCtBR,SAASO,EAAQI,GAC9B,MAAsB,iBAARA,EAAmBA,EAAIC,cAAcC,QAAQ,IAAK,KAAO,G,kuBCKpDC,E,qhBAInB,WACE,MAAO,K,oBAGT,WACE,IAAMnB,EAAQoB,KAAKC,WACnB,OACE,QAAC,IAAD,CAAerB,MAAK,UAAKA,EAAQ,GAAH,OAAMA,EAAN,OAAmB,GAA7B,WACjBoB,KAAKE,uB,GATJC,KAHWJ,E,00CCuBrB,Q,ybAxBE,WAAY5C,EAAeF,GAAgB,0BACzC,gBAJKE,WAGoC,IAFpCF,YAEoC,EAEzC,EAAKE,MAAQA,EACb,EAAKF,OAASA,EAH2B,E,wCAM3C,YAAqB,WAAPI,EAAO,EAAPA,KACZ,OAAO,IAAI+C,SAAQ,SAACC,EAASC,GAAV,OACjB9C,QACE,EAAKV,IACL,CACEK,MAAO,EAAKA,MACZF,OAAQ,EAAKA,OACbI,QAEF,CACED,QAASiD,EACT/C,MAAOgD,W,wDArBWC,G,+ECyBPC,E,2kBAOnBC,MAAQ,IAAIC,EAAU,EAAKC,MAAMlE,OAAOU,MAAO,EAAKwD,MAAMlE,OAAOQ,Q,EAUjE2D,oBAAsB,SAACC,EAAWJ,EAAkB5C,IAClDN,QAAkBsD,EAAKvC,KAAMuC,GAClB,SAAPhD,KACFO,SAAkBa,OAAE,sBACpB,EAAK0B,MAAMG,OAAOhB,QAAlB,oBACe,EAAKa,MAAMlE,OAAOU,MADjC,kBACgDsD,EAAMM,SAASlD,GAD/D,eAGA,EAAKmD,SAAS,CAACC,SAAS,M,EAI5BC,iB,cAAmB,+FACXxC,QAAW,EAAK5B,IAAK,EAAK6D,MAAMlE,QADrB,OAEjB,EAAKkE,MAAMG,OAAOhB,QAAlB,oBAAuC,EAAKa,MAAMlE,OAAOU,MAAzD,YAFiB,2C,sCAnBnB,WACE,MAAO,kB,0BAGT,WACE,MAAO,K,wBAmBT,WAAa,MACsB6C,KAAKmB,QAA/BC,EADI,EACJA,SAAU7C,EADN,EACMA,aACVN,EAAQ+B,KAAKW,MAAb1C,KAEDoB,EAAS,IAAIgC,IAAW9C,EAAac,QAE3C,OACE,QAAC,WAAD,MACE,QAAC,IAAD,CACEoB,MAAOT,KAAKS,MACZa,UAAU,MACV7B,YAAU,EACV8B,WAAS,EACTC,gBAAiBxB,KAAKY,oBACtBa,cAAe,kBAAMhD,SAAgBQ,OAAE,2BACvCyC,YAAa,CACXhF,KAAMuB,EAAKvB,KACX4B,KAAML,EAAKK,QAGb,QAAC,IAAD,CAAUe,OAAQA,EAAQ+B,SAAUA,EAAUO,MAAOC,cAGvD,QAAC,KAAD,MACE,QAAC,KAAD,MAAc3C,OAAE,iBAChB,QAAC,IAAD,CACEE,MAAMF,OACJ,qFAGF,oBACE,QAAC,IAAD,CACEG,UAAWC,EAAOC,IAAI,cACtBuC,UAAW7B,KAAKkB,iBAChBY,SAAS,SACTC,SAAS1D,QAAI,mDAAoD,CAC/DJ,KAAM,IAAF,OAAMA,EAAKK,UAGjB,QAAC,KAAD,CACE0D,MAAM,QAAC,KAAD,MACNF,SAAS,SACT1C,UAAWC,EAAOC,IAAI,gBAErBL,OAAE,yB,GA7EqBc,KAArBS,EACZyB,aAAe,CACpBnB,OAAQoB,WACRd,SAAUc,WACV3D,aAAc4D","file":"TeamSettings.js","sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport TeamActions from 'app/actions/teamActions';\nimport {Client} from 'app/api';\nimport {tct} from 'app/locale';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {uniqueId} from 'app/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  public orgId: string;\n  public teamId: string;\n\n  constructor(orgId: string, teamId: string) {\n    super();\n    this.orgId = orgId;\n    this.teamId = teamId;\n  }\n\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport PropTypes from 'prop-types';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\nimport {IconDelete} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {Scope, Team} from 'app/types';\nimport AsyncView from 'app/views/asyncView';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nimport TeamModel from './model';\n\ntype Props = {\n  team: Team;\n} & RouteComponentProps<{orgId: string; teamId: string}, {}>;\n\ntype State = AsyncView['state'];\n\nexport default class TeamSettings extends AsyncView<Props, State> {\n  static contextTypes = {\n    router: PropTypes.object,\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n  };\n\n  model = new TeamModel(this.props.params.orgId, this.props.params.teamId);\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp: any, model: FormModel, id?: string) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      this.props.router.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    this.props.router.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {location, organization} = this.context;\n    const {team} = this.props;\n\n    const access = new Set<Scope>(organization.access);\n\n    return (\n      <React.Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} location={location} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}