{"version":3,"sources":["webpack:///./app/actions/settingsBreadcrumbActions.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/stores/settingsBreadcrumbStore.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/organizationCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/projectCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/teamCrumb.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/index.tsx","webpack:///./app/views/settings/components/settingsLayout.tsx"],"names":["Reflux","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","TeamStore","getInitialState","teams","onTeamUpdate","this","setState","render","props","state","storeConfig","pathMap","init","reset","listenTo","SettingsBreadcrumbActions","onUpdateRouteMap","onTrimMappings","title","getRouteStringFromRoutes","trigger","routePath","fullPath","startsWith","p","theme","subText","space","textColor","StyledIconChevron","IconChevron","StyledDivider","gray200","isHover","isLast","direction","size","BreadcrumbDropdown","isOpen","entering","leaving","open","close","handleStateChange","handleMouseEnterActor","clearTimeout","window","setTimeout","enterDelay","handleMouseEnter","handleMouseLeave","handleClickActor","handleClose","hasMenu","route","name","items","onSelect","blendCorner","onOpen","onClose","menuProps","onMouseEnter","onMouseLeave","virtualizedHeight","getActorProps","actions","onClick","bind","React","findFirstRouteWithoutRouteParam","undefined","filter","find","includes","overflowEllipsis","OrganizationCrumb","organization","organizations","length","CrumbLink","orgId","slug","BadgeWrapper","avatarSize","item","hasProjectParam","projectId","destination","browserHistory","value","org","index","label","withLatestContext","ProjectCrumb","latestOrganization","latestProject","project","projects","ProjectName","disableLink","mini","returnTo","avatarProps","consistentWidth","withProjects","SPINNER_SIZE","TeamCrumb","team","teamId","teamItem","MENUS","Organization","Project","Team","withTeams","SettingsBreadcrumb","prevProps","className","lastRouteIndex","r","lastIndexOf","Breadcrumbs","i","pathTitle","createMenu","Menu","CrumbPicker","key","contextTypes","SentryTypes","defaultProps","SettingsBreadcrumbStore","Link","blue300","SettingsLayout","navVisible","navOffsetTop","unlisten","headerRef","toggleNav","toggleBodyScrollLock","current","getBoundingClientRect","bottom","lock","bodyElement","document","getElementsByTagName","scrollTo","classList","renderNavigation","children","childProps","childRoutes","childRoute","shouldRenderNavigation","SettingsColumn","ref","HeaderContent","NavMenuToggle","priority","t","icon","aria-hidden","StyledSettingsBreadcrumb","MaxWidthContainer","SidebarWrapper","isVisible","offsetTop","NavMask","Content","Button","breakpoints","settings","containerWidth","sidebarWidth","background","border","slideInLeft","zIndex","settingsSidebarNav","dropShadowHeavy","settingsSidebarNavMask","fadeIn"],"mappings":"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","file":"app_views_settings_components_settingsLayout_tsx.js","sourcesContent":["import Reflux from 'reflux';\n\nexport default Reflux.createActions(['mapTitle', 'trimMappings']);\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport {RouteWithName} from 'app/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  routes: RouteWithName[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import {PlainRoute} from 'react-router';\nimport Reflux from 'reflux';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype UpdateData = {\n  routes: PlainRoute<any>[];\n  title: string;\n};\n\ntype SettingsBreadcrumbStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  onUpdateRouteMap: (update: UpdateData) => void;\n  onTrimMappings: (routes: PlainRoute<any>[]) => void;\n};\n\ntype Internals = {\n  pathMap: Record<string, string>;\n};\n\nconst storeConfig: Reflux.StoreDefinition &\n  SettingsBreadcrumbStoreInterface &\n  Internals = {\n  pathMap: {},\n  init() {\n    this.reset();\n    this.listenTo(SettingsBreadcrumbActions.mapTitle, this.onUpdateRouteMap);\n    this.listenTo(SettingsBreadcrumbActions.trimMappings, this.onTrimMappings);\n  },\n\n  reset() {\n    this.pathMap = {};\n  },\n\n  onUpdateRouteMap({routes, title}) {\n    this.pathMap[getRouteStringFromRoutes(routes)] = title;\n    this.trigger(this.pathMap);\n  },\n\n  onTrimMappings(routes) {\n    const routePath = getRouteStringFromRoutes(routes);\n    for (const fullPath in this.pathMap) {\n      if (!routePath.startsWith(fullPath)) {\n        delete this.pathMap[fullPath];\n      }\n    }\n    this.trigger(this.pathMap);\n  },\n};\n\ntype SettingsBreadcrumbStore = Reflux.Store & SettingsBreadcrumbStoreInterface;\n\nconst SettingsBreadcrumbStore = Reflux.createStore(\n  storeConfig\n) as SettingsBreadcrumbStore;\n\nexport default SettingsBreadcrumbStore;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconChevron} from 'app/icons';\n\ntype Props = {\n  isHover?: boolean;\n  isLast?: boolean;\n};\n\nconst Divider = ({isHover, isLast}: Props) =>\n  isLast ? null : (\n    <StyledDivider>\n      <StyledIconChevron direction={isHover ? 'down' : 'right'} size=\"14px\" />\n    </StyledDivider>\n  );\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n`;\n\nexport default Divider;\n","import React from 'react';\n\nimport DropdownAutoCompleteMenu from 'app/components/dropdownAutoComplete/menu';\nimport {Item} from 'app/components/dropdownAutoComplete/types';\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\n\nimport {RouteWithName} from './types';\n\nconst EXIT_DELAY = 0;\n\ntype Props = {\n  route: RouteWithName;\n  hasMenu?: boolean;\n  isLast?: boolean;\n  enterDelay?: number;\n  name: React.ReactNode;\n  items: Item[];\n  onSelect: (item: Item) => void;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass BreadcrumbDropdown extends React.Component<Props, State> {\n  state: State = {\n    isOpen: false,\n  };\n\n  entering: number | null = null;\n  leaving: number | null = null;\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.entering = window.setTimeout(() => this.open(), this.props.enterDelay ?? 0);\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = () => {\n    if (this.entering) {\n      clearTimeout(this.entering);\n    }\n\n    this.leaving = window.setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = () => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = () => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect} = this.props;\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        virtualizedHeight={41}\n      >\n        {({getActorProps, actions, isOpen}) => (\n          <Crumb\n            {...getActorProps({\n              onClick: this.handleClickActor.bind(this, actions),\n              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n              onMouseLeave: this.handleMouseLeave.bind(this, actions),\n            })}\n          >\n            <span>{name || route.name} </span>\n            <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n          </Crumb>\n        )}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import {RouteWithName} from './types';\n\n/**\n * For all routes with a `path`, find the first route without a route param (e.g. :apiKey)\n *\n * @param routes A list of react-router route objects\n * @param route If given, will only take into account routes between `route` and end of the routes list\n * @return Object Returns a react-router route object\n */\nexport default function findFirstRouteWithoutRouteParam(\n  routes: RouteWithName[],\n  route?: RouteWithName\n) {\n  const routeIndex = route !== undefined ? routes.indexOf(route) : -1;\n  const routesToSearch = route && routeIndex > -1 ? routes.slice(routeIndex) : routes;\n\n  return (\n    routesToSearch.filter(({path}) => !!path).find(({path}) => !path?.includes(':')) ||\n    route\n  );\n}\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport IdBadge from 'app/components/idBadge';\nimport {Organization} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{projectId?: string}, {}> & {\n  organizations: Organization[];\n  organization: Organization;\n  routes: RouteWithName[];\n  route: RouteWithName;\n};\n\nconst OrganizationCrumb = ({\n  organization,\n  organizations,\n  params,\n  routes,\n  route,\n  ...props\n}: Props) => {\n  const handleSelect = (item: {value: string}) => {\n    // If we are currently in a project context, and we're attempting to switch organizations,\n    // then we need to default to index route (e.g. `route`)\n    //\n    // Otherwise, find the last route without a router param\n    // e.g. if you are on API details, we want the API listing\n    // This fails if our route tree is not nested\n    const hasProjectParam = !!params.projectId;\n    let destination = hasProjectParam\n      ? route\n      : findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route)));\n\n    // It's possible there is no route without route params (e.g. organization settings index),\n    // in which case, we can use the org settings index route (e.g. `route`)\n    if (!hasProjectParam && typeof destination === 'undefined') {\n      destination = route;\n    }\n\n    if (destination === undefined) {\n      return;\n    }\n\n    browserHistory.push(\n      recreateRoute(destination, {\n        routes,\n        params: {...params, orgId: item.value},\n      })\n    );\n  };\n\n  if (!organization) {\n    return null;\n  }\n\n  const hasMenu = organizations.length > 1;\n\n  return (\n    <BreadcrumbDropdown\n      name={\n        <CrumbLink\n          to={recreateRoute(route, {\n            routes,\n            params: {...params, orgId: organization.slug},\n          })}\n        >\n          <BadgeWrapper>\n            <IdBadge avatarSize={18} organization={organization} />\n          </BadgeWrapper>\n        </CrumbLink>\n      }\n      onSelect={handleSelect}\n      hasMenu={hasMenu}\n      route={route}\n      items={organizations.map((org, index) => ({\n        index,\n        value: org.slug,\n        label: (\n          <MenuItem>\n            <IdBadge organization={org} />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nconst BadgeWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport {OrganizationCrumb};\nexport default withLatestContext(OrganizationCrumb);\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport withProjects from 'app/utils/withProjects';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{projectId?: string}, {}> & {\n  organization: Organization;\n  project: Project;\n  projects: Project[];\n  routes: RouteWithName[];\n  route: RouteWithName;\n};\n\nconst ProjectCrumb = ({\n  organization: latestOrganization,\n  project: latestProject,\n  projects,\n  params,\n  routes,\n  route,\n  ...props\n}: Props) => {\n  const handleSelect = (item: {value: string}) => {\n    // We have to make exceptions for routes like \"Project Alerts Rule Edit\" or \"Client Key Details\"\n    // Since these models are project specific, we need to traverse up a route when switching projects\n    //\n    // we manipulate `routes` so that it doesn't include the current project's route\n    // which, unlike the org version, does not start with a route param\n    const returnTo = findFirstRouteWithoutRouteParam(\n      routes.slice(routes.indexOf(route) + 1),\n      route\n    );\n\n    if (returnTo === undefined) {\n      return;\n    }\n\n    browserHistory.push(\n      recreateRoute(returnTo, {routes, params: {...params, projectId: item.value}})\n    );\n  };\n\n  if (!latestOrganization) {\n    return null;\n  }\n  if (!projects) {\n    return null;\n  }\n\n  const hasMenu = projects && projects.length > 1;\n\n  return (\n    <BreadcrumbDropdown\n      hasMenu={hasMenu}\n      route={route}\n      name={\n        <ProjectName>\n          {!latestProject ? (\n            <LoadingIndicator mini />\n          ) : (\n            <CrumbLink\n              to={replaceRouterParams('/settings/:orgId/projects/:projectId/', {\n                orgId: latestOrganization.slug,\n                projectId: latestProject.slug,\n              })}\n            >\n              <IdBadge project={latestProject} avatarSize={18} disableLink />\n            </CrumbLink>\n          )}\n        </ProjectName>\n      }\n      onSelect={handleSelect}\n      items={projects.map((project, index) => ({\n        index,\n        value: project.slug,\n        label: (\n          <MenuItem>\n            <IdBadge\n              project={project}\n              avatarProps={{consistentWidth: true}}\n              avatarSize={18}\n              disableLink\n            />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nexport {ProjectCrumb};\nexport default withProjects(withLatestContext(ProjectCrumb));\n\n// Set height of crumb because of spinner\nconst SPINNER_SIZE = '24px';\n\nconst ProjectName = styled('div')`\n  display: flex;\n\n  .loading {\n    width: ${SPINNER_SIZE};\n    height: ${SPINNER_SIZE};\n    margin: 0 ${space(0.25)} 0 0;\n  }\n`;\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport IdBadge from 'app/components/idBadge';\nimport {Team} from 'app/types';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withTeams from 'app/utils/withTeams';\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\n\nimport {RouteWithName} from './types';\nimport {CrumbLink} from '.';\n\ntype Props = RouteComponentProps<{teamId: string}, {}> & {\n  teams: Team[];\n  routes: RouteWithName[];\n  route?: RouteWithName;\n};\n\nconst TeamCrumb = ({teams, params, routes, route, ...props}: Props) => {\n  const team = teams.find(({slug}) => slug === params.teamId);\n  const hasMenu = teams.length > 1;\n\n  if (!team) {\n    return null;\n  }\n\n  return (\n    <BreadcrumbDropdown\n      name={\n        <CrumbLink\n          to={recreateRoute(route, {\n            routes,\n            params: {...params, teamId: team.slug},\n          })}\n        >\n          <IdBadge avatarSize={18} team={team} />\n        </CrumbLink>\n      }\n      onSelect={item => {\n        browserHistory.push(\n          recreateRoute('', {\n            routes,\n            params: {...params, teamId: item.value},\n          })\n        );\n      }}\n      hasMenu={hasMenu}\n      route={route}\n      items={teams.map((teamItem, index) => ({\n        index,\n        value: teamItem.slug,\n        label: (\n          <MenuItem>\n            <IdBadge team={teamItem} />\n          </MenuItem>\n        ),\n      }))}\n      {...props}\n    />\n  );\n};\n\nexport {TeamCrumb};\nexport default withTeams(TeamCrumb);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport Link from 'app/components/links/link';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\nimport OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';\nimport ProjectCrumb from 'app/views/settings/components/settingsBreadcrumb/projectCrumb';\nimport TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';\n\nimport {RouteWithName} from './types';\n\nconst MENUS = {\n  Organization: OrganizationCrumb,\n  Project: ProjectCrumb,\n  Team: TeamCrumb,\n} as const;\n\ntype Props = {\n  className?: string;\n  routes: RouteWithName[];\n  pathMap: Record<string, string>;\n  params: {[param: string]: string | undefined};\n  route: any;\n};\n\nclass SettingsBreadcrumb extends React.Component<Props> {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  static defaultProps = {\n    pathMap: {},\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.routes === prevProps.routes) {\n      return;\n    }\n    SettingsBreadcrumbActions.trimMappings(this.props.routes);\n  }\n\n  render() {\n    const {className, routes, params, pathMap} = this.props;\n    const lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);\n\n    return (\n      <Breadcrumbs className={className}>\n        {routes.map((route, i) => {\n          if (!route.name) {\n            return null;\n          }\n          const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];\n          const isLast = i === lastRouteIndex;\n          const createMenu = MENUS[route.name];\n          const Menu = typeof createMenu === 'function' && createMenu;\n          const hasMenu = !!Menu;\n          const CrumbPicker = hasMenu\n            ? Menu\n            : () => (\n                <Crumb>\n                  <CrumbLink to={recreateRoute(route, {routes, params})}>\n                    {pathTitle || route.name}{' '}\n                  </CrumbLink>\n                  <Divider isLast={isLast} />\n                </Crumb>\n              );\n\n          return (\n            <CrumbPicker\n              key={`${route.name}:${route.path}`}\n              routes={routes}\n              params={params}\n              route={route}\n              isLast={isLast}\n            />\n          );\n        })}\n      </Breadcrumbs>\n    );\n  }\n}\n\nexport default createReactClass<Omit<Props, 'pathMap'>>({\n  displayName: 'ConnectedSettingsBreadcrumb',\n  mixins: [Reflux.connect(SettingsBreadcrumbStore, 'pathMap') as any],\n  render() {\n    return <SettingsBreadcrumb {...this.props} {...this.state} />;\n  },\n});\n\nconst CrumbLink = styled(Link)`\n  display: block;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.blue300} 0 2px 0;\n  }\n\n  color: ${p => p.theme.subText};\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport {CrumbLink};\n\nconst Breadcrumbs = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n","import React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconClose, IconMenu} from 'app/icons';\nimport {t} from 'app/locale';\nimport {fadeIn, slideInLeft} from 'app/styles/animations';\nimport space from 'app/styles/space';\n\nimport SettingsBreadcrumb from './settingsBreadcrumb';\nimport SettingsHeader from './settingsHeader';\nimport SettingsSearch from './settingsSearch';\n\ntype Props = {\n  renderNavigation?: () => React.ReactNode;\n  children: React.ReactNode;\n} & RouteComponentProps<{}, {}>;\n\ntype State = {\n  /**\n   * This is used when the screen is small enough that the navigation should\n   * be hidden. On large screens this state will end up unused.\n   */\n  navVisible: boolean;\n  /**\n   * Offset mobile settings navigation by the height of main navigation,\n   * settings breadcrumbs and optional warnings.\n   */\n  navOffsetTop: number;\n};\n\nclass SettingsLayout extends React.Component<Props, State> {\n  state: State = {\n    navVisible: false,\n    navOffsetTop: 0,\n  };\n\n  componentDidMount() {\n    // Close the navigation when navigating.\n    this.unlisten = browserHistory.listen(() => this.toggleNav(false));\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  unlisten!: () => void;\n  headerRef = React.createRef<HTMLDivElement>();\n\n  toggleNav(navVisible: boolean) {\n    // when the navigation is opened, body should be scroll-locked\n    this.toggleBodyScrollLock(navVisible);\n\n    this.setState({\n      navOffsetTop: this.headerRef.current?.getBoundingClientRect().bottom ?? 0,\n      navVisible,\n    });\n  }\n\n  toggleBodyScrollLock(lock: boolean) {\n    const bodyElement = document.getElementsByTagName('body')[0];\n\n    if (window.scrollTo) {\n      window.scrollTo(0, 0);\n    }\n    bodyElement.classList[lock ? 'add' : 'remove']('scroll-lock');\n  }\n\n  render() {\n    const {params, routes, route, renderNavigation, children} = this.props;\n    const {navVisible, navOffsetTop} = this.state;\n\n    // We want child's view's props\n    const childProps =\n      children && React.isValidElement(children) ? children.props : this.props;\n    const childRoutes = childProps.routes || routes || [];\n    const childRoute = childProps.route || route || {};\n    const shouldRenderNavigation = typeof renderNavigation === 'function';\n\n    return (\n      <SettingsColumn>\n        <SettingsHeader ref={this.headerRef}>\n          <HeaderContent>\n            {shouldRenderNavigation && (\n              <NavMenuToggle\n                priority=\"link\"\n                label={t('Open the menu')}\n                icon={navVisible ? <IconClose aria-hidden /> : <IconMenu aria-hidden />}\n                onClick={() => this.toggleNav(!navVisible)}\n              />\n            )}\n            <StyledSettingsBreadcrumb\n              params={params}\n              routes={childRoutes}\n              route={childRoute}\n            />\n            <SettingsSearch />\n          </HeaderContent>\n        </SettingsHeader>\n\n        <MaxWidthContainer>\n          {shouldRenderNavigation && (\n            <SidebarWrapper isVisible={navVisible} offsetTop={navOffsetTop}>\n              {renderNavigation!()}\n            </SidebarWrapper>\n          )}\n          <NavMask isVisible={navVisible} onClick={() => this.toggleNav(false)} />\n          <Content>{children}</Content>\n        </MaxWidthContainer>\n      </SettingsColumn>\n    );\n  }\n}\n\nconst SettingsColumn = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */\n  min-width: 0; /* fixes problem when child content stretches beyond layout width */\n  footer {\n    margin-top: 0;\n  }\n`;\n\nconst HeaderContent = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst NavMenuToggle = styled(Button)`\n  display: none;\n  margin: -${space(1)} ${space(1)} -${space(1)} -${space(1)};\n  padding: ${space(1)};\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n  }\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst StyledSettingsBreadcrumb = styled(SettingsBreadcrumb)`\n  flex: 1;\n`;\n\nconst MaxWidthContainer = styled('div')`\n  display: flex;\n  max-width: ${p => p.theme.settings.containerWidth};\n  flex: 1;\n`;\n\nconst SidebarWrapper = styled('div')<{isVisible: boolean; offsetTop: number}>`\n  flex-shrink: 0;\n  width: ${p => p.theme.settings.sidebarWidth};\n  background: ${p => p.theme.background};\n  border-right: 1px solid ${p => p.theme.border};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    position: fixed;\n    top: ${p => p.offsetTop}px;\n    bottom: 0;\n    overflow-y: auto;\n    animation: ${slideInLeft} 100ms ease-in-out;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNav};\n    box-shadow: ${p => p.theme.dropShadowHeavy};\n  }\n`;\n\nconst NavMask = styled('div')<{isVisible: boolean}>`\n  display: none;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    background: rgba(0, 0, 0, 0.35);\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNavMask};\n    animation: ${fadeIn} 250ms ease-in-out;\n  }\n`;\n\n/**\n * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.\n * Will also cut off tooltips.\n */\nconst Content = styled('div')`\n  flex: 1;\n  padding: ${space(4)};\n  min-width: 0; /* keep children from stretching container */\n`;\n\nexport default SettingsLayout;\n"],"sourceRoot":""}