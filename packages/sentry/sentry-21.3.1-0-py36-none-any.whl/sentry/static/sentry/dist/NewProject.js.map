{"version":3,"sources":["webpack:///./app/components/platformPicker.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx","webpack:///./app/views/projectInstall/createProject.tsx","webpack:///./app/views/projectInstall/newProject.tsx"],"names":["PLATFORM_CATEGORIES","categoryList","id","name","t","PlatformPicker","keydown","state","category","props","defaultCategory","filter","noAutoFilter","platform","split","logSearch","debounce","analytics","query","toLowerCase","num_results","platformList","length","searchInput","React","this","currentCategory","filtered","platforms","includes","sort","a","b","localeCompare","showOther","e","target","current","focus","preventDefault","setPlatform","listProps","listClassName","NavContainer","CategoryNav","map","key","onClick","setState","to","isActive","SearchBar","size","type","ref","value","placeholder","onChange","PlatformList","className","PlatformCard","data-test-id","selected","onClear","stopPropagation","icon","title","tct","search","href","defaultProps","space","p","theme","border","inputStyles","subText","NavTabs","StyledPlatformIcon","PlatformIcon","ClearButton","Button","background","textColor","isCircled","borderless","radius","withLanguageIcon","format","fontSizeExtraSmall","slugify","str","replace","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","TeamStore","getInitialState","teams","onTeamUpdate","render","MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","threshold","condition","RangeError","IssueAlertOptions","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","toString","metric","valueDescriptionPair","some","object","hasProperlyLoadedConditions","options","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","setStateAndUpdateParents","InlineInput","min","InlineSelectControl","choices","getAvailableMetricChoices","choiceValue","node","RadioItemWrapper","defaultRules","shouldCreateCustomRule","parseInt","undefined","actions","actionMatch","frequency","callback","getUpdatedData","organization","slug","Object","values","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","issueAlertOptionsChoices","getIssueAlertsChoices","PageHeadingWithTopMargins","withMargins","RadioGroupWithPadding","label","AsyncComponent","withOrganization","Input","SelectControl","RadioGroup","PageHeading","CreateProject","args","createProject","api","projectName","team","dataFragment","inFlight","requestPromise","method","data","default_rules","projectData","ruleData","ruleId","trackIssueAlertOptionSelectedEvent","ProjectActions","platformKey","nextUrl","browserHistory","error","responseJSON","detail","status","platformId","getPlatformName","context","location","accessTeams","hasAccess","filterTeam","createProjectForm","CreateProjectForm","onSubmit","FormLabel","ProjectNameInput","autoComplete","TeamSelectInput","clearable","choice","openCreateTeamModal","onClose","priority","disabled","canSubmitForm","every","isDefaultRules","eventKey","eventName","organization_id","project_id","rule_type","custom_rule_id","trackAnalyticsEvent","HelpText","updatedData","renderProjectForm","contextTypes","PropTypes","withApi","withTeams","withTheme","fontSizeExtraLarge","NewProject","Container","Content"],"mappings":"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","file":"NewProject.js","sourcesContent":["import React from 'react';\nimport keydown from 'react-keydown';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport {PlatformIcon} from 'platformicons';\n\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport categoryList, {PlatformKey} from 'app/data/platformCategories';\nimport platforms from 'app/data/platforms';\nimport {IconClose, IconProject, IconSearch} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {PlatformIntegration} from 'app/types';\nimport {analytics} from 'app/utils/analytics';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\n\nconst PLATFORM_CATEGORIES = [...categoryList, {id: 'all', name: t('All')}] as const;\n\ntype Category = typeof PLATFORM_CATEGORIES[number]['id'];\n\ntype Props = {\n  setPlatform: (key: PlatformKey | null) => void;\n  platform?: string | null;\n  showOther?: boolean;\n  listClassName?: string;\n  listProps?: React.HTMLProps<HTMLDivElement>;\n  noAutoFilter?: boolean;\n  defaultCategory?: Category;\n};\n\ntype State = {\n  category: Category;\n  filter: string;\n};\n\nclass PlatformPicker extends React.Component<Props, State> {\n  static defaultProps = {\n    showOther: true,\n  };\n\n  state: State = {\n    category: this.props.defaultCategory ?? PLATFORM_CATEGORIES[0].id,\n    filter: this.props.noAutoFilter ? '' : (this.props.platform || '').split('-')[0],\n  };\n\n  get platformList() {\n    const {category} = this.state;\n    const currentCategory = categoryList.find(({id}) => id === category);\n\n    const filter = this.state.filter.toLowerCase();\n\n    const subsetMatch = (platform: PlatformIntegration) =>\n      platform.id.includes(filter) || platform.name.toLowerCase().includes(filter);\n\n    const categoryMatch = (platform: PlatformIntegration) =>\n      category === 'all' ||\n      (currentCategory?.platforms as undefined | string[])?.includes(platform.id);\n\n    const filtered = platforms\n      .filter(this.state.filter ? subsetMatch : categoryMatch)\n      .sort((a, b) => a.id.localeCompare(b.id));\n\n    return this.props.showOther ? filtered : filtered.filter(({id}) => id !== 'other');\n  }\n\n  logSearch = debounce(() => {\n    if (this.state.filter) {\n      analytics('platformpicker.search', {\n        query: this.state.filter.toLowerCase(),\n        num_results: this.platformList.length,\n      });\n    }\n  }, 300);\n\n  @keydown('/')\n  focusSearch(e: KeyboardEvent) {\n    if (e.target !== this.searchInput.current) {\n      this.searchInput?.current?.focus();\n      e.preventDefault();\n    }\n  }\n\n  searchInput = React.createRef<HTMLInputElement>();\n\n  render() {\n    const platformList = this.platformList;\n    const {setPlatform, listProps, listClassName} = this.props;\n    const {filter, category} = this.state;\n\n    return (\n      <React.Fragment>\n        <NavContainer>\n          <CategoryNav>\n            {PLATFORM_CATEGORIES.map(({id, name}) => (\n              <ListLink\n                key={id}\n                onClick={(e: React.MouseEvent) => {\n                  analytics('platformpicker.select_tab', {category: id});\n                  this.setState({category: id, filter: ''});\n                  e.preventDefault();\n                }}\n                to=\"\"\n                isActive={() => id === (filter ? 'all' : category)}\n              >\n                {name}\n              </ListLink>\n            ))}\n          </CategoryNav>\n          <SearchBar>\n            <IconSearch size=\"xs\" />\n            <input\n              type=\"text\"\n              ref={this.searchInput}\n              value={filter}\n              placeholder={t('Filter Platforms')}\n              onChange={e => this.setState({filter: e.target.value}, this.logSearch)}\n            />\n          </SearchBar>\n        </NavContainer>\n        <PlatformList className={listClassName} {...listProps}>\n          {platformList.map(platform => (\n            <PlatformCard\n              data-test-id={`platform-${platform.id}`}\n              key={platform.id}\n              platform={platform}\n              selected={this.props.platform === platform.id}\n              onClear={(e: React.MouseEvent) => {\n                setPlatform(null);\n                e.stopPropagation();\n              }}\n              onClick={() => {\n                analytics('platformpicker.select_platform', {platform: platform.id});\n                setPlatform(platform.id as PlatformKey);\n              }}\n            />\n          ))}\n        </PlatformList>\n        {platformList.length === 0 && (\n          <EmptyMessage\n            icon={<IconProject size=\"xl\" />}\n            title={t(\"We don't have an SDK for that yet!\")}\n          >\n            {tct(\n              `Not finding your platform? You can still create your project,\n              but looks like we don't have an official SDK for your platform\n              yet. However, there's a rich ecosystem of community supported\n              SDKs (including Perl, CFML, Clojure, and ActionScript). Try\n              [search:searching for Sentry clients] or contacting support.`,\n              {\n                search: (\n                  <ExternalLink href=\"https://github.com/search?q=-org%3Agetsentry+topic%3Asentry&type=Repositories\" />\n                ),\n              }\n            )}\n          </EmptyMessage>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst NavContainer = styled('div')`\n  margin-bottom: ${space(2)};\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: 1fr minmax(0, 300px);\n  align-items: start;\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst SearchBar = styled('div')`\n  ${p => inputStyles(p)};\n  padding: 0 8px;\n  color: ${p => p.theme.subText};\n  display: flex;\n  align-items: center;\n  font-size: 15px;\n  margin-top: -${space(0.75)};\n\n  input {\n    border: none;\n    background: none;\n    padding: 2px 4px;\n    width: 100%;\n    /* Ensure a consistent line height to keep the input the desired height */\n    line-height: 24px;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst CategoryNav = styled(NavTabs)`\n  margin: 0;\n  margin-top: 4px;\n  white-space: nowrap;\n\n  > li {\n    float: none;\n    display: inline-block;\n  }\n`;\n\nconst PlatformList = styled('div')`\n  display: grid;\n  grid-gap: ${space(1)};\n  grid-template-columns: repeat(auto-fill, 112px);\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin: ${space(2)};\n`;\n\nconst ClearButton = styled(Button)`\n  position: absolute;\n  top: -6px;\n  right: -6px;\n  height: 22px;\n  width: 22px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background: ${p => p.theme.background};\n  color: ${p => p.theme.textColor};\n`;\n\nClearButton.defaultProps = {\n  icon: <IconClose isCircled size=\"xs\" />,\n  borderless: true,\n  size: 'xsmall',\n};\n\nconst PlatformCard = styled(({platform, selected, onClear, ...props}) => (\n  <div {...props}>\n    <StyledPlatformIcon\n      platform={platform.id}\n      size={56}\n      radius={5}\n      withLanguageIcon\n      format=\"lg\"\n    />\n\n    <h3>{platform.name}</h3>\n    {selected && <ClearButton onClick={onClear} />}\n  </div>\n))`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0 0 14px;\n  border-radius: 4px;\n  cursor: pointer;\n  background: ${p => p.selected && '#ecf5fd'};\n\n  &:hover {\n    background: #ebebef;\n  }\n\n  h3 {\n    flex-grow: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    color: ${p => p.theme.subText};\n    text-align: center;\n    font-size: ${p => p.theme.fontSizeExtraSmall};\n    text-transform: uppercase;\n    margin: 0;\n    padding: 0 ${space(0.5)};\n    line-height: 1.2;\n  }\n`;\n\nexport default PlatformPicker;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TeamStore from 'app/stores/teamStore';\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import React, {ReactElement} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  onChange: StateUpdater;\n};\n\ntype State = AsyncComponent['state'] & {\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  intervalChoices: [string, string][] | undefined;\n  threshold: string;\n  interval: string;\n  alertSetting: string;\n  metric: MetricValues;\n};\n\ntype RequestDataFragment = {\n  defaultRules: boolean;\n  shouldCreateCustomRule: boolean;\n  name: string;\n  conditions: {interval: string; id: string; value: string}[] | undefined;\n  actions: {id: string}[];\n  actionMatch: string;\n  frequency: number;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {interval: string; id: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n    };\n  }\n\n  getAvailableMetricChoices() {\n    return [\n      [MetricValues.ERRORS, t('occurrences of')],\n      [MetricValues.USERS, t('users affected by')],\n    ].filter(valueDescriptionPair => {\n      const [value] = valueDescriptionPair;\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propegation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            choices={this.getAvailableMetricChoices()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            choices={this.state.intervalChoices}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    return (\n      <React.Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <RadioGroupWithPadding\n          choices={issueAlertOptionsChoices}\n          label={t('Options for creating an alert')}\n          onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n          value={this.state.alertSetting}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  padding: ${space(3)} 0;\n  margin-bottom: 50px;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n","import React from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {withTheme} from 'emotion-theming';\nimport {PlatformIcon} from 'platformicons';\nimport PropTypes from 'prop-types';\n\nimport {openCreateTeamModal} from 'app/actionCreators/modal';\nimport ProjectActions from 'app/actions/projectActions';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport PageHeading from 'app/components/pageHeading';\nimport PlatformPicker from 'app/components/platformPicker';\nimport Tooltip from 'app/components/tooltip';\nimport categoryList from 'app/data/platformCategories';\nimport {IconAdd} from 'app/icons';\nimport {t} from 'app/locale';\nimport {inputStyles} from 'app/styles/input';\nimport space from 'app/styles/space';\nimport {Organization, Project, Team} from 'app/types';\nimport {trackAnalyticsEvent} from 'app/utils/analytics';\nimport getPlatformName from 'app/utils/getPlatformName';\nimport slugify from 'app/utils/slugify';\nimport {Theme} from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport withTeams from 'app/utils/withTeams';\nimport IssueAlertOptions from 'app/views/projectInstall/issueAlertOptions';\n\nconst getCategoryName = (category?: string) =>\n  categoryList.find(({id}) => id === category)?.id;\n\ntype RuleEventData = {\n  eventKey: string;\n  eventName: string;\n  organization_id: string;\n  project_id: string;\n  rule_type: string;\n  custom_rule_id?: string;\n};\n\ntype Props = {\n  theme: Theme;\n  api: any;\n  organization: Organization;\n  teams: Team[];\n};\n\ntype PlatformName = React.ComponentProps<typeof PlatformIcon>['platform'];\ntype IssueAlertFragment = Parameters<\n  React.ComponentProps<typeof IssueAlertOptions>['onChange']\n>[0];\n\ntype State = {\n  error: boolean;\n  projectName: string;\n  team: string;\n  platform: PlatformName | null;\n  inFlight: boolean;\n  dataFragment: IssueAlertFragment | undefined;\n};\n\nclass CreateProject extends React.Component<Props, State> {\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n\n    const {query} = this.context.location;\n    const {teams} = props.organization;\n    const accessTeams = teams.filter((team: Team) => team.hasAccess);\n\n    const team = query.team || (accessTeams.length && accessTeams[0].slug);\n    const platform = getPlatformName(query.platform) ? query.platform : '';\n\n    this.state = {\n      error: false,\n      projectName: getPlatformName(platform) || '',\n      team,\n      platform,\n      inFlight: false,\n      dataFragment: undefined,\n    };\n  }\n\n  get defaultCategory() {\n    const {query} = this.context.location;\n    return getCategoryName(query.category);\n  }\n\n  renderProjectForm() {\n    const {theme, organization} = this.props;\n    const {projectName, platform, team} = this.state;\n\n    const teams = this.props.teams.filter(filterTeam => filterTeam.hasAccess);\n\n    const createProjectForm = (\n      <CreateProjectForm onSubmit={this.createProject}>\n        <div>\n          <FormLabel>{t('Project name')}</FormLabel>\n          <ProjectNameInput theme={theme}>\n            <StyledPlatformIcon platform={platform ?? ''} />\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder={t('Project name')}\n              autoComplete=\"off\"\n              value={projectName}\n              onChange={e => this.setState({projectName: slugify(e.target.value)})}\n            />\n          </ProjectNameInput>\n        </div>\n        <div>\n          <FormLabel>{t('Team')}</FormLabel>\n          <TeamSelectInput>\n            <SelectControl\n              name=\"select-team\"\n              clearable={false}\n              value={team}\n              placeholder={t('Select a Team')}\n              onChange={choice => this.setState({team: choice.value})}\n              options={teams.map(({slug}) => ({\n                label: `#${slug}`,\n                value: slug,\n              }))}\n            />\n            <Tooltip title={t('Create a team')}>\n              <Button\n                borderless\n                data-test-id=\"create-team\"\n                type=\"button\"\n                icon={<IconAdd isCircled />}\n                onClick={() =>\n                  openCreateTeamModal({\n                    organization,\n                    onClose: ({slug}) => this.setState({team: slug}),\n                  })\n                }\n              />\n            </Tooltip>\n          </TeamSelectInput>\n        </div>\n        <div>\n          <Button\n            data-test-id=\"create-project\"\n            priority=\"primary\"\n            disabled={!this.canSubmitForm}\n          >\n            {t('Create Project')}\n          </Button>\n        </div>\n      </CreateProjectForm>\n    );\n\n    return (\n      <React.Fragment>\n        <PageHeading withMargins>{t('Give your project a name')}</PageHeading>\n        {createProjectForm}\n      </React.Fragment>\n    );\n  }\n\n  get canSubmitForm() {\n    const {projectName, team, inFlight} = this.state;\n    const {shouldCreateCustomRule, conditions} = this.state.dataFragment || {};\n\n    return (\n      !inFlight &&\n      team &&\n      projectName !== '' &&\n      (!shouldCreateCustomRule || conditions?.every?.(condition => condition.value))\n    );\n  }\n\n  createProject = async e => {\n    e.preventDefault();\n    const {organization, api} = this.props;\n    const {projectName, platform, team, dataFragment} = this.state;\n    const {slug} = organization;\n    const {\n      shouldCreateCustomRule,\n      name,\n      conditions,\n      actions,\n      actionMatch,\n      frequency,\n      defaultRules,\n    } = dataFragment || {};\n\n    this.setState({inFlight: true});\n\n    if (!projectName) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureMessage('No project name');\n      });\n    }\n\n    try {\n      const projectData = await api.requestPromise(`/teams/${slug}/${team}/projects/`, {\n        method: 'POST',\n        data: {\n          name: projectName,\n          platform,\n          default_rules: defaultRules ?? true,\n        },\n      });\n\n      let ruleId: string | undefined;\n      if (shouldCreateCustomRule) {\n        const ruleData = await api.requestPromise(\n          `/projects/${organization.slug}/${projectData.slug}/rules/`,\n          {\n            method: 'POST',\n            data: {\n              name,\n              conditions,\n              actions,\n              actionMatch,\n              frequency,\n            },\n          }\n        );\n        ruleId = ruleData.id;\n      }\n      this.trackIssueAlertOptionSelectedEvent(\n        projectData,\n        defaultRules,\n        shouldCreateCustomRule,\n        ruleId\n      );\n\n      ProjectActions.createSuccess(projectData);\n      const platformKey = platform || 'other';\n      const nextUrl = `/${organization.slug}/${projectData.slug}/getting-started/${platformKey}/`;\n      browserHistory.push(nextUrl);\n    } catch (err) {\n      this.setState({\n        inFlight: false,\n        error: err.responseJSON.detail,\n      });\n\n      // Only log this if the error is something other than:\n      // * The user not having access to create a project, or,\n      // * A project with that slug already exists\n      if (err.status !== 403 && err.status !== 409) {\n        Sentry.withScope(scope => {\n          scope.setExtra('err', err);\n          scope.setExtra('props', this.props);\n          scope.setExtra('state', this.state);\n          Sentry.captureMessage('Project creation failed');\n        });\n      }\n    }\n  };\n\n  trackIssueAlertOptionSelectedEvent(\n    projectData: Project,\n    isDefaultRules: boolean | undefined,\n    shouldCreateCustomRule: boolean | undefined,\n    ruleId: string | undefined\n  ) {\n    const {organization} = this.props;\n\n    let data: RuleEventData = {\n      eventKey: 'new_project.alert_rule_selected',\n      eventName: 'New Project Alert Rule Selected',\n      organization_id: organization.id,\n      project_id: projectData.id,\n      rule_type: isDefaultRules\n        ? 'Default'\n        : shouldCreateCustomRule\n        ? 'Custom'\n        : 'No Rule',\n    };\n\n    if (ruleId !== undefined) {\n      data = {...data, custom_rule_id: ruleId};\n    }\n\n    trackAnalyticsEvent(data);\n  }\n\n  setPlatform = (platformId: PlatformName | null) =>\n    this.setState(({projectName, platform}: State) => ({\n      platform: platformId,\n      projectName:\n        !projectName || (platform && getPlatformName(platform) === projectName)\n          ? getPlatformName(platformId) || ''\n          : projectName,\n    }));\n\n  render() {\n    const {platform, error} = this.state;\n\n    return (\n      <React.Fragment>\n        {error && <Alert type=\"error\">{error}</Alert>}\n\n        <div data-test-id=\"onboarding-info\">\n          <PageHeading withMargins>{t('Create a new Project')}</PageHeading>\n          <HelpText>\n            {t(\n              `Projects allow you to scope error and transaction events to a specific\n               application in your organization. For example, you might have separate\n               projects for your API server and frontend client.`\n            )}\n          </HelpText>\n          <PageHeading withMargins>{t('Choose a platform')}</PageHeading>\n          <PlatformPicker\n            platform={platform}\n            defaultCategory={this.defaultCategory}\n            setPlatform={this.setPlatform}\n            showOther\n          />\n          <IssueAlertOptions\n            onChange={updatedData => {\n              this.setState({dataFragment: updatedData});\n            }}\n          />\n          {this.renderProjectForm()}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withOrganization(withTeams(withTheme(CreateProject))));\nexport {CreateProject};\n\nconst CreateProjectForm = styled('form')`\n  display: grid;\n  grid-template-columns: 300px 250px max-content;\n  grid-gap: ${space(2)};\n  align-items: end;\n  padding: ${space(3)} 0;\n  box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.1);\n  background: ${p => p.theme.background};\n`;\n\nconst FormLabel = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPlatformIcon = styled(PlatformIcon)`\n  margin-right: ${space(1)};\n`;\n\nconst ProjectNameInput = styled('div')`\n  ${inputStyles};\n  padding: 5px 10px;\n  display: flex;\n  align-items: center;\n\n  input {\n    border: 0;\n    outline: 0;\n    flex: 1;\n  }\n`;\n\nconst TeamSelectInput = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  align-items: center;\n`;\n\nconst HelpText = styled('p')`\n  color: ${p => p.theme.subText};\n  max-width: 760px;\n`;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport CreateProject from 'app/views/projectInstall/createProject';\n\nconst NewProject = () => (\n  <Container>\n    <div className=\"container\">\n      <Content>\n        <DocumentTitle title=\"Sentry\" />\n        <CreateProject />\n      </Content>\n    </div>\n  </Container>\n);\n\nconst Container = styled('div')`\n  flex: 1;\n  background: ${p => p.theme.background};\n  margin-bottom: -${space(3)}; /* cleans up a bg gap at bottom */\n`;\n\nconst Content = styled('div')`\n  margin-top: ${space(3)};\n`;\n\nexport default NewProject;\n"],"sourceRoot":""}