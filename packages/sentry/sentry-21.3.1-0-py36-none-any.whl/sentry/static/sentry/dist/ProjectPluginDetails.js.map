{"version":3,"sources":["webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/projectPlugins/details.tsx"],"names":["defaultState","loading","plugins","error","pageLinks","PluginStoreConfig","state","updating","Map","reset","this","getInitialState","getState","Array","from","values","init","listenTo","PluginActions","onFetchAll","onFetchAllSuccess","onFetchAllError","onUpdate","onUpdateSuccess","onUpdateError","triggerState","trigger","resetLoading","data","map","plugin","id","err","updateObj","get","newPlugin","set","_updateObj","origPlugin","Reflux","WrappedComponent","withOrganization","withProject","createReactClass","displayName","getDisplayName","mixins","PluginsStore","componentDidMount","fetchPlugins","componentDidUpdate","prevProps","_prevState","prevContext","props","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","projectId","orgId","render","store","AsyncView","title","getTitle","renderComponent","AsyncComponent","ProjectPluginDetails","handleReset","params","pluginId","addLoadingMessage","t","trackIntegrationEvent","integration","integration_type","view","api","request","method","success","pluginDetails","setState","addSuccessMessage","addErrorMessage","handleEnable","enablePlugin","analyticsChangeEnableStatus","handleDisable","disablePlugin","enabled","eventKey","recordDetailsViewed","name","value","split","find","getEnabled","enable","StyledButton","size","onClick","disable","priority","toggleEnable","className","canDisable","action","renderActions","onDisablePlugin","author","url","href","trimSchema","version","description","resourceLinks","key","withPlugins","Button","space"],"mappings":"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","file":"ProjectPluginDetails.js","sourcesContent":["import Reflux from 'reflux';\n\nimport PluginActions from 'app/actions/pluginActions';\nimport {Plugin} from 'app/types';\n\ntype PluginStoreInterface = {\n  state: {\n    loading: boolean;\n    plugins: Plugin[];\n    error: Error | null;\n    pageLinks: string | null;\n  };\n  plugins: Map<string, Plugin> | null;\n  updating: Map<string, Plugin>;\n};\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst PluginStoreConfig: Reflux.StoreDefinition & PluginStoreInterface = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    //reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    this.reset();\n    this.listenTo(PluginActions.fetchAll, this.onFetchAll);\n    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);\n    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);\n    this.listenTo(PluginActions.update, this.onUpdate);\n    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);\n    this.listenTo(PluginActions.updateError, this.onUpdateError);\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading}: {resetLoading?: boolean} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data: Plugin[], {pageLinks}: {pageLinks?: string}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\ntype PluginStore = Reflux.Store & PluginStoreInterface;\n\nconst PluginStore = Reflux.createStore(PluginStoreConfig);\n\nexport default PluginStore as PluginStore;\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport {fetchPlugins} from 'app/actionCreators/plugins';\nimport PluginsStore from 'app/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {defined} from 'app/utils';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype InjectedPluginProps = {\n  plugins: {plugins: Plugin[]; loading: boolean};\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nconst withPlugins = <P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  withOrganization(\n    withProject(\n      createReactClass<Omit<P, keyof InjectedPluginProps> & WithPluginProps, {}>({\n        displayName: `withPlugins(${getDisplayName(WrappedComponent)})`,\n        mixins: [Reflux.connect(PluginsStore, 'store') as any],\n\n        componentDidMount() {\n          this.fetchPlugins();\n        },\n\n        componentDidUpdate(prevProps, _prevState, prevContext) {\n          const {organization, project} = this.props;\n\n          // Only fetch plugins when a org slug or project slug has changed\n          const prevOrg =\n            prevProps.organization || (prevContext && prevContext.organization);\n          const prevProject = prevProps.project || (prevContext && prevContext.project);\n\n          // If previous org/project is undefined then it means:\n          // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n          // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n          //\n          // This is for the unusual case where component is mounted and receives a new org/project prop\n          // e.g. when switching projects via breadcrumbs in settings.\n          if (!defined(prevProject) || !defined(prevOrg)) {\n            return;\n          }\n\n          const isOrgSame = prevOrg.slug === organization.slug;\n          const isProjectSame = prevProject.slug === project?.slug;\n\n          // Don't do anything if org and project are the same\n          if (isOrgSame && isProjectSame) {\n            return;\n          }\n\n          this.fetchPlugins();\n        },\n\n        fetchPlugins() {\n          const {organization, project} = this.props;\n\n          if (!project || !organization) {\n            return;\n          }\n\n          fetchPlugins({projectId: project.slug, orgId: organization.slug});\n        },\n\n        render() {\n          return (\n            <WrappedComponent\n              {...(this.props as P & WithPluginProps)}\n              plugins={this.state.store}\n            />\n          );\n        },\n      })\n    )\n  );\n\nexport default withPlugins;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport {WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {disablePlugin, enablePlugin} from 'app/actionCreators/plugins';\nimport Button from 'app/components/button';\nimport ExternalLink from 'app/components/links/externalLink';\nimport PluginConfig from 'app/components/pluginConfig';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization, Plugin, Project} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\nimport withPlugins from 'app/utils/withPlugins';\nimport AsyncView from 'app/views/asyncView';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  plugins: {\n    plugins: Plugin[];\n  };\n} & WithRouterProps<{orgId: string; projectId: string; pluginId: string}>;\n\ntype State = {\n  pluginDetails?: Plugin;\n} & AsyncView['state'];\n\n/**\n * There are currently two sources of truths for plugin details:\n *\n * 1) PluginsStore has a list of plugins, and this is where ENABLED state lives\n * 2) We fetch \"plugin details\" via API and save it to local state as `pluginDetails`.\n *    This is because \"details\" call contains form `config` and the \"list\" endpoint does not.\n *    The more correct way would be to pass `config` to PluginConfig and use plugin from\n *    PluginsStore\n */\nclass ProjectPluginDetails extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevContext: any) {\n    super.componentDidUpdate(prevProps, prevContext);\n    if (prevProps.params.pluginId !== this.props.params.pluginId) {\n      this.recordDetailsViewed();\n    }\n  }\n  componentDidMount() {\n    this.recordDetailsViewed();\n  }\n\n  recordDetailsViewed() {\n    const {pluginId} = this.props.params;\n\n    trackIntegrationEvent(\n      'integrations.details_viewed',\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n  }\n\n  getTitle() {\n    const {plugin} = this.state;\n    if (plugin && plugin.name) {\n      return plugin.name;\n    } else {\n      return 'Sentry';\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {projectId, orgId, pluginId} = this.props.params;\n    return [['pluginDetails', `/projects/${orgId}/${projectId}/plugins/${pluginId}/`]];\n  }\n\n  trimSchema(value) {\n    return value.split('//')[1];\n  }\n\n  handleReset = () => {\n    const {projectId, orgId, pluginId} = this.props.params;\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n    trackIntegrationEvent(\n      'integrations.uninstall_clicked',\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n\n    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {\n      method: 'POST',\n      data: {reset: true},\n      success: pluginDetails => {\n        this.setState({pluginDetails});\n        addSuccessMessage(t('Plugin was reset'));\n        trackIntegrationEvent(\n          'integrations.uninstall_completed',\n          {\n            integration: pluginId,\n            integration_type: 'plugin',\n            view: 'plugin_details',\n          },\n          this.props.organization\n        );\n      },\n      error: () => {\n        addErrorMessage(t('An error occurred'));\n      },\n    });\n  };\n\n  handleEnable = () => {\n    enablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(true);\n  };\n\n  handleDisable = () => {\n    disablePlugin(this.props.params);\n    this.analyticsChangeEnableStatus(false);\n  };\n\n  analyticsChangeEnableStatus = (enabled: boolean) => {\n    const {pluginId} = this.props.params;\n    const eventKey = enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationEvent(\n      eventKey,\n      {\n        integration: pluginId,\n        integration_type: 'plugin',\n        view: 'plugin_details',\n      },\n      this.props.organization\n    );\n  };\n\n  // Enabled state is handled via PluginsStore and not via plugins detail\n  getEnabled() {\n    const {pluginDetails} = this.state;\n    const {plugins} = this.props;\n\n    const plugin =\n      plugins &&\n      plugins.plugins &&\n      plugins.plugins.find(({slug}) => slug === this.props.params.pluginId);\n\n    return plugin ? plugin.enabled : pluginDetails && pluginDetails.enabled;\n  }\n\n  renderActions() {\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n    const enabled = this.getEnabled();\n\n    const enable = (\n      <StyledButton size=\"small\" onClick={this.handleEnable}>\n        {t('Enable Plugin')}\n      </StyledButton>\n    );\n\n    const disable = (\n      <StyledButton size=\"small\" priority=\"danger\" onClick={this.handleDisable}>\n        {t('Disable Plugin')}\n      </StyledButton>\n    );\n\n    const toggleEnable = enabled ? disable : enable;\n\n    return (\n      <div className=\"pull-right\">\n        {pluginDetails.canDisable && toggleEnable}\n        <Button size=\"small\" onClick={this.handleReset}>\n          {t('Reset Configuration')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {organization, project} = this.props;\n    const {pluginDetails} = this.state;\n    if (!pluginDetails) {\n      return null;\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={pluginDetails.name} action={this.renderActions()} />\n        <div className=\"row\">\n          <div className=\"col-md-7\">\n            <PluginConfig\n              organization={organization}\n              project={project}\n              data={pluginDetails}\n              enabled={this.getEnabled()}\n              onDisablePlugin={this.handleDisable}\n            />\n          </div>\n          <div className=\"col-md-4 col-md-offset-1\">\n            <div className=\"pluginDetails-meta\">\n              <h4>{t('Plugin Information')}</h4>\n\n              <dl className=\"flat\">\n                <dt>{t('Name')}</dt>\n                <dd>{pluginDetails.name}</dd>\n                <dt>{t('Author')}</dt>\n                <dd>{pluginDetails.author?.name}</dd>\n                {pluginDetails.author?.url && (\n                  <div>\n                    <dt>{t('URL')}</dt>\n                    <dd>\n                      <ExternalLink href={pluginDetails.author.url}>\n                        {this.trimSchema(pluginDetails.author.url)}\n                      </ExternalLink>\n                    </dd>\n                  </div>\n                )}\n                <dt>{t('Version')}</dt>\n                <dd>{pluginDetails.version}</dd>\n              </dl>\n\n              {pluginDetails.description && (\n                <div>\n                  <h4>{t('Description')}</h4>\n                  <p className=\"description\">{pluginDetails.description}</p>\n                </div>\n              )}\n\n              {pluginDetails.resourceLinks && (\n                <div>\n                  <h4>{t('Resources')}</h4>\n                  <dl className=\"flat\">\n                    {pluginDetails.resourceLinks.map(({title, url}) => (\n                      <dd key={url}>\n                        <ExternalLink href={url}>{title}</ExternalLink>\n                      </dd>\n                    ))}\n                  </dl>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {ProjectPluginDetails};\n\nexport default withPlugins(ProjectPluginDetails);\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(0.75)};\n`;\n"],"sourceRoot":""}