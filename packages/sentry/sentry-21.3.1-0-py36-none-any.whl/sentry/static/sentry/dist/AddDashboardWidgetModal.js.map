{"version":3,"sources":["webpack:///./app/actionCreators/dashboards.tsx","webpack:///./app/components/dashboards/widgetQueriesForm.tsx","webpack:///./app/components/modals/addDashboardWidgetModal.tsx","webpack:///./app/views/dashboardsV2/data.tsx"],"names":["createDashboard","api","orgId","newDashboard","title","widgets","promise","requestPromise","method","data","response","errorResponse","responseJSON","addErrorMessage","t","updateDashboard","dashboard","id","deleteDashboard","dashboardId","validateWidget","widget","WidgetQueriesForm","handleFieldChange","queryIndex","field","props","queries","onChange","widgetQuery","value","newQuery","key","errors","this","find","queryError","fields","options","organization","selection","canAddSearchConditions","handleAddSearchConditions","handleDeleteQuery","displayType","fieldOptions","hideLegendAlias","includes","QueryWrapper","map","label","inline","style","paddingBottom","flexibleControlStateSize","stacked","error","conditions","SearchConditionsWrapper","StyledSearchBar","projectIds","projects","query","onSearch","onBlur","useFormWrapper","LegendAliasInput","type","name","required","placeholder","event","target","length","size","borderless","onClick","preventDefault","icon","isCircled","getFirstQueryError","forEach","cloneDeep","orderby","marginBottom","space","alias","getAggregateAlias","push","option","onSelectResetsInput","onCloseResetsInput","onBlurResetsInput","React","SearchBar","Input","mapErrors","update","Object","keys","Array","isArray","item","normalizeQueries","isTimeseriesChart","slice","filter","isAggregateField","isLegalYAxisType","aggregateOutputType","referenceFields","queryLoop","isEqual","AddDashboardWidgetModal","handleSubmit","closeModal","onAddWidget","onUpdateWidget","previousWidget","setState","loading","widgetData","pick","state","slug","addSuccessMessage","prevState","newState","set","undefined","handleQueryChange","index","handleQueryRemove","splice","interval","DisplayType","rightDisplayType","underQueryLimit","Footer","Body","Header","tags","isUpdatingWidget","closeButton","onHide","DoubleFieldWrapper","data-test-id","maxLength","DISPLAY_TYPE_CHOICES","measurementKeys","measurements","amendedFieldOptions","values","generateFieldOptions","tagKeys","isEditing","onDelete","onEdit","renderErrorMessage","errorMessage","isSorting","currentWidgetDragging","gap","external","href","priority","disabled","busy","modalCss","withApi","withGlobalSelection","withTags","EMPTY_DASHBOARD","dateCreated","createdBy","DEFAULT_STATS_PERIOD"],"mappings":"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","file":"AddDashboardWidgetModal.js","sourcesContent":["import {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport {DashboardDetails, Widget} from 'app/views/dashboardsV2/types';\n\nexport function createDashboard(\n  api: Client,\n  orgId: string,\n  newDashboard: DashboardDetails\n): Promise<DashboardDetails> {\n  const {title, widgets} = newDashboard;\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/`,\n    {\n      method: 'POST',\n      data: {title, widgets},\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to create dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function updateDashboard(\n  api: Client,\n  orgId: string,\n  dashboard: DashboardDetails\n): Promise<DashboardDetails> {\n  const data = {\n    title: dashboard.title,\n    widgets: dashboard.widgets,\n  };\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboard.id}/`,\n    {\n      method: 'PUT',\n      data,\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to update dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function deleteDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to delete dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function validateWidget(\n  api: Client,\n  orgId: string,\n  widget: Widget\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/widgets/`,\n    {\n      method: 'POST',\n      data: widget,\n    }\n  );\n  return promise;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport Button from 'app/components/button';\nimport SearchBar from 'app/components/events/searchBar';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization, SelectValue} from 'app/types';\nimport {getAggregateAlias} from 'app/utils/discover/fields';\nimport {Widget, WidgetQuery} from 'app/views/dashboardsV2/types';\nimport {generateFieldOptions} from 'app/views/eventsV2/utils';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\nimport WidgetQueryFields from './widgetQueryFields';\n\nconst generateOrderOptions = (fields: string[]): SelectValue<string>[] => {\n  const options: SelectValue<string>[] = [];\n  fields.forEach(field => {\n    const alias = getAggregateAlias(field);\n    options.push({label: t('%s asc', field), value: alias});\n    options.push({label: t('%s desc', field), value: `-${alias}`});\n  });\n  return options;\n};\n\ntype Props = {\n  organization: Organization;\n  selection: GlobalSelection;\n  displayType: Widget['displayType'];\n  queries: WidgetQuery[];\n  errors?: Array<Record<string, any>>;\n  onChange: (queryIndex: number, widgetQuery: WidgetQuery) => void;\n  canAddSearchConditions: boolean;\n  handleAddSearchConditions: () => void;\n  handleDeleteQuery: (queryIndex: number) => void;\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n};\n\n/**\n * Contain widget queries interactions and signal changes via the onChange\n * callback. This component's state should live in the parent.\n */\nclass WidgetQueriesForm extends React.Component<Props> {\n  // Handle scalar field values changing.\n  handleFieldChange = (queryIndex: number, field: string) => {\n    const {queries, onChange} = this.props;\n    const widgetQuery = queries[queryIndex];\n\n    return function handleChange(value: string) {\n      const newQuery = {...widgetQuery, [field]: value};\n      onChange(queryIndex, newQuery);\n    };\n  };\n\n  getFirstQueryError(key: string) {\n    const {errors} = this.props;\n\n    if (!errors) {\n      return undefined;\n    }\n\n    return errors.find(queryError => queryError && queryError[key]);\n  }\n\n  render() {\n    const {\n      organization,\n      selection,\n      errors,\n      queries,\n      canAddSearchConditions,\n      handleAddSearchConditions,\n      handleDeleteQuery,\n      displayType,\n      fieldOptions,\n      onChange,\n    } = this.props;\n\n    const hideLegendAlias = ['table', 'world_map', 'big_number'].includes(displayType);\n\n    return (\n      <QueryWrapper>\n        {queries.map((widgetQuery, queryIndex) => {\n          return (\n            <Field\n              key={queryIndex}\n              label={queryIndex === 0 ? t('Query') : null}\n              inline={false}\n              style={{paddingBottom: `8px`}}\n              flexibleControlStateSize\n              stacked\n              error={errors?.[queryIndex].conditions}\n            >\n              <SearchConditionsWrapper>\n                <StyledSearchBar\n                  organization={organization}\n                  projectIds={selection.projects}\n                  query={widgetQuery.conditions}\n                  fields={[]}\n                  onSearch={this.handleFieldChange(queryIndex, 'conditions')}\n                  onBlur={this.handleFieldChange(queryIndex, 'conditions')}\n                  useFormWrapper={false}\n                />\n                {!hideLegendAlias && (\n                  <LegendAliasInput\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    value={widgetQuery.name}\n                    placeholder={t('Legend Alias')}\n                    onChange={event =>\n                      this.handleFieldChange(queryIndex, 'name')(event.target.value)\n                    }\n                  />\n                )}\n                {queries.length > 1 && (\n                  <Button\n                    size=\"zero\"\n                    borderless\n                    onClick={event => {\n                      event.preventDefault();\n                      handleDeleteQuery(queryIndex);\n                    }}\n                    icon={<IconDelete />}\n                    title={t('Remove query')}\n                    label={t('Remove query')}\n                  />\n                )}\n              </SearchConditionsWrapper>\n            </Field>\n          );\n        })}\n        {canAddSearchConditions && (\n          <Button\n            size=\"small\"\n            icon={<IconAdd isCircled />}\n            onClick={(event: React.MouseEvent) => {\n              event.preventDefault();\n              handleAddSearchConditions();\n            }}\n          >\n            {t('Add Query')}\n          </Button>\n        )}\n        <WidgetQueryFields\n          displayType={displayType}\n          fieldOptions={fieldOptions}\n          errors={this.getFirstQueryError('fields')}\n          fields={queries[0].fields}\n          onChange={fields => {\n            queries.forEach((widgetQuery, queryIndex) => {\n              const newQuery = cloneDeep(widgetQuery);\n              newQuery.fields = fields;\n              onChange(queryIndex, newQuery);\n            });\n          }}\n        />\n        {displayType === 'table' && (\n          <Field\n            label={t('Sort by')}\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            error={this.getFirstQueryError('orderby')?.orderby}\n            style={{marginBottom: space(1)}}\n          >\n            <SelectControl\n              value={queries[0].orderby}\n              name=\"orderby\"\n              options={generateOrderOptions(queries[0].fields)}\n              onChange={(option: SelectValue<string>) =>\n                this.handleFieldChange(0, 'orderby')(option.value)\n              }\n              onSelectResetsInput={false}\n              onCloseResetsInput={false}\n              onBlurResetsInput={false}\n            />\n          </Field>\n        )}\n      </QueryWrapper>\n    );\n  }\n}\n\nconst QueryWrapper = styled('div')`\n  position: relative;\n`;\n\nexport const SearchConditionsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n`;\n\nconst LegendAliasInput = styled(Input)`\n  width: 33%;\n`;\n\nexport default WidgetQueriesForm;\n","import React from 'react';\nimport {css} from '@emotion/core';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\n\nimport {validateWidget} from 'app/actionCreators/dashboards';\nimport {addSuccessMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport {Client} from 'app/api';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport WidgetQueriesForm from 'app/components/dashboards/widgetQueriesForm';\nimport SelectControl from 'app/components/forms/selectControl';\nimport {PanelAlert} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization, TagCollection} from 'app/types';\nimport {\n  aggregateOutputType,\n  isAggregateField,\n  isLegalYAxisType,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withTags from 'app/utils/withTags';\nimport {DISPLAY_TYPE_CHOICES} from 'app/views/dashboardsV2/data';\nimport {\n  DashboardDetails,\n  DisplayType,\n  Widget,\n  WidgetQuery,\n} from 'app/views/dashboardsV2/types';\nimport WidgetCard from 'app/views/dashboardsV2/widgetCard';\nimport {generateFieldOptions} from 'app/views/eventsV2/utils';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\nexport type DashboardWidgetModalOptions = {\n  organization: Organization;\n  dashboard: DashboardDetails;\n  selection: GlobalSelection;\n  onAddWidget: (data: Widget) => void;\n  widget?: Widget;\n  onUpdateWidget?: (nextWidget: Widget) => void;\n};\n\ntype Props = ModalRenderProps &\n  DashboardWidgetModalOptions & {\n    api: Client;\n    organization: Organization;\n    selection: GlobalSelection;\n    tags: TagCollection;\n  };\n\ntype ValidationError = {\n  [key: string]: string[] | ValidationError[] | ValidationError;\n};\n\ntype FlatValidationError = {\n  [key: string]: string | FlatValidationError[] | FlatValidationError;\n};\n\ntype State = {\n  title: string;\n  displayType: Widget['displayType'];\n  interval: Widget['interval'];\n  queries: Widget['queries'];\n  loading: boolean;\n  errors?: Record<string, any>;\n};\n\nconst newQuery = {\n  name: '',\n  fields: ['count()'],\n  conditions: '',\n  orderby: '',\n};\n\nfunction mapErrors(\n  data: ValidationError,\n  update: FlatValidationError\n): FlatValidationError {\n  Object.keys(data).forEach((key: string) => {\n    const value = data[key];\n    // Recurse into nested objects.\n    if (Array.isArray(value) && typeof value[0] === 'string') {\n      update[key] = value[0];\n    } else if (Array.isArray(value) && typeof value[0] === 'object') {\n      update[key] = (value as ValidationError[]).map(item => mapErrors(item, {}));\n    } else {\n      update[key] = mapErrors(value as ValidationError, {});\n    }\n  });\n\n  return update;\n}\n\nfunction normalizeQueries(\n  displayType: Widget['displayType'],\n  queries: Widget['queries']\n): Widget['queries'] {\n  const isTimeseriesChart = ['line', 'area', 'stacked_area', 'bar'].includes(displayType);\n\n  if (['table', 'world_map', 'big_number'].includes(displayType)) {\n    // Some display types may only support at most 1 query.\n    queries = queries.slice(0, 1);\n  } else if (isTimeseriesChart) {\n    // Timeseries charts supports at most 3 queries.\n    queries = queries.slice(0, 3);\n  }\n\n  if (displayType === 'table') {\n    return queries;\n  }\n\n  // Filter out non-aggregate fields\n  queries = queries.map(query => {\n    let fields = query.fields.filter(isAggregateField);\n\n    if (isTimeseriesChart || displayType === 'world_map') {\n      // Filter out fields that will not generate numeric output types\n      fields = fields.filter(field => isLegalYAxisType(aggregateOutputType(field)));\n    }\n\n    if (isTimeseriesChart && fields.length && fields.length > 3) {\n      // Timeseries charts supports at most 3 fields.\n      fields = fields.slice(0, 3);\n    }\n\n    return {\n      ...query,\n      fields: fields.length ? fields : ['count()'],\n    };\n  });\n\n  if (isTimeseriesChart) {\n    // For timeseries widget, all queries must share identical set of fields.\n\n    const referenceFields = [...queries[0].fields];\n\n    queryLoop: for (const query of queries) {\n      if (referenceFields.length >= 3) {\n        break;\n      }\n\n      if (isEqual(referenceFields, query.fields)) {\n        continue;\n      }\n\n      for (const field of query.fields) {\n        if (referenceFields.length >= 3) {\n          break queryLoop;\n        }\n\n        if (!referenceFields.includes(field)) {\n          referenceFields.push(field);\n        }\n      }\n    }\n\n    queries = queries.map(query => {\n      return {\n        ...query,\n        fields: referenceFields,\n      };\n    });\n  }\n\n  if (['world_map', 'big_number'].includes(displayType)) {\n    // For world map chart, cap fields of the queries to only one field.\n    queries = queries.map(query => {\n      return {\n        ...query,\n        fields: query.fields.slice(0, 1),\n      };\n    });\n  }\n\n  return queries;\n}\n\nclass AddDashboardWidgetModal extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {widget} = props;\n\n    if (!widget) {\n      this.state = {\n        title: '',\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        queries: [{...newQuery}],\n        errors: undefined,\n        loading: false,\n      };\n      return;\n    }\n\n    this.state = {\n      title: widget.title,\n      displayType: widget.displayType,\n      interval: widget.interval,\n      queries: normalizeQueries(widget.displayType, widget.queries),\n      errors: undefined,\n      loading: false,\n    };\n  }\n\n  handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {\n      api,\n      closeModal,\n      organization,\n      onAddWidget,\n      onUpdateWidget,\n      widget: previousWidget,\n    } = this.props;\n    this.setState({loading: true});\n    try {\n      const widgetData: Widget = pick(this.state, [\n        'title',\n        'displayType',\n        'interval',\n        'queries',\n      ]);\n      await validateWidget(api, organization.slug, widgetData);\n\n      if (typeof onUpdateWidget === 'function' && !!previousWidget) {\n        onUpdateWidget({\n          id: previousWidget?.id,\n          ...widgetData,\n        });\n        addSuccessMessage(t('Updated widget.'));\n      } else {\n        onAddWidget(widgetData);\n        addSuccessMessage(t('Added widget.'));\n      }\n\n      closeModal();\n    } catch (err) {\n      const errors = mapErrors(err?.responseJSON ?? {}, {});\n      this.setState({errors});\n    } finally {\n      this.setState({loading: false});\n    }\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      if (field === 'displayType') {\n        const displayType = value as Widget['displayType'];\n        set(newState, 'queries', normalizeQueries(displayType, prevState.queries));\n      }\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleQueryChange = (widgetQuery: WidgetQuery, index: number) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, `queries.${index}`, widgetQuery);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleQueryRemove = (index: number) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.splice(index, index + 1);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleAddSearchConditions = () => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.push(cloneDeep(newQuery));\n\n      return newState;\n    });\n  };\n\n  canAddSearchConditions() {\n    const rightDisplayType = ['line', 'area', 'stacked_area', 'bar'].includes(\n      this.state.displayType\n    );\n    const underQueryLimit = this.state.queries.length < 3;\n\n    return rightDisplayType && underQueryLimit;\n  }\n\n  render() {\n    const {\n      Footer,\n      Body,\n      Header,\n      api,\n      closeModal,\n      organization,\n      selection,\n      tags,\n      onUpdateWidget,\n      widget: previousWidget,\n    } = this.props;\n    const state = this.state;\n    const errors = state.errors;\n\n    const fieldOptions = (measurementKeys: string[]) =>\n      generateFieldOptions({\n        organization,\n        tagKeys: Object.values(tags).map(({key}) => key),\n        measurementKeys,\n      });\n\n    const isUpdatingWidget = typeof onUpdateWidget === 'function' && !!previousWidget;\n\n    return (\n      <React.Fragment>\n        <Header closeButton onHide={closeModal}>\n          <h4>{isUpdatingWidget ? t('Edit Widget') : t('Add Widget')}</h4>\n        </Header>\n        <Body>\n          <DoubleFieldWrapper>\n            <Field\n              data-test-id=\"widget-name\"\n              label={t('Widget Name')}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              error={errors?.title}\n              required\n            >\n              <Input\n                type=\"text\"\n                name=\"title\"\n                maxLength={255}\n                required\n                value={state.title}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  this.handleFieldChange('title')(event.target.value);\n                }}\n              />\n            </Field>\n            <Field\n              data-test-id=\"chart-type\"\n              label={t('Visualization Display')}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              error={errors?.displayType}\n              required\n            >\n              <SelectControl\n                required\n                options={DISPLAY_TYPE_CHOICES.slice()}\n                name=\"displayType\"\n                label={t('Visualization Display')}\n                value={state.displayType}\n                onChange={(option: {label: string; value: Widget['displayType']}) => {\n                  this.handleFieldChange('displayType')(option.value);\n                }}\n              />\n            </Field>\n          </DoubleFieldWrapper>\n          <Measurements>\n            {({measurements}) => {\n              const measurementKeys = Object.values(measurements).map(({key}) => key);\n              const amendedFieldOptions = fieldOptions(measurementKeys);\n              return (\n                <WidgetQueriesForm\n                  organization={organization}\n                  selection={selection}\n                  fieldOptions={amendedFieldOptions}\n                  displayType={state.displayType}\n                  queries={state.queries}\n                  errors={errors?.queries}\n                  onChange={(queryIndex: number, widgetQuery: WidgetQuery) =>\n                    this.handleQueryChange(widgetQuery, queryIndex)\n                  }\n                  canAddSearchConditions={this.canAddSearchConditions()}\n                  handleAddSearchConditions={this.handleAddSearchConditions}\n                  handleDeleteQuery={this.handleQueryRemove}\n                />\n              );\n            }}\n          </Measurements>\n          <WidgetCard\n            api={api}\n            organization={organization}\n            selection={selection}\n            widget={this.state}\n            isEditing={false}\n            onDelete={() => undefined}\n            onEdit={() => undefined}\n            renderErrorMessage={errorMessage =>\n              typeof errorMessage === 'string' && (\n                <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n              )\n            }\n            isSorting={false}\n            currentWidgetDragging={false}\n          />\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              external\n              href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#widget-builder\"\n            >\n              {t('Read the docs')}\n            </Button>\n            <Button\n              data-test-id=\"add-widget\"\n              priority=\"primary\"\n              type=\"button\"\n              onClick={this.handleSubmit}\n              disabled={state.loading}\n              busy={state.loading}\n            >\n              {isUpdatingWidget ? t('Update Widget') : t('Add Widget')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </React.Fragment>\n    );\n  }\n}\n\nconst DoubleFieldWrapper = styled('div')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: ${space(1)};\n  width: 100%;\n`;\n\nexport const modalCss = css`\n  .modal-dialog {\n    position: unset;\n    width: 100%;\n    max-width: 700px;\n    margin: 70px auto;\n  }\n`;\n\nexport default withApi(withGlobalSelection(withTags(AddDashboardWidgetModal)));\n","import {t} from 'app/locale';\n\nimport {DashboardDetails} from './types';\n\nexport const EMPTY_DASHBOARD: DashboardDetails = {\n  id: '',\n  dateCreated: '',\n  createdBy: '',\n  title: t('Untitled dashboard'),\n  widgets: [],\n};\n\nexport const DISPLAY_TYPE_CHOICES = [\n  {label: t('Area Chart'), value: 'area'},\n  {label: t('Bar Chart'), value: 'bar'},\n  {label: t('Line Chart'), value: 'line'},\n  {label: t('Table'), value: 'table'},\n  {label: t('World Map'), value: 'world_map'},\n  {label: t('Big Number'), value: 'big_number'},\n];\n\nexport const INTERVAL_CHOICES = [\n  {label: t('1 Minute'), value: '1m'},\n  {label: t('5 Minutes'), value: '5m'},\n  {label: t('15 Minutes'), value: '15m'},\n  {label: t('30 Minutes'), value: '30m'},\n  {label: t('1 Hour'), value: '1h'},\n  {label: t('1 Day'), value: '1d'},\n];\n\nexport const DEFAULT_STATS_PERIOD = '24h';\n"],"sourceRoot":""}