{"version":3,"sources":["webpack:///./app/components/dashboards/widgetQueryFields.tsx","webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/utils/userselect.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/utils/touch.tsx","webpack:///./app/views/eventsV2/table/columnEditCollection.tsx"],"names":["WidgetQueryFields","displayType","errors","fields","fieldOptions","onChange","style","data-test-id","label","t","inline","padding","space","error","flexibleControlStateSize","stacked","required","StyledColumnEditCollection","columns","map","field","explodeField","newFields","generateFieldAsString","hideAddYAxisButton","includes","length","doNotValidateYAxis","i","fieldValue","QueryFieldWrapper","key","value","fieldIndex","handleChangeField","filterPrimaryOptions","option","kind","FieldValueKind","primaryOutput","aggregateFunctionOutputType","meta","name","undefined","isLegalYAxisType","filterAggregateParameters","functionName","dataType","size","borderless","onClick","event","preventDefault","splice","handleRemove","icon","title","isCircled","ColumnEditCollection","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","getEventFieldValues","memoize","tag","query","endpointParams","props","api","organization","projectIds","projectIdStrings","String","isAggregateField","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","defined","Error","prepareQuery","replace","this","cache","clear","prevProps","isEqual","measurements","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","fieldTags","features","assign","omit","TRACING_FIELDS","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","excludeEnvironment","dropdownClassName","React","withApi","withTags","MEASUREMENTS","entries","WEB_VITAL_DETAILS","Measurements","children","WebVital","acronym","description","poorThreshold","type","measurementType","setBodyUserSelect","nextValues","previousValues","userSelect","document","body","MozUserSelect","msUserSelect","webkitUserSelect","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","TagStore","getInitialState","onTagsUpdate","setState","render","state","getPointerPosition","property","actual","nativeEvent","window","TouchEvent","targetTouches","MouseEvent","PlaceholderPosition","DRAG_CLASS","isDragging","draggingIndex","draggingTargetIndex","draggingGrabbedOffset","left","top","previousUserSelect","portal","dragGhostRef","handleAddColumn","handleUpdateColumn","index","column","newColumns","onDragMove","stopPropagation","pointerX","pointerY","dragOffsetX","x","dragOffsetY","y","current","ghostDOM","dragItems","querySelectorAll","targetIndex","Array","from","findIndex","dragItem","rects","getBoundingClientRect","thresholdStart","scrollY","thresholdEnd","height","onDragEnd","sourceIndex","cleanUpListeners","removed","createElement","position","zIndex","theme","appendChild","removeChild","isGhost","join","removeEventListener","find","n","contains","currentTarget","addEventListener","gridColumns","Number","col","ghost","Ghost","ref","renderItem","ReactDOM","canDelete","placeholder","DragPlaceholder","keyForColumn","className","TOP","BOTTOM","RowContainer","aria-label","onMouseDown","startDrag","onTouchStart","takeFocus","removeColumn","canAdd","Math","max","renderGhost","Heading","StyledSectionHeading","Actions","disabled","p","background","borderRadius","border","SectionHeading"],"mappings":"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","file":"app_components_dashboards_widgetQueryFields_tsx-app_components_events_searchBar_tsx.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {\n  aggregateFunctionOutputType,\n  explodeField,\n  generateFieldAsString,\n  isLegalYAxisType,\n  QueryFieldValue,\n} from 'app/utils/discover/fields';\nimport {Widget} from 'app/views/dashboardsV2/types';\nimport ColumnEditCollection from 'app/views/eventsV2/table/columnEditCollection';\nimport {QueryField} from 'app/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'app/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'app/views/eventsV2/utils';\nimport Field from 'app/views/settings/components/forms/field';\n\ntype Props = {\n  /**\n   * The widget type. Used to render different fieldsets.\n   */\n  displayType: Widget['displayType'];\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  /**\n   * The field list for the widget.\n   */\n  fields: string[];\n  /**\n   * Fired when fields are added/removed/modified/reordered.\n   */\n  onChange: (fields: string[]) => void;\n  /**\n   * Any errors that need to be rendered.\n   */\n  errors?: Record<string, any>;\n  style?: React.CSSProperties;\n};\n\nfunction WidgetQueryFields({\n  displayType,\n  errors,\n  fields,\n  fieldOptions,\n  onChange,\n  style,\n}: Props) {\n  // Handle new fields being added.\n  function handleAdd(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newFields = [...fields, ''];\n    onChange(newFields);\n  }\n\n  function handleRemove(event: React.MouseEvent, fieldIndex: number) {\n    event.preventDefault();\n\n    const newFields = [...fields];\n    newFields.splice(fieldIndex, 1);\n    onChange(newFields);\n  }\n\n  function handleChangeField(value: QueryFieldValue, fieldIndex: number) {\n    const newFields = [...fields];\n    newFields[fieldIndex] = generateFieldAsString(value);\n    onChange(newFields);\n  }\n\n  function handleColumnChange(columns: QueryFieldValue[]) {\n    const newFields = columns.map(generateFieldAsString);\n    onChange(newFields);\n  }\n\n  if (displayType === 'table') {\n    return (\n      <Field\n        data-test-id=\"columns\"\n        label={t('Columns')}\n        inline={false}\n        style={{padding: `${space(1)} 0`, ...(style ?? {})}}\n        error={errors?.fields}\n        flexibleControlStateSize\n        stacked\n        required\n      >\n        <StyledColumnEditCollection\n          columns={fields.map(field => explodeField({field}))}\n          onChange={handleColumnChange}\n          fieldOptions={fieldOptions}\n        />\n      </Field>\n    );\n  }\n\n  const hideAddYAxisButton =\n    (['world_map', 'big_number'].includes(displayType) && fields.length === 1) ||\n    (['line', 'area', 'stacked_area', 'bar'].includes(displayType) &&\n      fields.length === 3);\n\n  // Any function/field choice for Big Number widgets is legal since the\n  // data source is from an endpoint that is not timeseries-based.\n  // The function/field choice for World Map widget will need to be numeric-like.\n  // Column builder for Table widget is already handled above.\n  const doNotValidateYAxis = displayType === 'big_number';\n\n  return (\n    <Field\n      data-test-id=\"y-axis\"\n      label={t('Y-Axis')}\n      inline={false}\n      style={{padding: `${space(2)} 0 24px 0`, ...(style ?? {})}}\n      flexibleControlStateSize\n      error={errors?.fields}\n      required\n      stacked\n    >\n      {fields.map((field, i) => {\n        const fieldValue = explodeField({field});\n        return (\n          <QueryFieldWrapper key={`${field}:${i}`}>\n            <QueryField\n              fieldValue={fieldValue}\n              fieldOptions={fieldOptions}\n              onChange={value => handleChangeField(value, i)}\n              filterPrimaryOptions={option => {\n                // Only validate function names for timeseries widgets and\n                // world map widgets.\n                if (\n                  !doNotValidateYAxis &&\n                  option.value.kind === FieldValueKind.FUNCTION\n                ) {\n                  const primaryOutput = aggregateFunctionOutputType(\n                    option.value.meta.name,\n                    undefined\n                  );\n                  if (primaryOutput) {\n                    // If a function returns a specific type, then validate it.\n                    return isLegalYAxisType(primaryOutput);\n                  }\n                }\n\n                return option.value.kind === FieldValueKind.FUNCTION;\n              }}\n              filterAggregateParameters={option => {\n                // Only validate function parameters for timeseries widgets and\n                // world map widgets.\n                if (doNotValidateYAxis) {\n                  return true;\n                }\n\n                if (fieldValue.kind !== 'function') {\n                  return true;\n                }\n\n                const functionName = fieldValue.function[0];\n                const primaryOutput = aggregateFunctionOutputType(\n                  functionName as string,\n                  option.value.meta.name\n                );\n                if (primaryOutput) {\n                  return isLegalYAxisType(primaryOutput);\n                }\n\n                if (option.value.kind === FieldValueKind.FUNCTION) {\n                  // Functions are not legal options as an aggregate/function parameter.\n                  return false;\n                }\n\n                return isLegalYAxisType(option.value.meta.dataType);\n              }}\n            />\n            {fields.length > 1 && (\n              <Button\n                size=\"zero\"\n                borderless\n                onClick={event => handleRemove(event, i)}\n                icon={<IconDelete />}\n                title={t('Remove this Y-Axis')}\n                label={t('Remove this Y-Axis')}\n              />\n            )}\n          </QueryFieldWrapper>\n        );\n      })}\n      {!hideAddYAxisButton && (\n        <div>\n          <Button size=\"small\" icon={<IconAdd isCircled />} onClick={handleAdd}>\n            {t('Add Overlay')}\n          </Button>\n        </div>\n      )}\n    </Field>\n  );\n}\n\nconst StyledColumnEditCollection = styled(ColumnEditCollection)`\n  margin-top: ${space(1)};\n`;\n\nexport const QueryFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nexport default WidgetQueryFields;\n","import React from 'react';\nimport {ClassNames} from '@emotion/core';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isMeasurement,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(item => !Object.keys(FIELD_TAGS).includes(item.field))\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    return (\n      <Measurements>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  {...this.props}\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import React from 'react';\n\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\nconst MEASUREMENTS: MeasurementCollection = Object.fromEntries(\n  Object.entries(WEB_VITAL_DETAILS).map(([key, value]) => {\n    const newValue: Measurement = {\n      name: value.name,\n      key,\n    };\n    return [key, newValue];\n  })\n);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements(props: Props) {\n  return (\n    <React.Fragment>\n      {props.children({\n        measurements: MEASUREMENTS,\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default Measurements;\n","import {t} from 'app/locale';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n","export type UserSelectValues = {\n  userSelect: string | null;\n  MozUserSelect: string | null;\n  msUserSelect: string | null;\n  webkitUserSelect: string | null;\n};\n\nexport const setBodyUserSelect = (nextValues: UserSelectValues): UserSelectValues => {\n  // NOTE: Vendor prefixes other than `ms` should begin with a capital letter.\n  // ref: https://reactjs.org/docs/dom-elements.html#style\n\n  const previousValues = {\n    userSelect: document.body.style.userSelect,\n    // MozUserSelect is not typed in TS\n    // @ts-expect-error\n    MozUserSelect: document.body.style.MozUserSelect,\n    // msUserSelect is not typed in TS\n    // @ts-expect-error\n    msUserSelect: document.body.style.msUserSelect,\n    webkitUserSelect: document.body.style.webkitUserSelect,\n  };\n\n  document.body.style.userSelect = nextValues.userSelect || '';\n  // MozUserSelect is not typed in TS\n  // @ts-expect-error\n  document.body.style.MozUserSelect = nextValues.MozUserSelect || '';\n  // msUserSelect is not typed in TS\n  // @ts-expect-error\n  document.body.style.msUserSelect = nextValues.msUserSelect || '';\n  document.body.style.webkitUserSelect = nextValues.webkitUserSelect || '';\n\n  return previousValues;\n};\n","import React from 'react';\nimport createReactClass from 'create-react-class';\nimport Reflux from 'reflux';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nconst withTags = <P extends InjectedTagsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTagsProps>, State>({\n    displayName: `withTags(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TagStore, 'onTagsUpdate') as any],\n\n    getInitialState() {\n      return {\n        tags: TagStore.getAllTags(),\n      };\n    },\n\n    onTagsUpdate(tags: TagCollection) {\n      this.setState({\n        tags,\n      });\n    },\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    },\n  });\n\nexport default withTags;\n","function isReactEvent(\n  maybe: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent\n): maybe is React.MouseEvent | React.TouchEvent {\n  return 'nativeEvent' in maybe;\n}\n\n/**\n * Handle getting position out of both React and Raw DOM events\n * as both are handled here due to mousedown/mousemove events\n * working differently.\n */\nexport function getPointerPosition(\n  event: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent,\n  property: 'pageX' | 'pageY' | 'clientX' | 'clientY'\n): number {\n  const actual = isReactEvent(event) ? event.nativeEvent : event;\n  if (window.TouchEvent && actual instanceof TouchEvent) {\n    return actual.targetTouches[0][property];\n  }\n  if (actual instanceof MouseEvent) {\n    return actual[property];\n  }\n  return 0;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {IconAdd, IconDelete, IconGrabbable} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Column} from 'app/utils/discover/fields';\nimport theme from 'app/utils/theme';\nimport {getPointerPosition} from 'app/utils/touch';\nimport {setBodyUserSelect, UserSelectValues} from 'app/utils/userselect';\n\nimport {generateFieldOptions} from '../utils';\n\nimport {QueryField} from './queryField';\n\ntype Props = {\n  // Input columns\n  columns: Column[];\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  // Fired when columns are added/removed/modified\n  onChange: (columns: Column[]) => void;\n  className?: string;\n};\n\ntype State = {\n  isDragging: boolean;\n  draggingIndex: undefined | number;\n  draggingTargetIndex: undefined | number;\n  draggingGrabbedOffset: undefined | {x: number; y: number};\n  left: undefined | number;\n  top: undefined | number;\n};\n\nconst DRAG_CLASS = 'draggable-item';\nconst GHOST_PADDING = 4;\nconst MAX_COL_COUNT = 20;\n\nenum PlaceholderPosition {\n  TOP,\n  BOTTOM,\n}\n\nclass ColumnEditCollection extends React.Component<Props, State> {\n  state: State = {\n    isDragging: false,\n    draggingIndex: void 0,\n    draggingTargetIndex: void 0,\n    draggingGrabbedOffset: void 0,\n    left: void 0,\n    top: void 0,\n  };\n\n  componentDidMount() {\n    if (!this.portal) {\n      const portal = document.createElement('div');\n\n      portal.style.position = 'absolute';\n      portal.style.top = '0';\n      portal.style.left = '0';\n      portal.style.zIndex = String(theme.zIndex.modal);\n\n      this.portal = portal;\n\n      document.body.appendChild(this.portal);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.portal) {\n      document.body.removeChild(this.portal);\n    }\n    this.cleanUpListeners();\n  }\n\n  previousUserSelect: UserSelectValues | null = null;\n  portal: HTMLElement | null = null;\n  dragGhostRef = React.createRef<HTMLDivElement>();\n\n  keyForColumn(column: Column, isGhost: boolean): string {\n    if (column.kind === 'function') {\n      return [...column.function, isGhost].join(':');\n    }\n    return [...column.field, isGhost].join(':');\n  }\n\n  cleanUpListeners() {\n    if (this.state.isDragging) {\n      window.removeEventListener('mousemove', this.onDragMove);\n      window.removeEventListener('touchmove', this.onDragMove);\n      window.removeEventListener('mouseup', this.onDragEnd);\n      window.removeEventListener('touchend', this.onDragEnd);\n    }\n  }\n\n  // Signal to the parent that a new column has been added.\n  handleAddColumn = () => {\n    const newColumn: Column = {kind: 'field', field: ''};\n    this.props.onChange([...this.props.columns, newColumn]);\n  };\n\n  handleUpdateColumn = (index: number, column: Column) => {\n    const newColumns = [...this.props.columns];\n    newColumns.splice(index, 1, column);\n    this.props.onChange(newColumns);\n  };\n\n  removeColumn(index: number) {\n    const newColumns = [...this.props.columns];\n    newColumns.splice(index, 1);\n    this.props.onChange(newColumns);\n  }\n\n  startDrag(\n    event: React.MouseEvent<HTMLButtonElement> | React.TouchEvent<HTMLButtonElement>,\n    index: number\n  ) {\n    const isDragging = this.state.isDragging;\n    if (isDragging || !['mousedown', 'touchstart'].includes(event.type)) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n\n    const top = getPointerPosition(event, 'pageY');\n    const left = getPointerPosition(event, 'pageX');\n\n    // Compute where the user clicked on the drag handle. Avoids the element\n    // jumping from the cursor on mousedown.\n    const {x, y} = Array.from(document.querySelectorAll(`.${DRAG_CLASS}`))\n      .find(n => n.contains(event.currentTarget))!\n      .getBoundingClientRect();\n\n    const draggingGrabbedOffset = {\n      x: left - x + GHOST_PADDING,\n      y: top - y + GHOST_PADDING,\n    };\n\n    // prevent the user from selecting things when dragging a column.\n    this.previousUserSelect = setBodyUserSelect({\n      userSelect: 'none',\n      MozUserSelect: 'none',\n      msUserSelect: 'none',\n      webkitUserSelect: 'none',\n    });\n\n    // attach event listeners so that the mouse cursor can drag anywhere\n    window.addEventListener('mousemove', this.onDragMove);\n    window.addEventListener('touchmove', this.onDragMove);\n    window.addEventListener('mouseup', this.onDragEnd);\n    window.addEventListener('touchend', this.onDragEnd);\n\n    this.setState({\n      isDragging: true,\n      draggingIndex: index,\n      draggingTargetIndex: index,\n      draggingGrabbedOffset,\n      top,\n      left,\n    });\n  }\n\n  onDragMove = (event: MouseEvent | TouchEvent) => {\n    const {isDragging, draggingTargetIndex, draggingGrabbedOffset} = this.state;\n\n    if (!isDragging || !['mousemove', 'touchmove'].includes(event.type)) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n\n    const pointerX = getPointerPosition(event, 'pageX');\n    const pointerY = getPointerPosition(event, 'pageY');\n\n    const dragOffsetX = draggingGrabbedOffset?.x ?? 0;\n    const dragOffsetY = draggingGrabbedOffset?.y ?? 0;\n\n    if (this.dragGhostRef.current) {\n      // move the ghost box\n      const ghostDOM = this.dragGhostRef.current;\n      // Adjust so cursor is over the grab handle.\n      ghostDOM.style.left = `${pointerX - dragOffsetX}px`;\n      ghostDOM.style.top = `${pointerY - dragOffsetY}px`;\n    }\n\n    const dragItems = document.querySelectorAll(`.${DRAG_CLASS}`);\n    // Find the item that the ghost is currently over.\n    const targetIndex = Array.from(dragItems).findIndex(dragItem => {\n      const rects = dragItem.getBoundingClientRect();\n      const top = pointerY;\n\n      const thresholdStart = window.scrollY + rects.top;\n      const thresholdEnd = window.scrollY + rects.top + rects.height;\n\n      return top >= thresholdStart && top <= thresholdEnd;\n    });\n\n    if (targetIndex >= 0 && targetIndex !== draggingTargetIndex) {\n      this.setState({draggingTargetIndex: targetIndex});\n    }\n  };\n\n  onDragEnd = (event: MouseEvent | TouchEvent) => {\n    if (!this.state.isDragging || !['mouseup', 'touchend'].includes(event.type)) {\n      return;\n    }\n\n    const sourceIndex = this.state.draggingIndex;\n    const targetIndex = this.state.draggingTargetIndex;\n    if (typeof sourceIndex !== 'number' || typeof targetIndex !== 'number') {\n      return;\n    }\n\n    // remove listeners that were attached in startColumnDrag\n    this.cleanUpListeners();\n\n    // restore body user-select values\n    if (this.previousUserSelect) {\n      setBodyUserSelect(this.previousUserSelect);\n      this.previousUserSelect = null;\n    }\n\n    // Reorder columns and trigger change.\n    const newColumns = [...this.props.columns];\n    const removed = newColumns.splice(sourceIndex, 1);\n    newColumns.splice(targetIndex, 0, removed[0]);\n    this.props.onChange(newColumns);\n\n    this.setState({\n      isDragging: false,\n      left: undefined,\n      top: undefined,\n      draggingIndex: undefined,\n      draggingTargetIndex: undefined,\n      draggingGrabbedOffset: undefined,\n    });\n  };\n\n  renderGhost(gridColumns: number) {\n    const {isDragging, draggingIndex, draggingGrabbedOffset} = this.state;\n\n    const index = draggingIndex;\n    if (typeof index !== 'number' || !isDragging || !this.portal) {\n      return null;\n    }\n    const dragOffsetX = draggingGrabbedOffset?.x ?? 0;\n    const dragOffsetY = draggingGrabbedOffset?.y ?? 0;\n\n    const top = Number(this.state.top) - dragOffsetY;\n    const left = Number(this.state.left) - dragOffsetX;\n    const col = this.props.columns[index];\n\n    const style = {\n      top: `${top}px`,\n      left: `${left}px`,\n    };\n    const ghost = (\n      <Ghost ref={this.dragGhostRef} style={style}>\n        {this.renderItem(col, index, {isGhost: true, gridColumns})}\n      </Ghost>\n    );\n\n    return ReactDOM.createPortal(ghost, this.portal);\n  }\n\n  renderItem(\n    col: Column,\n    i: number,\n    {\n      canDelete = true,\n      isGhost = false,\n      gridColumns = 2,\n    }: {canDelete?: boolean; isGhost?: boolean; gridColumns: number}\n  ) {\n    const {fieldOptions} = this.props;\n    const {isDragging, draggingTargetIndex, draggingIndex} = this.state;\n\n    let placeholder: React.ReactNode = null;\n    // Add a placeholder above the target row.\n    if (isDragging && isGhost === false && draggingTargetIndex === i) {\n      placeholder = (\n        <DragPlaceholder\n          key={`placeholder:${this.keyForColumn(col, isGhost)}`}\n          className={DRAG_CLASS}\n        />\n      );\n    }\n\n    // If the current row is the row in the drag ghost return the placeholder\n    // or a hole if the placeholder is elsewhere.\n    if (isDragging && isGhost === false && draggingIndex === i) {\n      return placeholder;\n    }\n\n    const position =\n      Number(draggingTargetIndex) <= Number(draggingIndex)\n        ? PlaceholderPosition.TOP\n        : PlaceholderPosition.BOTTOM;\n\n    return (\n      <React.Fragment key={`${i}:${this.keyForColumn(col, isGhost)}`}>\n        {position === PlaceholderPosition.TOP && placeholder}\n        <RowContainer className={isGhost ? '' : DRAG_CLASS}>\n          {canDelete ? (\n            <Button\n              aria-label={t('Drag to reorder')}\n              onMouseDown={event => this.startDrag(event, i)}\n              onTouchStart={event => this.startDrag(event, i)}\n              icon={<IconGrabbable size=\"xs\" />}\n              size=\"zero\"\n              borderless\n            />\n          ) : (\n            <span />\n          )}\n          <QueryField\n            fieldOptions={fieldOptions}\n            gridColumns={gridColumns}\n            fieldValue={col}\n            onChange={value => this.handleUpdateColumn(i, value)}\n            takeFocus={i === this.props.columns.length - 1}\n          />\n          {canDelete ? (\n            <Button\n              aria-label={t('Remove column')}\n              onClick={() => this.removeColumn(i)}\n              icon={<IconDelete />}\n              borderless\n            />\n          ) : (\n            <span />\n          )}\n        </RowContainer>\n        {position === PlaceholderPosition.BOTTOM && placeholder}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {className, columns} = this.props;\n    const canDelete = columns.length > 1;\n    const canAdd = columns.length < MAX_COL_COUNT;\n    const title = canAdd\n      ? undefined\n      : `Sorry, you reached the maximum number of columns. Delete columns to add more.`;\n\n    // Get the longest number of columns so we can layout the rows.\n    // We always want at least 2 columns.\n    const gridColumns = Math.max(\n      ...columns.map(col =>\n        col.kind === 'function' && col.function[2] !== undefined ? 3 : 2\n      )\n    );\n\n    return (\n      <div className={className}>\n        {this.renderGhost(gridColumns)}\n        <RowContainer>\n          <Heading gridColumns={gridColumns}>\n            <StyledSectionHeading>{t('Tag / Field / Function')}</StyledSectionHeading>\n            <StyledSectionHeading>{t('Field Parameter')}</StyledSectionHeading>\n          </Heading>\n        </RowContainer>\n        {columns.map((col: Column, i: number) =>\n          this.renderItem(col, i, {canDelete, gridColumns})\n        )}\n        <RowContainer>\n          <Actions>\n            <Button\n              size=\"small\"\n              label={t('Add a Column')}\n              onClick={this.handleAddColumn}\n              title={title}\n              disabled={!canAdd}\n              icon={<IconAdd isCircled size=\"xs\" />}\n            >\n              {t('Add a Column')}\n            </Button>\n          </Actions>\n        </RowContainer>\n      </div>\n    );\n  }\n}\n\nconst RowContainer = styled('div')`\n  display: grid;\n  grid-template-columns: ${space(3)} 1fr ${space(3)};\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  touch-action: none;\n  padding-bottom: ${space(1)};\n`;\n\nconst Ghost = styled('div')`\n  background: ${p => p.theme.background};\n  display: block;\n  position: absolute;\n  padding: ${GHOST_PADDING}px;\n  border-radius: ${p => p.theme.borderRadius};\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.15);\n  width: 710px;\n  opacity: 0.8;\n  cursor: grabbing;\n  padding-right: ${space(2)};\n\n  & > ${RowContainer} {\n    padding-bottom: 0;\n  }\n\n  & svg {\n    cursor: grabbing;\n  }\n`;\n\nconst DragPlaceholder = styled('div')`\n  margin: 0 ${space(3)} ${space(1)} ${space(3)};\n  border: 2px dashed ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 41px;\n`;\n\nconst Actions = styled('div')`\n  grid-column: 2 / 3;\n`;\n\nconst Heading = styled('div')<{gridColumns: number}>`\n  grid-column: 2 / 3;\n\n  /* Emulate the grid used in the column editor rows */\n  display: grid;\n  grid-template-columns: repeat(${p => p.gridColumns}, 1fr);\n  grid-column-gap: ${space(1)};\n`;\n\nconst StyledSectionHeading = styled(SectionHeading)`\n  margin: 0;\n`;\n\nexport default ColumnEditCollection;\n"],"sourceRoot":""}