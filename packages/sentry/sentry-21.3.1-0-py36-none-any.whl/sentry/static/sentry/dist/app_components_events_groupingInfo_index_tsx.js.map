{"version":3,"sources":["webpack:///./app/components/events/groupingInfo/groupingConfigSelect.tsx","webpack:///./app/components/events/groupingInfo/utils.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentChildren.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentFrames.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentStacktrace.tsx","webpack:///./app/components/events/groupingInfo/groupingComponent.tsx","webpack:///./app/components/events/groupingInfo/groupingVariant.tsx","webpack:///./app/components/events/groupingInfo/index.tsx","webpack:///./app/components/events/interfaces/keyValueList/keyValueList.tsx"],"names":["GroupingConfigSelect","configs","this","renderBody","props","configId","eventConfigId","onSelect","options","state","map","id","hidden","value","label","GroupingConfigItem","isHidden","isActive","items","isOpen","title","t","StyledDropdownButton","size","AsyncComponent","DropdownButton","hasNonContributingComponent","component","contributes","values","isObject","groupingComponentFilter","showNonContributing","hint","length","GroupingComponentChildren","filter","idx","GroupingComponentListItem","key","GroupingValue","valueType","name","JSON","stringify","GroupingComponentFrames","collapsed","maxVisibleItems","isCollapsable","item","index","ToggleCollapse","priority","icon","onClick","setState","tct","numberOfFrames","React","defaultProps","Button","space","GroupingComponentStacktrace","frameGroups","forEach","v","sort","a","b","localeCompare","join","lastGroup","data","push","group","GroupingComponent","shouldInlineValue","every","shouldInlineComponentValue","GroupingComponentListItems","GroupingComponentWrapper","isContributing","GroupingHint","GroupingComponentList","isInline","p","theme","innerBorder","fontSizeSmall","gray200","addFingerprintInfo","variant","matched_rule","TextWithQuestionTooltip","position","client_values","GroupVariant","handleShowNonContributing","handleHideNonContributing","showGroupingConfig","hash","Hash","hashMismatch","type","EventGroupVariantType","config","GroupingTree","VariantTitle","ContributionIcon","description","split","i","capitalize","ContributingToggle","merged","active","barId","getVariantData","VariantWrapper","Header","renderTitle","renderContributionToggle","isContextData","isSorted","breakpoints","fontSizeMedium","isCircled","color","ButtonBar","overflowEllipsis","EventGroupingInfo","toggle","configOverride","handleConfigSelect","selection","reloadData","organization","event","projectId","path","slug","groupInfo","groupedBy","Object","toLowerCase","SummaryGroupedBy","data-test-id","groupingConfig","GroupConfigWrapper","loading","variants","renderGroupConfigSelect","VariantDivider","renderGroupInfoSummary","actions","ToggleButton","renderGroupInfo","subText","textColor","text","familyMono","withOrganization","KeyValueList","raw","longKeys","Array","kv","entries","sortBy","className","TableData","wide"],"mappings":"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","file":"app_components_events_groupingInfo_index_tsx.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport {EventGroupingConfig} from 'app/types';\n\nimport {GroupingConfigItem} from '.';\n\ntype Props = AsyncComponent['props'] & {\n  eventConfigId: string;\n  configId: string;\n  onSelect: (selection: any) => void;\n};\n\ntype State = AsyncComponent['state'] & {\n  configs: EventGroupingConfig[];\n};\n\nclass GroupingConfigSelect extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      configs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['configs', '/grouping-configs/']];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {configId, eventConfigId, onSelect} = this.props;\n    const {configs} = this.state;\n\n    const options = configs.map(({id, hidden}) => ({\n      value: id,\n      label: (\n        <GroupingConfigItem isHidden={hidden} isActive={id === eventConfigId}>\n          {id}\n        </GroupingConfigItem>\n      ),\n    }));\n\n    return (\n      <DropdownAutoComplete onSelect={onSelect} items={options}>\n        {({isOpen}) => (\n          <Tooltip title={t('Click here to experiment with other grouping configs')}>\n            <StyledDropdownButton isOpen={isOpen} size=\"small\">\n              <GroupingConfigItem isActive={eventConfigId === configId}>\n                {configId}\n              </GroupingConfigItem>\n            </StyledDropdownButton>\n          </Tooltip>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n}\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  font-weight: inherit;\n`;\n\nexport default GroupingConfigSelect;\n","import isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nexport function hasNonContributingComponent(component: EventGroupComponent | undefined) {\n  if (!component?.contributes) {\n    return true;\n  }\n  for (const value of component.values) {\n    if (isObject(value) && hasNonContributingComponent(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function shouldInlineComponentValue(component: EventGroupComponent) {\n  return (component.values as EventGroupComponent[]).every(value => !isObject(value));\n}\n\nexport function groupingComponentFilter(\n  value: EventGroupComponent | string,\n  showNonContributing: boolean\n) {\n  if (isObject(value)) {\n    // no point rendering such nodes at all, we never show them\n    if (!value.contributes && !value.hint && value.values.length === 0) {\n      return false;\n    }\n    // non contributing values are otherwise optional\n    if (!showNonContributing && !value.contributes) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import React from 'react';\nimport isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent, {\n  GroupingComponentListItem,\n  GroupingValue,\n} from './groupingComponent';\nimport {groupingComponentFilter} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentChildren = ({component, showNonContributing}: Props) => {\n  return (\n    <React.Fragment>\n      {(component.values as EventGroupComponent[])\n        .filter(value => groupingComponentFilter(value, showNonContributing))\n        .map((value, idx) => (\n          <GroupingComponentListItem key={idx}>\n            {isObject(value) ? (\n              <GroupingComponent\n                component={value}\n                showNonContributing={showNonContributing}\n              />\n            ) : (\n              <GroupingValue valueType={component.name || component.id}>\n                {typeof value === 'string' || typeof value === 'number'\n                  ? value\n                  : JSON.stringify(value, null, 2)}\n              </GroupingValue>\n            )}\n          </GroupingComponentListItem>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentChildren;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport {IconAdd, IconSubtract} from 'app/icons';\nimport {tct} from 'app/locale';\nimport space from 'app/styles/space';\n\nimport {GroupingComponentListItem} from './groupingComponent';\n\ntype DefaultProps = {\n  maxVisibleItems: number;\n};\n\ntype Props = DefaultProps & {\n  items: React.ReactNode[];\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nclass GroupingComponentFrames extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    maxVisibleItems: 2,\n  };\n\n  state: State = {\n    collapsed: true,\n  };\n\n  render() {\n    const {items, maxVisibleItems} = this.props;\n    const {collapsed} = this.state;\n    const isCollapsable = items.length > maxVisibleItems;\n\n    return (\n      <React.Fragment>\n        {items.map((item, index) => {\n          if (!collapsed || index < maxVisibleItems) {\n            return (\n              <GroupingComponentListItem isCollapsable={isCollapsable} key={index}>\n                {item}\n              </GroupingComponentListItem>\n            );\n          }\n\n          if (index === maxVisibleItems) {\n            return (\n              <GroupingComponentListItem key={index}>\n                <ToggleCollapse\n                  size=\"small\"\n                  priority=\"link\"\n                  icon={<IconAdd size=\"8px\" />}\n                  onClick={() => this.setState({collapsed: false})}\n                >\n                  {tct('show [numberOfFrames] similiar', {\n                    numberOfFrames: items.length - maxVisibleItems,\n                  })}\n                </ToggleCollapse>\n              </GroupingComponentListItem>\n            );\n          }\n\n          return null;\n        })}\n\n        {!collapsed && items.length > maxVisibleItems && (\n          <GroupingComponentListItem>\n            <ToggleCollapse\n              size=\"small\"\n              priority=\"link\"\n              icon={<IconSubtract size=\"8px\" />}\n              onClick={() => this.setState({collapsed: true})}\n            >\n              {tct('collapse [numberOfFrames] similiar', {\n                numberOfFrames: items.length - maxVisibleItems,\n              })}\n            </ToggleCollapse>\n          </GroupingComponentListItem>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ToggleCollapse = styled(Button)`\n  margin: ${space(0.5)} 0;\n`;\n\nexport default GroupingComponentFrames;\n","import React from 'react';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport GroupingComponentFrames from './groupingComponentFrames';\nimport {groupingComponentFilter} from './utils';\n\ntype FrameGroup = {\n  key: string;\n  data: EventGroupComponent[];\n};\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentStacktrace = ({component, showNonContributing}: Props) => {\n  const getFrameGroups = () => {\n    const frameGroups: FrameGroup[] = [];\n\n    (component.values as EventGroupComponent[])\n      .filter(value => groupingComponentFilter(value, showNonContributing))\n      .forEach(value => {\n        const key = (value.values as EventGroupComponent[])\n          .filter(v => groupingComponentFilter(v, showNonContributing))\n          .map(v => v.id)\n          .sort((a, b) => a.localeCompare(b))\n          .join('');\n\n        const lastGroup = frameGroups[frameGroups.length - 1];\n\n        if (lastGroup?.key === key) {\n          lastGroup.data.push(value);\n        } else {\n          frameGroups.push({key, data: [value]});\n        }\n      });\n\n    return frameGroups;\n  };\n\n  return (\n    <React.Fragment>\n      {getFrameGroups().map((group, index) => (\n        <GroupingComponentFrames\n          key={index}\n          items={group.data.map((v, idx) => (\n            <GroupingComponent\n              key={idx}\n              component={v}\n              showNonContributing={showNonContributing}\n            />\n          ))}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentStacktrace;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponentChildren from './groupingComponentChildren';\nimport GroupingComponentStacktrace from './groupingComponentStacktrace';\nimport {shouldInlineComponentValue} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponent = ({component, showNonContributing}: Props) => {\n  const shouldInlineValue = shouldInlineComponentValue(component);\n\n  const GroupingComponentListItems =\n    component.id === 'stacktrace'\n      ? GroupingComponentStacktrace\n      : GroupingComponentChildren;\n\n  return (\n    <GroupingComponentWrapper isContributing={component.contributes}>\n      <span>\n        {component.name || component.id}\n        {component.hint && <GroupingHint>{` (${component.hint})`}</GroupingHint>}\n      </span>\n\n      <GroupingComponentList isInline={shouldInlineValue}>\n        <GroupingComponentListItems\n          component={component}\n          showNonContributing={showNonContributing}\n        />\n      </GroupingComponentList>\n    </GroupingComponentWrapper>\n  );\n};\n\nconst GroupingComponentList = styled('ul')<{isInline: boolean}>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  &,\n  & > li {\n    display: ${p => (p.isInline ? 'inline' : 'block')};\n  }\n`;\n\nexport const GroupingComponentListItem = styled('li')<{isCollapsable?: boolean}>`\n  padding: 0;\n  margin: ${space(0.25)} 0 ${space(0.25)} ${space(1.5)};\n\n  ${p =>\n    p.isCollapsable &&\n    `\n    border-left: 1px solid ${p.theme.innerBorder};\n    margin: 0 0 -${space(0.25)} ${space(1)};\n    padding-left: ${space(0.5)};\n  `}\n`;\n\nexport const GroupingValue = styled('code')<{valueType: string}>`\n  display: inline-block;\n  margin: ${space(0.25)} ${space(0.5)} ${space(0.25)} 0;\n  font-size: ${p => p.theme.fontSizeSmall};\n  padding: 0 ${space(0.25)};\n  background: rgba(112, 163, 214, 0.1);\n  color: #4e3fb4;\n\n  ${({valueType}) =>\n    (valueType === 'function' || valueType === 'symbol') &&\n    `\n    font-weight: bold;\n    color: #2c58a8;\n  `}\n`;\n\nconst GroupingComponentWrapper = styled('div')<{isContributing: boolean}>`\n  color: ${p => (p.isContributing ? null : p.theme.gray200)};\n\n  ${GroupingValue}, button {\n    opacity: ${p => (p.isContributing ? 1 : 0.6)};\n  }\n`;\n\nconst GroupingHint = styled('small')`\n  font-size: 0.8em;\n`;\n\nexport default GroupingComponent;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport Tooltip from 'app/components/tooltip';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {EventGroupComponent, EventGroupVariant, EventGroupVariantType} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport {hasNonContributingComponent} from './utils';\n\ntype Props = {\n  variant: EventGroupVariant;\n  showGroupingConfig: boolean;\n};\n\ntype State = {\n  showNonContributing: boolean;\n};\n\ntype VariantData = [string, React.ReactNode][];\n\nfunction addFingerprintInfo(data: VariantData, variant: EventGroupVariant) {\n  if (variant.matched_rule) {\n    data.push([\n      t('Fingerprint rule'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.matched_rule}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t('The server-side fingerprinting rule that produced the fingerprint.')}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n  if (variant.values) {\n    data.push([t('Fingerprint values'), variant.values]);\n  }\n  if (variant.client_values) {\n    data.push([\n      t('Client fingerprint values'),\n      <TextWithQuestionTooltip key=\"type\">\n        {variant.client_values}\n        <QuestionTooltip\n          size=\"xs\"\n          position=\"top\"\n          title={t(\n            'The client sent a fingerprint that was overridden by a server-side fingerprinting rule.'\n          )}\n        />\n      </TextWithQuestionTooltip>,\n    ]);\n  }\n}\n\nclass GroupVariant extends React.Component<Props, State> {\n  state = {\n    showNonContributing: false,\n  };\n\n  handleShowNonContributing = () => {\n    this.setState({showNonContributing: true});\n  };\n\n  handleHideNonContributing = () => {\n    this.setState({showNonContributing: false});\n  };\n\n  getVariantData(): [VariantData, EventGroupComponent | undefined] {\n    const {variant, showGroupingConfig} = this.props;\n    const data: VariantData = [];\n    let component: EventGroupComponent | undefined;\n\n    if (!this.state.showNonContributing && variant.hash === null) {\n      return [data, component];\n    }\n\n    if (variant.hash !== null) {\n      data.push([\n        t('Hash'),\n        <TextWithQuestionTooltip key=\"hash\">\n          <Hash>{variant.hash}</Hash>\n          <QuestionTooltip\n            size=\"xs\"\n            position=\"top\"\n            title={t('Events with the same hash are grouped together')}\n          />\n        </TextWithQuestionTooltip>,\n      ]);\n    }\n\n    if (variant.hashMismatch) {\n      data.push([\n        t('Hash mismatch'),\n        t('hashing algorithm produced a hash that does not match the event'),\n      ]);\n    }\n\n    switch (variant.type) {\n      case EventGroupVariantType.COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      case EventGroupVariantType.CUSTOM_FINGERPRINT:\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t('Overrides the default grouping by a custom fingerprinting rule')}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        break;\n      case EventGroupVariantType.SALTED_COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data and a fingerprint into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        addFingerprintInfo(data, variant);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      data.push([\n        t('Grouping'),\n        <GroupingTree key={component.id}>\n          <GroupingComponent\n            component={component}\n            showNonContributing={this.state.showNonContributing}\n          />\n        </GroupingTree>,\n      ]);\n    }\n\n    return [data, component];\n  }\n\n  renderTitle() {\n    const {variant} = this.props;\n    const isContributing = variant.hash !== null;\n\n    let title;\n    if (isContributing) {\n      title = t('Contributing variant');\n    } else {\n      const hint = variant.component?.hint;\n      if (hint) {\n        title = t('Non-contributing variant: %s', hint);\n      } else {\n        title = t('Non-contributing variant');\n      }\n    }\n\n    return (\n      <Tooltip title={title}>\n        <VariantTitle>\n          <ContributionIcon isContributing={isContributing} />\n          {t('By')}{' '}\n          {variant.description\n            ?.split(' ')\n            .map(i => capitalize(i))\n            .join(' ') ?? t('Nothing')}\n        </VariantTitle>\n      </Tooltip>\n    );\n  }\n\n  renderContributionToggle() {\n    const {showNonContributing} = this.state;\n\n    return (\n      <ContributingToggle merged active={showNonContributing ? 'all' : 'relevant'}>\n        <Button barId=\"relevant\" size=\"xsmall\" onClick={this.handleHideNonContributing}>\n          {t('Contributing values')}\n        </Button>\n        <Button barId=\"all\" size=\"xsmall\" onClick={this.handleShowNonContributing}>\n          {t('All values')}\n        </Button>\n      </ContributingToggle>\n    );\n  }\n\n  render() {\n    const [data, component] = this.getVariantData();\n\n    return (\n      <VariantWrapper>\n        <Header>\n          {this.renderTitle()}\n          {hasNonContributingComponent(component) && this.renderContributionToggle()}\n        </Header>\n\n        <KeyValueList data={data} isContextData isSorted={false} />\n      </VariantWrapper>\n    );\n  }\n}\n\nconst VariantWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst VariantTitle = styled('h5')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst ContributionIcon = styled(({isContributing, ...p}) =>\n  isContributing ? (\n    <IconCheckmark size=\"sm\" isCircled color=\"green300\" {...p} />\n  ) : (\n    <IconClose size=\"sm\" isCircled color=\"red\" {...p} />\n  )\n)`\n  margin-right: ${space(1)};\n`;\n\nconst ContributingToggle = styled(ButtonBar)`\n  justify-content: flex-end;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst GroupingTree = styled('div')`\n  color: #2f2936;\n`;\n\nconst TextWithQuestionTooltip = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: max-content min-content;\n  grid-gap: ${space(0.5)};\n`;\n\nconst Hash = styled('span')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    ${overflowEllipsis};\n    width: 210px;\n  }\n`;\n\nexport default GroupVariant;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Button from 'app/components/button';\nimport EventDataSection from 'app/components/events/eventDataSection';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {EventGroupInfo, Organization} from 'app/types';\nimport {Event} from 'app/types/event';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport GroupingConfigSelect from './groupingConfigSelect';\nimport GroupVariant from './groupingVariant';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projectId: string;\n  event: Event;\n  showGroupingConfig: boolean;\n};\n\ntype State = AsyncComponent['state'] & {\n  isOpen: boolean;\n  configOverride: string | null;\n  groupInfo: EventGroupInfo;\n};\n\nclass EventGroupingInfo extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, event, projectId} = this.props;\n\n    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;\n    if (this.state?.configOverride) {\n      path = `${path}?config=${this.state.configOverride}`;\n    }\n\n    return [['groupInfo', path]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      isOpen: false,\n      configOverride: null,\n    };\n  }\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n      configOverride: state.isOpen ? null : state.configOverride,\n    }));\n  };\n\n  handleConfigSelect = selection => {\n    this.setState({configOverride: selection.value}, () => this.reloadData());\n  };\n\n  renderGroupInfoSummary() {\n    const {groupInfo} = this.state;\n\n    if (!groupInfo) {\n      return null;\n    }\n\n    const groupedBy = Object.values(groupInfo)\n      .filter(variant => variant.hash !== null && variant.description !== null)\n      .map(variant => variant.description)\n      .sort((a, b) => a!.toLowerCase().localeCompare(b!.toLowerCase()))\n      .join(', ');\n\n    return (\n      <SummaryGroupedBy data-test-id=\"loaded-grouping-info\">{`(${t('grouped by')} ${\n        groupedBy || t('nothing')\n      })`}</SummaryGroupedBy>\n    );\n  }\n\n  renderGroupConfigSelect() {\n    const {configOverride} = this.state;\n    const {event} = this.props;\n\n    const configId = configOverride ?? event.groupingConfig.id;\n\n    return (\n      <GroupConfigWrapper>\n        <GroupingConfigSelect\n          eventConfigId={event.groupingConfig.id}\n          configId={configId}\n          onSelect={this.handleConfigSelect}\n        />\n      </GroupConfigWrapper>\n    );\n  }\n\n  renderGroupInfo() {\n    const {groupInfo, loading} = this.state;\n    const {showGroupingConfig} = this.props;\n\n    const variants = groupInfo\n      ? Object.values(groupInfo).sort((a, b) =>\n          a.hash && !b.hash\n            ? -1\n            : a.description\n                ?.toLowerCase()\n                .localeCompare(b.description?.toLowerCase() ?? '') ?? 1\n        )\n      : [];\n\n    return (\n      <React.Fragment>\n        {showGroupingConfig && this.renderGroupConfigSelect()}\n\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          variants.map((variant, index) => (\n            <React.Fragment key={variant.key}>\n              <GroupVariant variant={variant} showGroupingConfig={showGroupingConfig} />\n              {index < variants.length - 1 && <VariantDivider />}\n            </React.Fragment>\n          ))\n        )}\n      </React.Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {isOpen} = this.state;\n\n    const title = (\n      <React.Fragment>\n        {t('Event Grouping Information')}\n        {!isOpen && this.renderGroupInfoSummary()}\n      </React.Fragment>\n    );\n\n    const actions = (\n      <ToggleButton onClick={this.toggle} priority=\"link\">\n        {isOpen ? t('Hide Details') : t('Show Details')}\n      </ToggleButton>\n    );\n\n    return (\n      <EventDataSection type=\"grouping-info\" title={title} actions={actions}>\n        {isOpen && this.renderGroupInfo()}\n      </EventDataSection>\n    );\n  }\n}\n\nconst SummaryGroupedBy = styled('small')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n    margin: 0 !important;\n  }\n`;\n\nconst ToggleButton = styled(Button)`\n  font-weight: 700;\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst GroupConfigWrapper = styled('div')`\n  margin-bottom: ${space(1.5)};\n  margin-top: -${space(1)};\n`;\n\nexport const GroupingConfigItem = styled('span')<{\n  isHidden?: boolean;\n  isActive?: boolean;\n}>`\n  font-family: ${p => p.theme.text.familyMono};\n  opacity: ${p => (p.isHidden ? 0.5 : null)};\n  font-weight: ${p => (p.isActive ? 'bold' : null)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst VariantDivider = styled('hr')`\n  padding-top: ${space(1)};\n`;\n\nexport default withOrganization(EventGroupingInfo);\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport sortBy from 'lodash/sortBy';\n\nimport ContextData from 'app/components/contextData';\nimport theme from 'app/utils/theme';\n\ntype Props = {\n  /**\n   * Data to render, could be almost anything as the various event interfaces\n   * support all sorts of data.\n   */\n  data?: null | Record<string, any> | any[];\n  /**\n   * Whether or not the data should be rendered with ContextData\n   */\n  isContextData?: boolean;\n  /**\n   * Should the keys be sorted.\n   */\n  isSorted?: boolean;\n  /**\n   * Should the raw text be rendered.\n   */\n  raw?: boolean;\n  /**\n   * Enable wider rendering of the keys.\n   */\n  longKeys?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void;\n};\n\n/**\n * Generic KeyValue data renderer. The V2 version\n * of this component can also render annotations\n * for datascrubbing.\n */\nfunction KeyValueList({\n  data,\n  onClick,\n  isContextData = false,\n  isSorted = true,\n  raw = false,\n  longKeys = false,\n}: Props) {\n  // TODO(dcramer): use non-string keys as reserved words (\"unauthorized\")\n  // break rendering\n\n  if (data === undefined || data === null) {\n    data = [];\n  } else if (!(data instanceof Array)) {\n    data = Object.entries(data);\n  } else {\n    data = data.filter(kv => kv !== null);\n  }\n\n  data = isSorted ? sortBy(data, [([key]) => key]) : data;\n  return (\n    <table className=\"table key-value\" onClick={onClick}>\n      <tbody>\n        {data.map(([key, value]) => {\n          if (isContextData) {\n            return [\n              <tr key={key}>\n                <TableData className=\"key\" wide={longKeys}>\n                  {key}\n                </TableData>\n                <td className=\"val\">\n                  <ContextData data={!raw ? value : JSON.stringify(value)} />\n                </td>\n              </tr>,\n            ];\n          } else {\n            return [\n              <tr key={key}>\n                <TableData className=\"key\" wide={longKeys}>\n                  {key}\n                </TableData>\n                <td className=\"val\">\n                  <pre className=\"val-string\">{'' + value || ' '}</pre>\n                </td>\n              </tr>,\n            ];\n          }\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst TableData = styled('td')<{wide: boolean}>`\n  @media (min-width: ${theme.breakpoints[2]}) {\n    max-width: ${p => (p.wide ? '620px !important' : null)};\n  }\n`;\n\nexport default KeyValueList;\n"],"sourceRoot":""}