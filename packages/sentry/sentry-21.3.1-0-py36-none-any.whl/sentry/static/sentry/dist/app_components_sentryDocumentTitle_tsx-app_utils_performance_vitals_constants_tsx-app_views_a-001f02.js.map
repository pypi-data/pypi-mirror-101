{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/views/alerts/list/header.tsx","webpack:///./app/views/alerts/list/sparkLine.tsx","webpack:///./app/views/alerts/list/row.tsx","webpack:///./app/views/alerts/list/styles.tsx","webpack:///./app/views/alerts/rules/details/constants.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"names":["SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","WEB_VITAL_DETAILS","WebVital","slug","name","t","acronym","description","poorThreshold","type","measurementType","AlertHeader","router","organization","activeTab","BorderlessHeader","StyledLayoutHeaderContent","StyledLayoutTitle","Actions","gap","iconProps","size","priority","referrer","showPermissionGuide","onClick","e","preventDefault","navigateTo","href","icon","aria-label","TabLayoutHeader","underlined","features","className","to","Layout","p","theme","breakpoints","space","ButtonBar","Sparklines","React","SparklinesLine","SparkLine","this","props","error","eventStats","SparklineError","SparkLinePlaceholder","data","map","value","Array","isArray","length","count","fallback","data-test-id","width","height","style","stroke","fill","strokeWidth","StyledSparkLine","Placeholder","makeRuleDetailsQuery","incident","timeWindowMillis","alertRule","timeWindow","minRange","API_INTERVAL_POINTS_MIN","maxRange","API_INTERVAL_POINTS_LIMIT","now","moment","startDate","dateStarted","endDate","dateClosed","incidentRange","Math","max","diff","range","min","halfRange","start","getUtcDateString","subtract","end","add","AlertListRow","getProject","memoize","projects","find","project","getIncidentMetricPreset","undefined","orgId","filteredStatus","identifier","renderBody","date","CreatedResolvedTime","status","isResolved","IncidentStatus","isWarning","color","text","tct","StatusIndicator","projectsLoaded","state","stats","started","duration","Date","as","alertLink","isIssueAlert","includes","pathname","id","query","IncidentPanelItem","Title","renderStatusIndicator","IncidentLink","ErrorLoadingStatsIcon","ProjectBadge","avatarSize","renderTimeSince","seconds","getDynamicText","fixed","AsyncComponent","overflowEllipsis","IdBadge","Link","PanelItem","fontSizeMedium","TableLayout","TitleAndSparkLine","TIME_OPTIONS","label","TimePeriod","ALERT_RULE_DETAILS_DEFAULT_PERIOD","TIME_WINDOWS","TimeWindow","TransactionFilterOptions","transactionSummaryRouteWithQuery","transaction","projectID","unselectedSeries","display","trendFunction","trendColumn","showTransactions","environment","statsPeriod","SidebarSpacer"],"mappings":"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","file":"app_components_sentryDocumentTitle_tsx-app_utils_performance_vitals_constants_tsx-app_views_a-001f02.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return <DocumentTitle title={`${docTitle} - Sentry`}>{children}</DocumentTitle>;\n}\n\nexport default SentryDocumentTitle;\n","import {t} from 'app/locale';\nimport {measurementType, WebVital} from 'app/utils/discover/fields';\nimport {Vital} from 'app/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n","import React from 'react';\nimport {InjectedRouter} from 'react-router/lib/Router';\nimport styled from '@emotion/styled';\n\nimport {navigateTo} from 'app/actionCreators/navigation';\nimport Feature from 'app/components/acl/feature';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport CreateAlertButton from 'app/components/createAlertButton';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport * as Layout from 'app/components/layouts/thirds';\nimport {IconSettings} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\n\ntype Props = {\n  router: InjectedRouter;\n  organization: Organization;\n  activeTab: 'stream' | 'rules';\n};\n\nconst AlertHeader = ({router, organization, activeTab}: Props) => {\n  /**\n   * Incidents list is currently at the organization level, but the link needs to\n   * go down to a specific project scope.\n   */\n  const handleNavigateToSettings = (e: React.MouseEvent) => {\n    e.preventDefault();\n    navigateTo(`/settings/${organization.slug}/projects/:projectId/alerts/`, router);\n  };\n\n  return (\n    <React.Fragment>\n      <BorderlessHeader>\n        <StyledLayoutHeaderContent>\n          <StyledLayoutTitle>{t('Alerts')}</StyledLayoutTitle>\n        </StyledLayoutHeaderContent>\n        <Layout.HeaderActions>\n          <Actions gap={1}>\n            <CreateAlertButton\n              organization={organization}\n              iconProps={{size: 'sm'}}\n              priority=\"primary\"\n              referrer=\"alert_stream\"\n              showPermissionGuide\n            >\n              {t('Create Alert Rule')}\n            </CreateAlertButton>\n            <Button\n              onClick={handleNavigateToSettings}\n              href=\"#\"\n              icon={<IconSettings size=\"sm\" />}\n              aria-label=\"Settings\"\n            />\n          </Actions>\n        </Layout.HeaderActions>\n      </BorderlessHeader>\n      <TabLayoutHeader>\n        <Layout.HeaderNavTabs underlined>\n          <Feature features={['incidents']} organization={organization}>\n            <li className={activeTab === 'stream' ? 'active' : ''}>\n              <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/`}>\n                {t('Metric Alerts')}\n              </GlobalSelectionLink>\n            </li>\n          </Feature>\n          <li className={activeTab === 'rules' ? 'active' : ''}>\n            <GlobalSelectionLink to={`/organizations/${organization.slug}/alerts/rules/`}>\n              {t('Alert Rules')}\n            </GlobalSelectionLink>\n          </li>\n        </Layout.HeaderNavTabs>\n      </TabLayoutHeader>\n    </React.Fragment>\n  );\n};\n\nexport default AlertHeader;\n\nconst BorderlessHeader = styled(Layout.Header)`\n  border-bottom: 0;\n\n  /* Not enough buttons to change direction for mobile view */\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    flex-direction: row;\n  }\n`;\n\nconst StyledLayoutHeaderContent = styled(Layout.HeaderContent)`\n  margin-bottom: 0;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n\nconst TabLayoutHeader = styled(Layout.Header)`\n  padding-top: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints[1]}) {\n    padding-top: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  height: 32px;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Placeholder from 'app/components/placeholder';\nimport theme from 'app/utils/theme';\nimport {IncidentStats} from 'app/views/alerts/types';\n\n// Height of sparkline\nconst SPARKLINE_HEIGHT = 38;\n\ntype Props = {\n  className?: string;\n  eventStats: IncidentStats['eventStats'];\n  error?: React.ReactNode;\n};\n\nconst Sparklines = React.lazy(\n  () => import(/* webpackChunkName: \"Sparklines\" */ 'app/components/sparklines')\n);\nconst SparklinesLine = React.lazy(\n  () => import(/* webpackChunkName: \"SparklinesLine\" */ 'app/components/sparklines/line')\n);\n\nclass SparkLine extends React.Component<Props> {\n  render() {\n    const {className, error, eventStats} = this.props;\n\n    if (error) {\n      return <SparklineError error={error} />;\n    }\n\n    if (!eventStats) {\n      return <SparkLinePlaceholder />;\n    }\n\n    const data = eventStats.data.map(([, value]) =>\n      value && Array.isArray(value) && value.length ? value[0].count || 0 : 0\n    );\n\n    return (\n      <React.Suspense fallback={<SparkLinePlaceholder />}>\n        <div data-test-id=\"incident-sparkline\" className={className}>\n          <Sparklines data={data} width={100} height={32}>\n            <SparklinesLine\n              style={{stroke: theme.gray300, fill: 'none', strokeWidth: 2}}\n            />\n          </Sparklines>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nconst StyledSparkLine = styled(SparkLine)`\n  flex-shrink: 0;\n  width: 100%;\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparkLinePlaceholder = styled(Placeholder)`\n  height: ${SPARKLINE_HEIGHT}px;\n`;\n\nconst SparklineError = styled(SparkLinePlaceholder)`\n  align-items: center;\n  line-height: 1;\n`;\n\nexport default StyledSparkLine;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\nimport moment from 'moment';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport Duration from 'app/components/duration';\nimport ErrorBoundary from 'app/components/errorBoundary';\nimport IdBadge from 'app/components/idBadge';\nimport Link from 'app/components/links/link';\nimport {PanelItem} from 'app/components/panels';\nimport TimeSince from 'app/components/timeSince';\nimport Tooltip from 'app/components/tooltip';\nimport {IconWarning} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcDateString} from 'app/utils/dates';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport theme from 'app/utils/theme';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from '../rules/details/constants';\nimport {Incident, IncidentStats, IncidentStatus} from '../types';\nimport {getIncidentMetricPreset, isIssueAlert} from '../utils';\n\nimport SparkLine from './sparkLine';\nimport {TableLayout, TitleAndSparkLine} from './styles';\n\n/**\n * Retrieve the start/end for showing the graph of the metric\n * Will show at least 150 and no more than 10,000 data points\n */\nexport const makeRuleDetailsQuery = (\n  incident: Incident\n): {start: string; end: string} => {\n  const {timeWindow} = incident.alertRule;\n  const timeWindowMillis = timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n};\n\ntype Props = {\n  incident: Incident;\n  projects: Project[];\n  projectsLoaded: boolean;\n  orgId: string;\n  filteredStatus: 'open' | 'closed';\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  stats: IncidentStats;\n} & AsyncComponent['state'];\n\nclass AlertListRow extends AsyncComponent<Props, State> {\n  get metricPreset() {\n    const {incident} = this.props;\n    return incident ? getIncidentMetricPreset(incident) : undefined;\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, incident, filteredStatus} = this.props;\n\n    if (filteredStatus === 'open') {\n      return [\n        ['stats', `/organizations/${orgId}/incidents/${incident.identifier}/stats/`],\n      ];\n    }\n\n    return [];\n  }\n\n  /**\n   * Memoized function to find a project from a list of projects\n   */\n  getProject = memoize((slug: string, projects: Project[]) =>\n    projects.find(project => project.slug === slug)\n  );\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return this.renderBody();\n  }\n\n  renderTimeSince(date: string) {\n    return (\n      <CreatedResolvedTime>\n        <TimeSince date={date} />\n      </CreatedResolvedTime>\n    );\n  }\n\n  renderStatusIndicator() {\n    const {status} = this.props.incident;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const color = isResolved ? theme.gray200 : isWarning ? theme.orange300 : theme.red200;\n    const text = isResolved ? t('Resolved') : isWarning ? t('Warning') : t('Critical');\n\n    return (\n      <Tooltip title={tct('Status: [text]', {text})}>\n        <StatusIndicator color={color} />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {\n      incident,\n      orgId,\n      projectsLoaded,\n      projects,\n      filteredStatus,\n      organization,\n    } = this.props;\n    const {error, stats} = this.state;\n    const started = moment(incident.dateStarted);\n    const duration = moment\n      .duration(moment(incident.dateClosed || new Date()).diff(started))\n      .as('seconds');\n    const slug = incident.projects[0];\n\n    const hasRedesign =\n      incident.alertRule &&\n      !isIssueAlert(incident.alertRule) &&\n      organization.features.includes('alert-details-redesign');\n\n    const alertLink = hasRedesign\n      ? {\n          pathname: `/organizations/${orgId}/alerts/rules/details/${incident.alertRule?.id}/`,\n          query: makeRuleDetailsQuery(incident),\n        }\n      : {\n          pathname: `/organizations/${orgId}/alerts/${incident.identifier}/`,\n        };\n\n    return (\n      <ErrorBoundary>\n        <IncidentPanelItem>\n          <TableLayout status={filteredStatus}>\n            <TitleAndSparkLine status={filteredStatus}>\n              <Title>\n                {this.renderStatusIndicator()}\n                <IncidentLink to={alertLink}>Alert #{incident.id}</IncidentLink>\n                {incident.title}\n              </Title>\n\n              {filteredStatus === 'open' && (\n                <SparkLine\n                  error={error && <ErrorLoadingStatsIcon />}\n                  eventStats={stats?.eventStats}\n                />\n              )}\n            </TitleAndSparkLine>\n\n            <ProjectBadge\n              avatarSize={18}\n              project={!projectsLoaded ? {slug} : this.getProject(slug, projects)}\n            />\n\n            {this.renderTimeSince(incident.dateStarted)}\n\n            {filteredStatus === 'closed' && (\n              <Duration seconds={getDynamicText({value: duration, fixed: 1200})} />\n            )}\n\n            {filteredStatus === 'closed' &&\n              incident.dateClosed &&\n              this.renderTimeSince(incident.dateClosed)}\n          </TableLayout>\n        </IncidentPanelItem>\n      </ErrorBoundary>\n    );\n  }\n}\n\nfunction ErrorLoadingStatsIcon() {\n  return (\n    <Tooltip title={t('Error loading alert stats')}>\n      <IconWarning />\n    </Tooltip>\n  );\n}\n\nconst CreatedResolvedTime = styled('div')`\n  ${overflowEllipsis}\n  line-height: 1.4;\n  display: flex;\n  align-items: center;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst StatusIndicator = styled('div')<{color: string}>`\n  width: 10px;\n  height: 12px;\n  background: ${p => p.color};\n  display: inline-block;\n  border-top-right-radius: 40%;\n  border-bottom-right-radius: 40%;\n  margin-bottom: -1px;\n`;\n\nconst Title = styled('span')`\n  ${overflowEllipsis}\n`;\n\nconst IncidentLink = styled(Link)`\n  padding: 0 ${space(1)};\n`;\n\nconst IncidentPanelItem = styled(PanelItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1.5)} ${space(2)} ${space(1.5)} 0;\n`;\n\nexport default AlertListRow;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst TableLayout = styled('div')<{status: 'open' | 'closed'}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.status === 'open' ? '4fr 1fr 2fr' : '3fr 2fr 2fr 1fr 2fr'};\n  grid-column-gap: ${space(1.5)};\n  width: 100%;\n  align-items: center;\n`;\n\nconst TitleAndSparkLine = styled('div')<{status: 'open' | 'closed'}>`\n  display: ${p => (p.status === 'open' ? 'grid' : 'flex')};\n  grid-gap: ${space(1)};\n  grid-template-columns: auto 120px;\n  align-items: center;\n  padding-right: ${space(2)};\n  overflow: hidden;\n`;\n\nexport {TableLayout, TitleAndSparkLine};\n","import {t} from 'app/locale';\nimport {SelectValue} from 'app/types';\nimport {TimePeriod, TimeWindow} from 'app/views/settings/incidentRules/types';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n];\n\nexport const ALERT_RULE_DETAILS_DEFAULT_PERIOD = TimePeriod.ONE_DAY;\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n};\n\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n","import styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport space from 'app/styles/space';\n\nimport {DisplayModes} from './charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n}: {\n  orgSlug: string;\n  transaction: string;\n  query: Query;\n  display?: DisplayModes;\n  trendFunction?: string;\n  trendColumn?: string;\n  unselectedSeries?: string | string[];\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n    },\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"sourceRoot":""}