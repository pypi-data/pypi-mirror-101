{"version":3,"sources":["webpack:///./app/components/modals/reprocessEventModal.tsx"],"names":["impacts","tct","strong","link","href","t","remainingEventsChoices","ReprocessingEventModal","state","maxEvents","undefined","handleSuccess","closeModal","props","window","location","reload","handleMaxEventsChange","setState","Number","addErrorMessage","this","organization","Header","Body","groupId","orgSlug","slug","endpoint","title","closeButton","data-test-id","Introduction","StyledList","symbol","map","impact","index","key","submitLabel","apiEndpoint","apiMethod","initialData","remainingEvents","onSubmitSuccess","onSubmitError","handleError","onCancel","footerClass","name","label","help","placeholder","onChange","min","orientInline","choices","disabled","React","p","theme","fontSizeLarge","List","space","fontSizeMedium"],"mappings":"0qCAeA,IAAMA,EAAU,EACdC,QACE,6LACA,CAACC,QAAQ,0BAEXD,QACE,gKACA,CACEC,QAAQ,uBACRC,MACE,QAAC,IAAD,CAAcC,KAAK,uGAIzBH,QACE,iKACA,CAACC,QAAQ,0BAEXG,OAAE,6EACFA,OACE,iHAIEC,EAA6C,CACjD,CAAC,QAAQD,OAAE,SACX,CAAC,UAAUA,OAAE,YAcTE,E,2kBACJC,MAAe,CAACC,eAAWC,G,EAE3BC,cAAgB,YAGdC,EAFqB,EAAKC,MAAnBD,cAGPE,OAAOC,SAASC,U,EAOlBC,sBAAwB,SAACR,GACvB,EAAKS,SAAS,CAACT,UAAWU,OAAOV,SAAcC,K,yCALjD,YACEU,SAAgBf,OAAE,oD,oBAOpB,WAAS,MACmDgB,KAAKR,MAAxDS,EADA,EACAA,aAAcC,EADd,EACcA,OAAQC,EADtB,EACsBA,KAAMZ,EAD5B,EAC4BA,WAAYa,EADxC,EACwCA,QACxChB,EAAaY,KAAKb,MAAlBC,UACDiB,EAAUJ,EAAaK,KACvBC,EAAW,kBAAH,OAAqBF,EAArB,mBAAuCD,EAAvC,kBACRI,GAAQxB,OAAE,oBAEhB,OACE,QAAC,WAAD,MACE,QAACkB,EAAD,CAAQO,aAAW,IACjB,gBAAMC,eAAa,eAAeF,KAEpC,QAACL,EAAD,MACE,QAACQ,EAAD,MACG3B,OACC,2JAGJ,QAAC4B,EAAD,CAAYC,OAAO,UAChBlC,EAAQmC,KAAI,SAACC,EAAQC,GAAT,OACX,QAAC,IAAD,CAAUC,IAAKD,GAAQD,QAG3B,QAACJ,EAAD,MACG/B,QACC,iFACA,CACEE,MACE,QAAC,IAAD,CAAcC,KAAK,sEAK3B,QAAC,IAAD,CACEmC,YAAaV,EACbW,YAAaZ,EACba,UAAU,OACVC,YAAa,CAACjC,eAAWC,EAAWiC,gBAAiB,QACrDC,gBAAiBvB,KAAKV,cACtBkC,cAAexB,KAAKyB,YACpBC,SAAUnC,EACVoC,YAAY,iBAEZ,QAAC,IAAD,CACEC,KAAK,YACLC,OAAO7C,OAAE,sCACT8C,MAAM9C,OAAE,kEACR+C,aAAa/C,OAAE,wBACfgD,SAAUhC,KAAKJ,sBACfqC,IAAK,KAGP,QAAC,IAAD,CACEC,cAAY,EACZL,OAAO7C,OAAE,oBACT8C,MAAM9C,OAAE,wDACR4C,KAAK,kBACLO,QAASlD,EACTmD,cAAwB/C,IAAdD,W,GA5EaiD,aAA/BnD,E,qCAqFN,UAEA,IAAMyB,GAAe,OAAO,IAAP,0CAAH,cACH,SAAA2B,GAAC,OAAIA,EAAEC,MAAMC,gBADV,KAIZ5B,GAAa,OAAO6B,IAAP,wCAAH,aACFC,OAAM,GADJ,mBAEGA,OAAM,GAFT,eAGD,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,iBAHZ","file":"ReprocessEventModal.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\nimport ExternalLink from 'app/components/links/externalLink';\nimport List from 'app/components/list';\nimport ListItem from 'app/components/list/listItem';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Group, Organization} from 'app/types';\nimport Form from 'app/views/settings/components/forms/form';\nimport NumberField from 'app/views/settings/components/forms/numberField';\nimport RadioField from 'app/views/settings/components/forms/radioField';\n\nconst impacts = [\n  tct(\n    '[strong:Data glitches.] During reprocessing you may observe temporary data inconsistencies across the entire product. Those inconsistencies disappear the moment reprocessing is complete.',\n    {strong: <strong />}\n  ),\n  tct(\n    '[strong:Attachment storage needs to be enabled.] If your events come from minidumps or unreal crash reports, you must have [link:attachment storage] enabled.',\n    {\n      strong: <strong />,\n      link: (\n        <ExternalLink href=\"https://docs.sentry.io/platforms/native/enriching-events/attachments/#crash-reports-and-privacy\" />\n      ),\n    }\n  ),\n  tct(\n    \"[strong:Quota applies.] Every event you choose to reprocess will count against your plan's quota a second time. Rate limits and spike protection do not apply.\",\n    {strong: <strong />}\n  ),\n  t('Please wait one hour before attempting to reprocess missing debug files.'),\n  t(\n    'Reprocessed events will not trigger issue alerts, and reprocessed events are not subject to data forwarding.'\n  ),\n];\n\nconst remainingEventsChoices: [string, string][] = [\n  ['keep', t('Keep')],\n  ['delete', t('Delete')],\n];\n\nexport type ReprocessEventModalOptions = {\n  groupId: Group['id'];\n  organization: Organization;\n};\n\ntype Props = ModalRenderProps & ReprocessEventModalOptions;\n\ntype State = {\n  maxEvents?: number;\n};\n\nclass ReprocessingEventModal extends React.Component<Props, State> {\n  state: State = {maxEvents: undefined};\n\n  handleSuccess = () => {\n    const {closeModal} = this.props;\n\n    closeModal();\n    window.location.reload();\n  };\n\n  handleError() {\n    addErrorMessage(t('Failed to reprocess. Please check your input.'));\n  }\n\n  handleMaxEventsChange = (maxEvents: string) => {\n    this.setState({maxEvents: Number(maxEvents) || undefined});\n  };\n\n  render() {\n    const {organization, Header, Body, closeModal, groupId} = this.props;\n    const {maxEvents} = this.state;\n    const orgSlug = organization.slug;\n    const endpoint = `/organizations/${orgSlug}/issues/${groupId}/reprocessing/`;\n    const title = t('Reprocess Events');\n\n    return (\n      <React.Fragment>\n        <Header closeButton>\n          <span data-test-id=\"modal-title\">{title}</span>\n        </Header>\n        <Body>\n          <Introduction>\n            {t(\n              'Reprocessing applies any new debug files or grouping configuration to an Issue. Before you give it a try, you should probably consider these impacts:'\n            )}\n          </Introduction>\n          <StyledList symbol=\"bullet\">\n            {impacts.map((impact, index) => (\n              <ListItem key={index}>{impact}</ListItem>\n            ))}\n          </StyledList>\n          <Introduction>\n            {tct(\n              'For more information please refer to [link:the documentation on reprocessing.]',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/error-monitoring/reprocessing/\" />\n                ),\n              }\n            )}\n          </Introduction>\n          <Form\n            submitLabel={title}\n            apiEndpoint={endpoint}\n            apiMethod=\"POST\"\n            initialData={{maxEvents: undefined, remainingEvents: 'keep'}}\n            onSubmitSuccess={this.handleSuccess}\n            onSubmitError={this.handleError}\n            onCancel={closeModal}\n            footerClass=\"modal-footer\"\n          >\n            <NumberField\n              name=\"maxEvents\"\n              label={t('Number of events to be reprocessed')}\n              help={t('If you set a limit, we will reprocess your most recent events.')}\n              placeholder={t('Reprocess all events')}\n              onChange={this.handleMaxEventsChange}\n              min={1}\n            />\n\n            <RadioField\n              orientInline\n              label={t('Remaining events')}\n              help={t('What to do with the events that are not reprocessed.')}\n              name=\"remainingEvents\"\n              choices={remainingEventsChoices}\n              disabled={maxEvents === undefined}\n            />\n          </Form>\n        </Body>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ReprocessingEventModal;\n\nconst Introduction = styled('p')`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst StyledList = styled(List)`\n  grid-gap: ${space(1)};\n  margin-bottom: ${space(4)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n"],"sourceRoot":""}