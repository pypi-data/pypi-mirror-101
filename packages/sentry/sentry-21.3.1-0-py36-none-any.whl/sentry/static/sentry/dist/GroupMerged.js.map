{"version":3,"sources":["webpack:///./app/actions/groupingActions.tsx","webpack:///./app/stores/groupingStore.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedItem.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedToolbar.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/mergedList.tsx","webpack:///./app/views/organizationGroupDetails/groupMerged/index.tsx"],"names":["Reflux","storeConfig","listenables","GroupingActions","api","Client","init","state","this","getInitialState","Object","entries","forEach","key","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","mergedLinks","mergeDisabled","loading","error","setStateForId","map","idOrIds","newState","Array","isArray","id","mergedState","has","get","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","jqXHR","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","item","similar","issue","scoreMap","isBelowThreshold","scores","keys","find","score","checkBelowThreshold","scoresByInterface","scoreKey","reduce","acc","String","split","interfaceName","push","aggregate","avg","sum","all","then","resultsArray","items","onToggleMerge","checked","undefined","includes","triggerMergeState","onToggleUnmerge","fingerprint","eventId","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","ids","Error","addLoadingMessage","query","addSuccessMessage","clear","addErrorMessage","complete","onMerge","params","projectId","orgId","mergeGroups","itemIds","merge","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","pick","MergedItem","listener","GroupingStore","onGroupChange","props","stateForId","setState","prevState","handleToggleEvents","handleToggle","disabled","event","preventDefault","organization","checkboxDisabled","MergedGroup","Controls","expanded","ActionWrapper","onClick","onChange","handleCheckClick","Fingerprint","handleLabelClick","htmlFor","Collapse","direction","MergedEventList","className","EventDetails","hideIcons","hideLevel","React","p","space","theme","innerBorder","gray100","text","familyMono","MergedToolbar","updateObj","handleShowDiff","project","baseEventId","targetEventId","openDiffModal","targetIssueId","baseIssueId","stopPropagation","onToggleCollapse","unmergeCount","hasButtons","onConfirm","message","t","title","CompareButton","Button","MergedList","fingerprints","pageLinks","fingerprintsWithLatestEvent","count","slug","withOrganization","GroupMergedView","location","onGroupingChange","fetchData","getEndpoint","handleUnmerge","nextProps","search","callIfFunction","limit","queryString","isLoading","isError","isLoadedSuccessfully","type","onRetry"],"mappings":"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","file":"GroupMerged.js","sourcesContent":["import Reflux from 'reflux';\n\n// Actions for \"Grouping\" view - for merging/unmerging events/issues\nconst GroupingActions = Reflux.createActions([\n  'fetch',\n  'showAllSimilarItems',\n  'toggleUnmerge',\n  'toggleMerge',\n  'unmerge',\n  'merge',\n  'toggleCollapseFingerprint',\n  'toggleCollapseFingerprints',\n]);\nexport default GroupingActions;\n","import pick from 'lodash/pick';\nimport Reflux from 'reflux';\n\nimport {mergeGroups} from 'app/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport GroupingActions from 'app/actions/groupingActions';\nimport {Client} from 'app/api';\nimport {Group, Organization, Project} from 'app/types';\nimport {Event} from 'app/types/event';\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = (scores = {}) => {\n  const scoreKeys = Object.keys(scores);\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\ntype State = {\n  // List of fingerprints that belong to issue\n  mergedItems: [];\n  // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n  unmergeList: Map<any, any>;\n  // Map of state for each fingerprint (i.e. \"collapsed\")\n  unmergeState: Map<any, any>;\n  // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n  unmergeDisabled: boolean;\n  // If \"Collapse All\" was just used, this will be true\n  unmergeLastCollapsed: boolean;\n  // \"Compare\" button state\n  enableFingerprintCompare: boolean;\n  similarItems: [];\n  filteredSimilarItems: [];\n  similarLinks: string;\n  mergeState: Map<any, any>;\n  mergeList: Array<string>;\n  mergedLinks: string;\n  mergeDisabled: boolean;\n  loading: boolean;\n  error: boolean;\n};\n\ntype ScoreMap = Record<string, number | null>;\n\nexport type Fingerprint = {\n  id: string;\n  latestEvent: Event;\n  state?: string;\n};\n\ntype ResponseProcessors = {\n  merged: (item: Fingerprint) => Fingerprint;\n  similar: (\n    data: [Group, ScoreMap]\n  ) => {\n    issue: Group;\n    score: ScoreMap;\n    scoresByInterface: Record<string, Array<[string, number | null]>>;\n    aggregate: Record<string, number>;\n    isBelowThreshold: boolean;\n  };\n};\n\ntype DataKey = keyof ResponseProcessors;\n\ntype ResultsAsArrayDataMerged = Array<Parameters<ResponseProcessors['merged']>[0]>;\n\ntype ResultsAsArrayDataSimilar = Array<Parameters<ResponseProcessors['similar']>[0]>;\n\ntype ResultsAsArray = Array<{\n  dataKey: DataKey;\n  data: ResultsAsArrayDataMerged | ResultsAsArrayDataSimilar;\n  links: string | null;\n}>;\n\ntype IdState = {\n  busy?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n};\n\ntype GroupingStoreInterface = Reflux.StoreDefinition & {\n  init: () => void;\n  getInitialState: () => State;\n  setStateForId: (\n    map: Map<string, IdState>,\n    idOrIds: Array<string> | string,\n    newState: IdState\n  ) => Array<IdState>;\n  isAllUnmergedSelected: () => boolean;\n  onFetch: (\n    toFetchArray?: Array<{\n      dataKey: DataKey;\n      endpoint: string;\n      queryParams?: Record<string, any>;\n    }>\n  ) => Promise<any>;\n  onToggleMerge: (id: string) => void;\n  onToggleUnmerge: (props: [string, string] | string) => void;\n  onUnmerge: (props: {\n    groupId: Group['id'];\n    loadingMessage?: string;\n    successMessage?: string;\n    errorMessage?: string;\n  }) => void;\n  onMerge: (props: {\n    params?: {\n      orgId: Organization['id'];\n      projectId: Project['id'];\n      groupId: Group['id'];\n    };\n    projectId?: Project['id'];\n    query?: string;\n  }) => undefined | Promise<any>;\n  onToggleCollapseFingerprints: () => void;\n  onToggleCollapseFingerprint: (fingerprint: string) => void;\n  triggerFetchState: () => Pick<\n    State,\n    | 'similarItems'\n    | 'filteredSimilarItems'\n    | 'mergedItems'\n    | 'mergedLinks'\n    | 'similarLinks'\n    | 'mergeState'\n    | 'unmergeState'\n    | 'loading'\n    | 'error'\n  >;\n  triggerUnmergeState: () => Pick<\n    State,\n    | 'unmergeDisabled'\n    | 'unmergeState'\n    | 'unmergeList'\n    | 'enableFingerprintCompare'\n    | 'unmergeLastCollapsed'\n  >;\n  triggerMergeState: () => Pick<State, 'mergeState' | 'mergeDisabled' | 'mergeList'>;\n};\n\ntype Internals = {\n  api: Client;\n};\n\ntype GroupingStore = Reflux.Store & GroupingStoreInterface;\n\nconst storeConfig: Reflux.StoreDefinition & Internals & GroupingStoreInterface = {\n  listenables: [GroupingActions],\n  api: new Client(),\n\n  init() {\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: [],\n      mergedLinks: '',\n      mergeDisabled: false,\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = {...state, ...newState};\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      (Array.from(this.unmergeState.values()) as Array<IdState>).filter(\n        ({busy}) => busy\n      ) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          this.api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, jqXHR) => {\n              resolve({\n                dataKey,\n                data,\n                links: jqXHR ? jqXHR.getResponseHeader('Link') : null,\n              });\n            },\n            error: err => {\n              const error = err.responseJSON?.detail || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors: ResponseProcessors = {\n      merged: item => {\n        // Check for locked items\n        this.setStateForId(this.unmergeState, item.id, {\n          busy: item.state === 'locked',\n        });\n        return item;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        // Note: for v2, the interface is always \"similarity\". When v2 is\n        // rolled out we can get rid of this grouping entirely.\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // v1 layout: '<interface>:...'\n            const [interfaceName] = String(scoreKey).split(':');\n\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        (resultsArray as ResultsAsArray).forEach(({dataKey, data, links}) => {\n          const items =\n            dataKey === 'similar'\n              ? (data as ResultsAsArrayDataSimilar).map(responseProcessors[dataKey])\n              : (data as ResultsAsArrayDataMerged).map(responseProcessors[dataKey]);\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked = false;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) ? this.mergeState.get(id) : undefined;\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.includes(id)) {\n      this.mergeList = this.mergeList.filter(item => item !== id);\n    } else {\n      this.mergeList = [...this.mergeList, id];\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked = false;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected\n    this.unmergeDisabled = this.unmergeList.size === 0 || this.isAllUnmergedSelected();\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys()) as Array<string>;\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      this.api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful merge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    if (!params) {\n      return undefined;\n    }\n\n    const ids = this.mergeList;\n\n    this.mergeDisabled = true;\n\n    this.setStateForId(this.mergeState, ids as Array<string>, {\n      busy: true,\n    });\n\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n      const {orgId, groupId} = params;\n\n      mergeGroups(\n        this.api,\n        {\n          orgId,\n          projectId: projectId || params.projectId,\n          itemIds: [...ids, groupId] as Array<number>,\n          query,\n        },\n        {\n          success: data => {\n            if (data?.merge?.parent) {\n              this.trigger({\n                mergedParent: data.merge.parent,\n              });\n            }\n\n            // Hide rows after successful merge\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: false,\n              busy: true,\n            });\n            this.mergeList = [];\n          },\n          error: () => {\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: true,\n              busy: false,\n            });\n          },\n          complete: () => {\n            this.mergeDisabled = false;\n            resolve(this.triggerMergeState());\n          },\n        }\n      );\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n};\n\nconst GroupingStore = Reflux.createStore(storeConfig) as GroupingStore;\n\nexport default GroupingStore;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport GroupingActions from 'app/actions/groupingActions';\nimport Checkbox from 'app/components/checkbox';\nimport EventOrGroupHeader from 'app/components/eventOrGroupHeader';\nimport {IconChevron} from 'app/icons';\nimport GroupingStore from 'app/stores/groupingStore';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport {Event} from 'app/types/event';\n\ntype Props = {\n  event: Event;\n  organization: Organization;\n  fingerprint: string;\n  disabled: boolean;\n};\n\ntype State = {\n  collapsed: boolean;\n  checked: boolean;\n  busy: boolean;\n};\n\nclass MergedItem extends React.Component<Props, State> {\n  state: State = {\n    collapsed: false,\n    checked: false,\n    busy: false,\n  };\n\n  componentWillUnmount() {\n    this.listener?.();\n  }\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  onGroupChange = ({unmergeState}) => {\n    if (!unmergeState) {\n      return;\n    }\n\n    const {fingerprint} = this.props;\n    const stateForId = unmergeState.has(fingerprint)\n      ? unmergeState.get(fingerprint)\n      : undefined;\n\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n\n      this.setState(prevState => ({...prevState, [key]: stateForId[key]}));\n    });\n  };\n\n  handleToggleEvents = () => {\n    const {fingerprint} = this.props;\n    GroupingActions.toggleCollapseFingerprint(fingerprint);\n  };\n\n  // Disable default behavior of toggling checkbox\n  handleLabelClick(event: React.MouseEvent) {\n    event.preventDefault();\n  }\n\n  handleToggle = () => {\n    const {disabled, fingerprint, event} = this.props;\n\n    if (disabled || this.state.busy) {\n      return;\n    }\n\n    // clicking anywhere in the row will toggle the checkbox\n    GroupingActions.toggleUnmerge([fingerprint, event.id]);\n  };\n\n  handleCheckClick() {\n    // noop because of react warning about being a controlled input without `onChange`\n    // we handle change via row click\n  }\n\n  render() {\n    const {disabled, event, fingerprint, organization} = this.props;\n    const {collapsed, busy, checked} = this.state;\n    const checkboxDisabled = disabled || busy;\n\n    // `event` can be null if last event w/ fingerprint is not within retention period\n    return (\n      <MergedGroup busy={busy}>\n        <Controls expanded={!collapsed}>\n          <ActionWrapper onClick={this.handleToggle}>\n            <Checkbox\n              id={fingerprint}\n              value={fingerprint}\n              checked={checked}\n              disabled={checkboxDisabled}\n              onChange={this.handleCheckClick}\n            />\n\n            <Fingerprint onClick={this.handleLabelClick} htmlFor={fingerprint}>\n              {fingerprint}\n            </Fingerprint>\n          </ActionWrapper>\n\n          <div>\n            <Collapse onClick={this.handleToggleEvents}>\n              <IconChevron direction={collapsed ? 'down' : 'up'} size=\"xs\" />\n            </Collapse>\n          </div>\n        </Controls>\n\n        {!collapsed && (\n          <MergedEventList className=\"event-list\">\n            {event && (\n              <EventDetails className=\"event-details\">\n                <EventOrGroupHeader\n                  data={event}\n                  organization={organization}\n                  hideIcons\n                  hideLevel\n                />\n              </EventDetails>\n            )}\n          </MergedEventList>\n        )}\n      </MergedGroup>\n    );\n  }\n}\n\nconst MergedGroup = styled('div')<{busy: boolean}>`\n  ${p => p.busy && 'opacity: 0.2'};\n`;\n\nconst ActionWrapper = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  align-items: center;\n  gap: ${space(1)};\n\n  /* Can't use styled components for this because of broad selector */\n  input[type='checkbox'] {\n    margin: 0;\n  }\n`;\n\nconst Controls = styled('div')<{expanded: boolean}>`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid ${p => p.theme.innerBorder};\n  background-color: ${p => p.theme.gray100};\n  padding: ${space(0.5)} ${space(1)};\n  ${p => p.expanded && `border-bottom: 1px solid ${p.theme.innerBorder}`};\n\n  ${MergedGroup} {\n    &:first-child & {\n      border-top: none;\n    }\n    &:last-child & {\n      border-top: none;\n      border-bottom: 1px solid ${p => p.theme.innerBorder};\n    }\n  }\n`;\n\nconst Fingerprint = styled('label')`\n  font-family: ${p => p.theme.text.familyMono};\n\n  ${/* sc-selector */ Controls} & {\n    font-weight: 400;\n    margin: 0;\n  }\n`;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n\nconst MergedEventList = styled('div')`\n  overflow: hidden;\n  border: none;\n`;\n\nconst EventDetails = styled('div')`\n  display: flex;\n  justify-content: space-between;\n\n  .event-list & {\n    padding: ${space(1)};\n  }\n`;\n\nexport default MergedItem;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {openDiffModal} from 'app/actionCreators/modal';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport {PanelHeader} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport GroupingStore from 'app/stores/groupingStore';\nimport space from 'app/styles/space';\nimport {Group, Organization, Project} from 'app/types';\n\ntype Props = {\n  orgId: Organization['slug'];\n  project: Project;\n  groupId: Group['id'];\n  onUnmerge: () => void;\n  onToggleCollapse: () => void;\n};\n\ntype State = {\n  unmergeList: Map<any, any>;\n  unmergeLastCollapsed: boolean;\n  unmergeDisabled: boolean;\n  enableFingerprintCompare: boolean;\n};\n\nclass MergedToolbar extends React.Component<Props, State> {\n  state: State = this.getInitialState();\n\n  getInitialState() {\n    const {\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n      enableFingerprintCompare,\n    } = GroupingStore;\n\n    return {\n      enableFingerprintCompare,\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n    };\n  }\n\n  componentWillUnmount() {\n    this.listener?.();\n  }\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  onGroupChange = updateObj => {\n    const allowedKeys = [\n      'unmergeLastCollapsed',\n      'unmergeDisabled',\n      'unmergeList',\n      'enableFingerprintCompare',\n    ];\n\n    this.setState(pick(updateObj, allowedKeys));\n  };\n\n  handleShowDiff = (event: React.MouseEvent) => {\n    const {groupId, project, orgId} = this.props;\n    const {unmergeList} = this.state;\n\n    const entries = unmergeList.entries();\n\n    // `unmergeList` should only have 2 items in map\n    if (unmergeList.size !== 2) {\n      return;\n    }\n\n    // only need eventId, not fingerprint\n    const [baseEventId, targetEventId] = Array.from(entries).map(\n      ([, eventId]) => eventId\n    );\n\n    openDiffModal({\n      targetIssueId: groupId,\n      project,\n      baseIssueId: groupId,\n      orgId,\n      baseEventId,\n      targetEventId,\n    });\n\n    event.stopPropagation();\n  };\n\n  render() {\n    const {onUnmerge, onToggleCollapse} = this.props;\n    const {\n      unmergeList,\n      unmergeLastCollapsed,\n      unmergeDisabled,\n      enableFingerprintCompare,\n    } = this.state;\n    const unmergeCount = (unmergeList && unmergeList.size) || 0;\n\n    return (\n      <PanelHeader hasButtons>\n        <div>\n          <Confirm\n            disabled={unmergeDisabled}\n            onConfirm={onUnmerge}\n            message={t(\n              'These events will be unmerged and grouped into a new issue. Are you sure you want to unmerge these events?'\n            )}\n          >\n            <Button size=\"small\" title={t(`Unmerging ${unmergeCount} events`)}>\n              {t('Unmerge')} ({unmergeCount || 0})\n            </Button>\n          </Confirm>\n\n          <CompareButton\n            size=\"small\"\n            disabled={!enableFingerprintCompare}\n            onClick={this.handleShowDiff}\n          >\n            {t('Compare')}\n          </CompareButton>\n        </div>\n        <Button size=\"small\" onClick={onToggleCollapse}>\n          {unmergeLastCollapsed ? t('Expand All') : t('Collapse All')}\n        </Button>\n      </PanelHeader>\n    );\n  }\n}\n\nexport default MergedToolbar;\n\nconst CompareButton = styled(Button)`\n  margin-left: ${space(1)};\n`;\n","import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Pagination from 'app/components/pagination';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport QueryCount from 'app/components/queryCount';\nimport {t} from 'app/locale';\nimport {Fingerprint} from 'app/stores/groupingStore';\nimport {Group, Organization, Project} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport MergedItem from './mergedItem';\nimport MergedToolbar from './mergedToolbar';\n\ntype Props = {\n  /**\n   * From GroupMergedView -> handleUnmerge\n   */\n  onUnmerge: () => void;\n  /*\n   * From GroupingActions.toggleCollapseFingerprints\n   */\n  onToggleCollapse: () => void;\n  organization: Organization;\n  groupId: Group['id'];\n  project: Project;\n  fingerprints?: Fingerprint[];\n  pageLinks?: string;\n};\n\nfunction MergedList({\n  fingerprints = [],\n  pageLinks,\n  onToggleCollapse,\n  onUnmerge,\n  organization,\n  groupId,\n  project,\n}: Props) {\n  const fingerprintsWithLatestEvent = fingerprints.filter(\n    ({latestEvent}) => !!latestEvent\n  );\n  const hasResults = fingerprintsWithLatestEvent.length > 0;\n\n  if (!hasResults) {\n    return (\n      <Panel>\n        <EmptyStateWarning>\n          <p>{t(\"There don't seem to be any hashes for this issue.\")}</p>\n        </EmptyStateWarning>\n      </Panel>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <h2>\n        <span>{t('Merged fingerprints with latest event')}</span>{' '}\n        <QueryCount count={fingerprintsWithLatestEvent.length} />\n      </h2>\n\n      <Panel>\n        <MergedToolbar\n          onToggleCollapse={onToggleCollapse}\n          onUnmerge={onUnmerge}\n          orgId={organization.slug}\n          project={project}\n          groupId={groupId}\n        />\n\n        <PanelBody>\n          {fingerprintsWithLatestEvent.map(({id, latestEvent}) => (\n            <MergedItem\n              key={id}\n              organization={organization}\n              disabled={fingerprintsWithLatestEvent.length === 1}\n              event={latestEvent}\n              fingerprint={id}\n            />\n          ))}\n        </PanelBody>\n      </Panel>\n      {pageLinks && <Pagination pageLinks={pageLinks} />}\n    </React.Fragment>\n  );\n}\n\nexport default withOrganization(MergedList);\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as queryString from 'query-string';\n\nimport GroupingActions from 'app/actions/groupingActions';\nimport Alert from 'app/components/alert';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {t} from 'app/locale';\nimport GroupingStore, {Fingerprint} from 'app/stores/groupingStore';\nimport {Group, Organization, Project} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\n\nimport MergedList from './mergedList';\n\ntype Props = RouteComponentProps<\n  {groupId: Group['id']; orgId: Organization['slug']},\n  {}\n> & {\n  project: Project;\n};\n\ntype State = {\n  query: string;\n  loading: boolean;\n  error: boolean;\n  mergedItems: Array<Fingerprint>;\n  mergedLinks?: string;\n};\n\nclass GroupMergedView extends React.Component<Props, State> {\n  state: State = {\n    mergedItems: [],\n    loading: true,\n    error: false,\n    query: this.props.location.query.query || '',\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      const queryParams = nextProps.location.query;\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    callIfFunction(this.listener);\n  }\n\n  onGroupingChange = ({mergedItems, mergedLinks, loading, error}) => {\n    if (mergedItems) {\n      this.setState({\n        mergedItems,\n        mergedLinks,\n        loading: typeof loading !== 'undefined' ? loading : false,\n        error: typeof error !== 'undefined' ? error : false,\n      });\n    }\n  };\n\n  listener = GroupingStore.listen(this.onGroupingChange, undefined);\n\n  getEndpoint() {\n    const {params} = this.props;\n    const {groupId} = params;\n\n    const queryParams = {\n      ...this.props.location.query,\n      limit: 50,\n      query: this.state.query,\n    };\n\n    return `/issues/${groupId}/hashes/?${queryString.stringify(queryParams)}`;\n  }\n\n  fetchData = () => {\n    GroupingActions.fetch([\n      {\n        endpoint: this.getEndpoint(),\n        dataKey: 'merged',\n        queryParams: this.props.location.query,\n      },\n    ]);\n  };\n\n  handleUnmerge = () => {\n    GroupingActions.unmerge({\n      groupId: this.props.params.groupId,\n      loadingMessage: t('Unmerging events\\u2026'),\n      successMessage: t('Events successfully queued for unmerging.'),\n      errorMessage: t('Unable to queue events for unmerging.'),\n    });\n  };\n\n  render() {\n    const {project, params} = this.props;\n    const {groupId} = params;\n    const {loading: isLoading, error, mergedItems, mergedLinks} = this.state;\n    const isError = error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n\n    return (\n      <React.Fragment>\n        <Alert type=\"warning\">\n          {t(\n            'This is an experimental feature. Data may not be immediately available while we process unmerges.'\n          )}\n        </Alert>\n\n        {isLoading && <LoadingIndicator />}\n        {isError && (\n          <LoadingError\n            message={t('Unable to load merged events, please try again later')}\n            onRetry={this.fetchData}\n          />\n        )}\n\n        {isLoadedSuccessfully && (\n          <MergedList\n            project={project}\n            fingerprints={mergedItems}\n            pageLinks={mergedLinks}\n            groupId={groupId}\n            onUnmerge={this.handleUnmerge}\n            onToggleCollapse={GroupingActions.toggleCollapseFingerprints}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport {GroupMergedView};\n\nexport default GroupMergedView;\n"],"sourceRoot":""}