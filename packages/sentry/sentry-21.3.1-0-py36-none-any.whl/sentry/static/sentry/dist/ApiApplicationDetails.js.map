{"version":3,"sources":["webpack:///./app/data/forms/apiApplication.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/details.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx"],"names":["title","fields","name","type","required","label","help","setValue","value","getDynamicText","fixed","placeholder","multiline","getValue","val","extractMultilineFields","convertMultilineFieldValue","AsyncView","this","getTitle","renderComponent","AsyncComponent","props","params","appId","t","urlPrefix","ConfigStore","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","state","app","onSubmitError","addErrorMessage","location","forms","apiApplication","UnstyledSettingsPageHeader","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader"],"mappings":"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","file":"ApiApplicationDetails.js","sourcesContent":["import {convertMultilineFieldValue, extractMultilineFields} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst forms: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Application Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        help: 'e.g. My Application',\n        setValue: value => getDynamicText({value, fixed: 'CI_APPLICATION_NAME'}),\n      },\n      {\n        name: 'homepageUrl',\n        type: 'string',\n        required: false,\n        label: 'Homepage',\n        placeholder: 'e.g. https://example.com/',\n        help: \"An optional link to your application's homepage\",\n      },\n      {\n        name: 'privacyUrl',\n        type: 'string',\n        label: 'Privacy Policy',\n        placeholder: 'e.g. https://example.com/privacy',\n        help: 'An optional link to your Privacy Policy',\n      },\n      {\n        name: 'termsUrl',\n        type: 'string',\n        label: 'Terms of Service',\n        placeholder: 'e.g. https://example.com/terms',\n        help: 'An optional link to your Terms of Service agreement',\n      },\n    ],\n  },\n\n  {\n    title: 'Security',\n    fields: [\n      {\n        name: 'redirectUris',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. https://example.com/oauth/complete',\n        label: 'Authorized Redirect URIs',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'allowedOrigins',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. example.com',\n        label: 'Authorized JavaScript Origins',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default forms;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport apiApplication from 'app/data/forms/apiApplication';\nimport {t} from 'app/locale';\nimport ConfigStore from 'app/stores/configStore';\nimport {ApiApplication} from 'app/types';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport FormField from 'app/views/settings/components/forms/formField';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{appId: string}, {}>;\ntype State = {\n  app: ApiApplication;\n} & AsyncView['state'];\n\nclass ApiApplicationsDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['app', `/api-applications/${this.props.params.appId}/`]];\n  }\n\n  getTitle() {\n    return t('Application Details');\n  }\n\n  renderBody() {\n    const urlPrefix = ConfigStore.get('urlPrefix');\n\n    return (\n      <div>\n        <SettingsPageHeader title={this.getTitle()} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/api-applications/${this.props.params.appId}/`}\n          saveOnBlur\n          allowUndo\n          initialData={this.state.app}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm location={this.props.location} forms={apiApplication} />\n\n          <Panel>\n            <PanelHeader>{t('Credentials')}</PanelHeader>\n\n            <PanelBody>\n              <FormField name=\"clientID\" label=\"Client ID\">\n                {({value}) => (\n                  <div>\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_ID'})}\n                    </TextCopyInput>\n                  </div>\n                )}\n              </FormField>\n\n              <FormField\n                name=\"clientSecret\"\n                label=\"Client Secret\"\n                help={t(`Your secret is only available briefly after application creation. Make\n                  sure to save this value!`)}\n              >\n                {({value}) =>\n                  value ? (\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_SECRET'})}\n                    </TextCopyInput>\n                  ) : (\n                    <em>hidden</em>\n                  )\n                }\n              </FormField>\n\n              <FormField name=\"\" label=\"Authorization URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}\n              </FormField>\n\n              <FormField name=\"\" label=\"Token URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}\n              </FormField>\n            </PanelBody>\n          </Panel>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplicationsDetails;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n"],"sourceRoot":""}