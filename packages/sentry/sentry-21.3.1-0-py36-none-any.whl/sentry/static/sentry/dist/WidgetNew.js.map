{"version":3,"sources":["webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/dashboardsV2/widget/new/buildStep.tsx","webpack:///./app/views/dashboardsV2/widget/new/eventSteps/queries.tsx","webpack:///./app/views/dashboardsV2/widget/new/eventSteps/index.tsx","webpack:///./app/views/dashboardsV2/widget/new/utils.tsx","webpack:///./app/views/dashboardsV2/widget/new/metricSteps/queries.tsx","webpack:///./app/views/dashboardsV2/widget/new/metricSteps/index.tsx","webpack:///./app/views/dashboardsV2/widget/new/widgetNew.tsx","webpack:///./app/views/dashboardsV2/widget/new/index.tsx"],"names":["Breadcrumbs","crumbs","linkLastItem","props","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","p","theme","gray300","overflowEllipsis","textColor","space","subText","IconChevron","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","title","this","getTitle","renderComponent","AsyncComponent","BuildStep","description","children","StyledListItem","Header","Description","SubDescription","Content","ListItem","fontSizeMedium","Queries","queries","selectedProjectIds","organization","displayType","onRemoveQuery","onAddQuery","onChangeQuery","handleFieldChange","queryIndex","field","widgetQuery","value","newQuery","rightDisplayType","underQueryLimit","hideLegendAlias","DisplayType","includes","eventQuery","displayDeleteButton","displayLegendAlias","StyledField","inline","flexibleControlStateSize","stacked","Fields","projectIds","query","conditions","fields","onSearch","onBlur","useFormWrapper","type","name","required","placeholder","t","onChange","event","target","borderless","onClick","preventDefault","icon","isCircled","fieldsColumns","Field","EventSteps","eventQueries","tags","measurementKeys","measurements","amendedFieldOptions","Object","values","generateFieldOptions","tagKeys","buildStepContent","style","padding","fieldOptions","forEach","cloneDeep","withTags","Aggregation","metrics","metricTags","browser","environment","metricGroupByOptions","displayTypes","getTagValue","_query","_params","Promise","resolve","metricQuery","hasRecentSearches","maxSearchItems","supportedTags","onGetTagValues","excludeEnvironment","StyledSelectField","choices","groupBy","allowClear","aggregation","SelectField","MetricSteps","metricQueries","onChangeField","metric","String","components","Option","optionProps","inputValue","selectProps","text","DataSet","newEventQuery","orderby","newMetricQuery","dataSetChoices","WidgetNew","setState","state","tct","handleEventQueryChange","newState","set","handleMetricQueryChange","handleRemoveQuery","dataSet","EVENTS","splice","handleAddQuery","push","interval","params","routeTitleGen","orgId","selection","StyledPageContent","gap","href","priority","BuildSteps","symbol","VisualizationWrapper","options","keys","option","api","widget","isEditing","onDelete","onEdit","renderErrorMessage","errorMessage","isSorting","currentWidgetDragging","orientInline","hideControlState","METRICS","projects","withOrganization","withGlobalSelection","PageContent","List","breakpoints","WidgetNewContainer","features","renderDisabled"],"mappings":"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","file":"WidgetNew.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport Link from 'app/components/links/link';\nimport {IconChevron} from 'app/icons';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ListItem from 'app/components/list/listItem';\nimport space from 'app/styles/space';\n\ntype Props = {\n  title: string;\n  description: string;\n  children: React.ReactNode;\n};\n\nfunction BuildStep({title, description, children}: Props) {\n  return (\n    <StyledListItem>\n      <Header>\n        <Description>{title}</Description>\n        <SubDescription>{description}</SubDescription>\n      </Header>\n      <Content>{children}</Content>\n    </StyledListItem>\n  );\n}\n\nexport default BuildStep;\n\nconst StyledListItem = styled(ListItem)`\n  display: grid;\n  grid-gap: ${space(2)};\n`;\n\nconst Description = styled('h4')`\n  font-weight: 400;\n  margin-bottom: 0;\n`;\n\nconst SubDescription = styled('div')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-gap: ${space(0.5)};\n`;\n\nconst Content = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport SearchBar from 'app/components/events/searchBar';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Organization} from 'app/types';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport Field from 'app/views/settings/components/forms/field';\n\nimport {DisplayType, WidgetQuery} from '../../../types';\n\ntype Props = {\n  queries: WidgetQuery[];\n  selectedProjectIds: number[];\n  organization: Organization;\n  displayType: DisplayType;\n  onRemoveQuery: (index: number) => void;\n  onAddQuery: () => void;\n  onChangeQuery: (queryIndex: number, eventQuery: WidgetQuery) => void;\n};\n\nfunction Queries({\n  queries,\n  selectedProjectIds,\n  organization,\n  displayType,\n  onRemoveQuery,\n  onAddQuery,\n  onChangeQuery,\n}: Props) {\n  function handleFieldChange(queryIndex: number, field: keyof WidgetQuery) {\n    const widgetQuery = queries[queryIndex];\n\n    return function handleChange(value: string) {\n      const newQuery = {...widgetQuery, [field]: value};\n      onChangeQuery(queryIndex, newQuery);\n    };\n  }\n\n  function canAddNewQuery() {\n    const rightDisplayType = [\n      DisplayType.LINE,\n      DisplayType.AREA,\n      DisplayType.STACKED_AREA,\n      DisplayType.BAR,\n    ].includes(displayType);\n    const underQueryLimit = queries.length < 3;\n\n    return rightDisplayType && underQueryLimit;\n  }\n\n  const hideLegendAlias = [\n    DisplayType.TABLE,\n    DisplayType.WORLD_MAP,\n    DisplayType.BIG_NUMBER,\n  ].includes(displayType);\n\n  return (\n    <div>\n      {queries.map((eventQuery, queryIndex) => {\n        const displayDeleteButton = queries.length > 1;\n        const displayLegendAlias = !hideLegendAlias;\n        return (\n          <StyledField key={queryIndex} inline={false} flexibleControlStateSize stacked>\n            <Fields\n              displayDeleteButton={displayDeleteButton}\n              displayLegendAlias={displayLegendAlias}\n            >\n              <SearchBar\n                organization={organization}\n                projectIds={selectedProjectIds}\n                query={eventQuery.conditions}\n                fields={[]}\n                onSearch={handleFieldChange(queryIndex, 'conditions')}\n                onBlur={handleFieldChange(queryIndex, 'conditions')}\n                useFormWrapper={false}\n              />\n              {displayLegendAlias && (\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  required\n                  value={eventQuery.name}\n                  placeholder={t('Legend Alias')}\n                  onChange={event =>\n                    handleFieldChange(queryIndex, 'name')(event.target.value)\n                  }\n                />\n              )}\n              {displayDeleteButton && (\n                <Button\n                  size=\"zero\"\n                  borderless\n                  onClick={event => {\n                    event.preventDefault();\n                    onRemoveQuery(queryIndex);\n                  }}\n                  icon={<IconDelete />}\n                  title={t('Remove query')}\n                  label={t('Remove query')}\n                />\n              )}\n            </Fields>\n          </StyledField>\n        );\n      })}\n      {canAddNewQuery() && (\n        <Button\n          size=\"small\"\n          icon={<IconAdd isCircled />}\n          onClick={(event: React.MouseEvent) => {\n            event.preventDefault();\n            onAddQuery();\n          }}\n        >\n          {t('Add Query')}\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default Queries;\n\nconst fieldsColumns = (p: {\n  displayDeleteButton: boolean;\n  displayLegendAlias: boolean;\n}) => {\n  if (!p.displayDeleteButton && !p.displayLegendAlias) {\n    return '1fr';\n  }\n\n  if (!p.displayDeleteButton) {\n    return '1fr 33%';\n  }\n\n  if (!p.displayLegendAlias) {\n    return '1fr max-content';\n  }\n\n  return '1fr 33% max-content';\n};\n\nconst Fields = styled('div')<{displayDeleteButton: boolean; displayLegendAlias: boolean}>`\n  display: grid;\n  grid-template-columns: ${fieldsColumns};\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledField = styled(Field)`\n  padding-right: 0;\n`;\n","import React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport WidgetQueryFields from 'app/components/dashboards/widgetQueryFields';\nimport {t} from 'app/locale';\nimport {TagCollection} from 'app/types';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withTags from 'app/utils/withTags';\nimport {generateFieldOptions} from 'app/views/eventsV2/utils';\n\nimport {DisplayType} from '../../../types';\nimport BuildStep from '../buildStep';\n\nimport Queries from './queries';\n\ntype Props = Omit<React.ComponentProps<typeof Queries>, 'queries'> & {\n  eventQueries: React.ComponentProps<typeof Queries>['queries'];\n  tags: TagCollection;\n  displayType: DisplayType;\n};\n\nfunction EventSteps({\n  eventQueries,\n  selectedProjectIds,\n  organization,\n  tags,\n  displayType,\n  onRemoveQuery,\n  onAddQuery,\n  onChangeQuery,\n}: Props) {\n  function fieldOptions(measurementKeys: string[]) {\n    return generateFieldOptions({\n      organization,\n      tagKeys: Object.values(tags).map(({key}) => key),\n      measurementKeys,\n    });\n  }\n\n  return (\n    <React.Fragment>\n      <BuildStep\n        title={t('Begin your search')}\n        description={t('Add another query to compare projects, tags, etc.')}\n      >\n        <Queries\n          queries={eventQueries}\n          selectedProjectIds={selectedProjectIds}\n          organization={organization}\n          displayType={displayType}\n          onRemoveQuery={onRemoveQuery}\n          onAddQuery={onAddQuery}\n          onChangeQuery={onChangeQuery}\n        />\n      </BuildStep>\n      <Measurements>\n        {({measurements}) => {\n          const measurementKeys = Object.values(measurements).map(({key}) => key);\n          const amendedFieldOptions = fieldOptions(measurementKeys);\n          const buildStepContent = (\n            <WidgetQueryFields\n              style={{padding: 0}}\n              displayType={displayType}\n              fieldOptions={amendedFieldOptions}\n              fields={eventQueries[0].fields}\n              onChange={fields => {\n                eventQueries.forEach((eventQuery, queryIndex) => {\n                  const newQuery = cloneDeep(eventQuery);\n                  newQuery.fields = fields;\n                  onChangeQuery(queryIndex, newQuery);\n                });\n              }}\n            />\n          );\n          return (\n            <BuildStep\n              title={\n                displayType === DisplayType.TABLE\n                  ? t('Choose your columns')\n                  : t('Choose your y-axis')\n              }\n              description={t(\n                'We’ll use this to determine what gets graphed in the y-axis and any additional overlays.'\n              )}\n            >\n              {buildStepContent}\n            </BuildStep>\n          );\n        }}\n      </Measurements>\n    </React.Fragment>\n  );\n}\n\nexport default withTags(EventSteps);\n","import {t} from 'app/locale';\n\nimport {DisplayType} from '../../types';\n\nexport const visualizationColors = [{label: t('Default Color'), value: 'purple'}];\n\nexport const metrics = [\n  'sentry.response',\n  'sentry.events.failed',\n  'sentry.events.processed',\n  'sentry.events.processed.javascript',\n  'sentry.events.processed.java',\n  'sentry.events.processed.node',\n  'symbolicator.healthcheck',\n];\n\nexport const metricTags = {\n  browser: {values: [], key: 'browser', name: 'Browser', value: 'Chrome 89.0.4389'},\n  'browser.name': {\n    values: [],\n    name: 'Browser.Name',\n    key: 'browser.name',\n    value: 'Chrome',\n  },\n  'device.family': {\n    values: [],\n    name: 'Device.Family',\n    key: 'device.family',\n    value: 'Mac',\n  },\n  environment: {values: [], name: 'Environment', key: 'environment', value: 'prod'},\n  'http.status_code': {\n    values: [],\n    name: 'Http.Status_Code',\n    key: 'http.status_code',\n    value: '200',\n  },\n};\n\nexport const metricGroupByOptions = [\n  ['status.code', 'status.code'],\n  ['method', 'method'],\n];\n\n// The aggregation method chosen determines how the metrics are aggregated into a single line\nexport enum Aggregation {\n  COUNTER = 'counter',\n  DISTRIBUTION = 'distribution',\n  SET = 'set',\n  GAUGE = 'gauge',\n}\n\nexport const displayTypes = {\n  [DisplayType.AREA]: t('Area Chart'),\n  [DisplayType.BAR]: t('Bar Chart'),\n  [DisplayType.LINE]: t('Line Chart'),\n  [DisplayType.TABLE]: t('Table'),\n  [DisplayType.WORLD_MAP]: t('World Map'),\n  [DisplayType.BIG_NUMBER]: t('Big Number'),\n};\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'app/components/button';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {IconAdd, IconDelete} from 'app/icons';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport {Tag} from 'app/types';\nimport Field from 'app/views/settings/components/forms/field';\nimport SelectField from 'app/views/settings/components/forms/selectField';\n\nimport {Aggregation, metricGroupByOptions, metricTags} from '../utils';\n\ntype MetricQuery = {\n  tags: string;\n  groupBy: string;\n  aggregation: string;\n};\n\ntype Props = {\n  queries: MetricQuery[];\n  onRemoveQuery: (index: number) => void;\n  onAddQuery: () => void;\n  onChangeQuery: (queryIndex: number, metricQuery: MetricQuery) => void;\n};\n\nfunction Queries({queries, onRemoveQuery, onAddQuery, onChangeQuery}: Props) {\n  function handleFieldChange(queryIndex: number, field: keyof MetricQuery) {\n    const widgetQuery = queries[queryIndex];\n\n    return function handleChange(value: string) {\n      const newQuery = {...widgetQuery, [field]: value};\n      onChangeQuery(queryIndex, newQuery);\n    };\n  }\n\n  function getTagValue({key}: Tag, _query: string, _params: object) {\n    return Promise.resolve([metricTags[key as keyof typeof metricTags].value]);\n  }\n\n  return (\n    <div>\n      {queries.map((metricQuery, queryIndex) => {\n        return (\n          <StyledField key={queryIndex} inline={false} flexibleControlStateSize stacked>\n            <Fields displayDeleteButton={queries.length > 1}>\n              <SmartSearchBar\n                hasRecentSearches\n                maxSearchItems={5}\n                placeholder={t('Search for tag')}\n                supportedTags={metricTags}\n                onChange={value => handleFieldChange(queryIndex, 'tags')(value)}\n                onBlur={value => handleFieldChange(queryIndex, 'tags')(value)}\n                onGetTagValues={getTagValue}\n                excludeEnvironment\n              />\n              <StyledSelectField\n                name=\"groupBy\"\n                placeholder={t('Select Group By')}\n                choices={metricGroupByOptions}\n                value={metricQuery.groupBy}\n                onChange={value => {\n                  return handleFieldChange(queryIndex, 'groupBy')(value);\n                }}\n                inline={false}\n                allowClear={false}\n                flexibleControlStateSize\n                stacked\n              />\n              <StyledSelectField\n                name=\"aggregation\"\n                placeholder={t('Select Aggregation')}\n                choices={Object.values(Aggregation).map(aggregation => [\n                  aggregation,\n                  aggregation,\n                ])}\n                value={metricQuery.aggregation}\n                onChange={value => handleFieldChange(queryIndex, 'aggregation')(value)}\n                inline={false}\n                allowClear={false}\n                flexibleControlStateSize\n                stacked\n              />\n              {queries.length > 1 && (\n                <Button\n                  size=\"zero\"\n                  borderless\n                  onClick={event => {\n                    event.preventDefault();\n                    onRemoveQuery(queryIndex);\n                  }}\n                  icon={<IconDelete />}\n                  title={t('Remove query')}\n                  label={t('Remove query')}\n                />\n              )}\n            </Fields>\n          </StyledField>\n        );\n      })}\n      <Button\n        size=\"small\"\n        icon={<IconAdd isCircled />}\n        onClick={(event: React.MouseEvent) => {\n          event.preventDefault();\n          onAddQuery();\n        }}\n      >\n        {t('Add Query')}\n      </Button>\n    </div>\n  );\n}\n\nexport default Queries;\n\nconst Fields = styled('div')<{displayDeleteButton: boolean}>`\n  display: grid;\n  grid-template-columns: ${p =>\n    p.displayDeleteButton ? '1fr 0.5fr 0.5fr max-content' : '1fr 0.5fr 0.5fr'};\n  grid-gap: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledField = styled(Field)`\n  padding-right: 0;\n`;\n\nconst StyledSelectField = styled(SelectField)`\n  padding-right: 0;\n  padding-bottom: 0;\n`;\n","import React from 'react';\nimport {components, OptionProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport Highlight from 'app/components/highlight';\nimport {t} from 'app/locale';\nimport SelectField from 'app/views/settings/components/forms/selectField';\n\nimport BuildStep from '../buildStep';\nimport {metrics} from '../utils';\n\nimport Queries from './queries';\n\ntype Props = Omit<React.ComponentProps<typeof Queries>, 'queries'> & {\n  metricQueries: React.ComponentProps<typeof Queries>['queries'];\n  onChangeField: (field: 'metric', value: string) => void;\n};\n\nfunction MetricSteps({\n  metricQueries,\n  onAddQuery,\n  onRemoveQuery,\n  onChangeQuery,\n  onChangeField,\n}: Props) {\n  return (\n    <React.Fragment>\n      <BuildStep\n        title={t('Choose your y-axis metric')}\n        description={t('Determine what type of metric you want to graph by.')}\n      >\n        <StyledSelectField\n          name=\"metric\"\n          choices={metrics.map(metric => [metric, metric])}\n          placeholder={t('Select metric')}\n          onChange={value => onChangeField('metric', String(value))}\n          components={{\n            Option: ({\n              label,\n              ...optionProps\n            }: OptionProps<{\n              label: string;\n              value: string;\n            }>) => {\n              const {selectProps} = optionProps;\n              const {inputValue} = selectProps;\n\n              return (\n                <components.Option label={label} {...optionProps}>\n                  <Highlight text={inputValue ?? ''}>{label}</Highlight>\n                </components.Option>\n              );\n            },\n          }}\n          inline={false}\n          flexibleControlStateSize\n          stacked\n          allowClear\n        />\n      </BuildStep>\n      <BuildStep\n        title={t('Begin your search')}\n        description={t('Add another query to compare projects, tags, etc.')}\n      >\n        <Queries\n          queries={metricQueries}\n          onAddQuery={onAddQuery}\n          onRemoveQuery={onRemoveQuery}\n          onChangeQuery={onChangeQuery}\n        />\n      </BuildStep>\n    </React.Fragment>\n  );\n}\n\nexport default MetricSteps;\n\nconst StyledSelectField = styled(SelectField)`\n  padding-right: 0;\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport Breadcrumbs from 'app/components/breadcrumbs';\nimport Button from 'app/components/button';\nimport ButtonBar from 'app/components/buttonBar';\nimport SelectControl from 'app/components/forms/selectControl';\nimport * as Layout from 'app/components/layouts/thirds';\nimport List from 'app/components/list';\nimport {PanelAlert} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport space from 'app/styles/space';\nimport {GlobalSelection, Organization} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\nimport AsyncView from 'app/views/asyncView';\nimport {DisplayType, Widget, WidgetQuery} from 'app/views/dashboardsV2/types';\nimport WidgetCard from 'app/views/dashboardsV2/widgetCard';\nimport RadioField from 'app/views/settings/components/forms/radioField';\n\nimport BuildStep from './buildStep';\nimport EventSteps from './eventSteps';\nimport MetricSteps from './metricSteps';\nimport {displayTypes} from './utils';\n\nenum DataSet {\n  EVENTS = 'events',\n  METRICS = 'metrics',\n}\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype MetricQuery = React.ComponentProps<typeof MetricSteps>['metricQueries'][0];\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<RouteParams, {}> & {\n    organization: Organization;\n    selection: GlobalSelection;\n  };\n\ntype State = AsyncView['state'] & {\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  eventQueries: Widget['queries'];\n  metricQueries: MetricQuery[];\n  dataSet: DataSet;\n  metric?: string;\n};\n\nconst newEventQuery = {\n  name: '',\n  fields: ['count()'],\n  conditions: '',\n  orderby: '',\n};\n\nconst newMetricQuery = {\n  tags: '',\n  groupBy: '',\n  aggregation: '',\n};\n\nconst dataSetChoices: [string, string][] = [\n  ['events', t('Events')],\n  ['metrics', t('Metrics')],\n];\n\nclass WidgetNew extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      title: tct('Custom [displayType] Widget', {displayType: DisplayType.AREA}),\n      displayType: DisplayType.AREA,\n      interval: '5m',\n      eventQueries: [{...newEventQuery}],\n      metricQueries: [{...newMetricQuery}],\n      dataSet: DataSet.EVENTS,\n    };\n  }\n\n  getTitle() {\n    const {params} = this.props;\n    return routeTitleGen(t('Dashboards - Widget Builder'), params.orgId, false);\n  }\n\n  handleFieldChange = <F extends keyof State>(field: F, value: State[F]) => {\n    if (field === 'displayType') {\n      this.setState(state => ({\n        ...state,\n        [field]: value,\n        title: tct('Custom [displayType] Widget', {displayType: displayTypes[value]}),\n      }));\n      return;\n    }\n\n    this.setState(state => ({...state, [field]: value}));\n  };\n\n  handleEventQueryChange = (index: number, widgetQuery: WidgetQuery) => {\n    this.setState(state => {\n      const newState = cloneDeep(state);\n      set(newState, `eventQueries.${index}`, widgetQuery);\n      return newState;\n    });\n  };\n\n  handleMetricQueryChange = (index: number, metricQuery: MetricQuery) => {\n    this.setState(state => {\n      const newState = cloneDeep(state);\n      set(newState, `metricQueries.${index}`, metricQuery);\n      return newState;\n    });\n  };\n\n  handleRemoveQuery = (index: number) => {\n    this.setState(state => {\n      const newState = cloneDeep(state);\n\n      if (state.dataSet === DataSet.EVENTS) {\n        newState.eventQueries.splice(index, index + 1);\n        return newState;\n      }\n\n      newState.metricQueries.splice(index, index + 1);\n      return newState;\n    });\n  };\n\n  handleAddQuery = () => {\n    this.setState(state => {\n      const newState = cloneDeep(state);\n\n      if (state.dataSet === DataSet.EVENTS) {\n        newState.eventQueries.push(cloneDeep(newEventQuery));\n        return newState;\n      }\n\n      newState.metricQueries.push(cloneDeep(newMetricQuery));\n      return newState;\n    });\n  };\n\n  render() {\n    const {params, organization, selection} = this.props;\n    const {\n      displayType,\n      dataSet,\n      title,\n      interval,\n      eventQueries,\n      metricQueries,\n    } = this.state;\n\n    return (\n      <StyledPageContent>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  to: `/organizations/${params.orgId}/dashboards/`,\n                  label: t('Dashboards'),\n                },\n                {label: t('Widget Builder')},\n              ]}\n            />\n            <Layout.Title>{title}</Layout.Title>\n          </Layout.HeaderContent>\n\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <Button\n                title={t(\n                  \"You’re seeing the metrics project because you have the feature flag 'organizations:metrics' enabled. Send us feedback via email.\"\n                )}\n                href=\"mailto:metrics-feedback@sentry.io?subject=Metrics Feedback\"\n              >\n                {t('Give Feedback')}\n              </Button>\n              <Button priority=\"primary\">{t('Save Widget')}</Button>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n\n        <Layout.Body>\n          <BuildSteps symbol=\"colored-numeric\">\n            <BuildStep\n              title={t('Choose your visualization')}\n              description={t(\n                'This is a preview of how your widget will appear in the dashboard.'\n              )}\n            >\n              <VisualizationWrapper>\n                <SelectControl\n                  name=\"displayType\"\n                  options={Object.keys(displayTypes).map(value => ({\n                    label: displayTypes[value],\n                    value,\n                  }))}\n                  value={displayType}\n                  onChange={(option: {label: string; value: DisplayType}) => {\n                    this.handleFieldChange('displayType', option.value);\n                  }}\n                />\n                <WidgetCard\n                  api={this.api}\n                  organization={organization}\n                  selection={selection}\n                  widget={{\n                    title,\n                    displayType,\n                    queries: eventQueries,\n                    interval,\n                  }}\n                  isEditing={false}\n                  onDelete={() => undefined}\n                  onEdit={() => undefined}\n                  renderErrorMessage={errorMessage =>\n                    typeof errorMessage === 'string' && (\n                      <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n                    )\n                  }\n                  isSorting={false}\n                  currentWidgetDragging={false}\n                />\n              </VisualizationWrapper>\n            </BuildStep>\n            <BuildStep\n              title={t('Choose your data set')}\n              description={t(\n                'Monitor specific events such as errors and transactions or get metric readings on TBD.'\n              )}\n            >\n              <RadioField\n                name=\"dataSet\"\n                onChange={value => this.handleFieldChange('dataSet', value as DataSet)}\n                value={dataSet}\n                choices={dataSetChoices}\n                inline={false}\n                orientInline\n                hideControlState\n                stacked\n              />\n            </BuildStep>\n            {dataSet === DataSet.METRICS ? (\n              <MetricSteps\n                metricQueries={metricQueries}\n                onAddQuery={this.handleAddQuery}\n                onRemoveQuery={this.handleRemoveQuery}\n                onChangeQuery={this.handleMetricQueryChange}\n                onChangeField={this.handleFieldChange}\n              />\n            ) : (\n              <EventSteps\n                selectedProjectIds={selection.projects}\n                organization={organization}\n                eventQueries={eventQueries}\n                displayType={displayType}\n                onAddQuery={this.handleAddQuery}\n                onRemoveQuery={this.handleRemoveQuery}\n                onChangeQuery={this.handleEventQueryChange}\n              />\n            )}\n          </BuildSteps>\n        </Layout.Body>\n      </StyledPageContent>\n    );\n  }\n}\n\nexport default withOrganization(withGlobalSelection(WidgetNew));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst BuildSteps = styled(List)`\n  display: grid;\n  grid-gap: ${space(4)};\n  max-width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints[4]}) {\n    max-width: 50%;\n  }\n`;\n\nconst VisualizationWrapper = styled('div')`\n  display: grid;\n  grid-gap: ${space(1.5)};\n`;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Feature from 'app/components/acl/feature';\nimport Alert from 'app/components/alert';\nimport {t} from 'app/locale';\nimport {PageContent} from 'app/styles/organization';\nimport {Organization} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport WidgetNew from './widgetNew';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n  children: React.ReactNode;\n};\n\nfunction WidgetNewContainer({organization, ...props}: Props) {\n  return (\n    <Feature\n      features={['metrics']}\n      organization={organization}\n      renderDisabled={() => (\n        <PageContent>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </PageContent>\n      )}\n    >\n      <WidgetNew {...props} />\n    </Feature>\n  );\n}\n\nexport default withOrganization(WidgetNewContainer);\n"],"sourceRoot":""}