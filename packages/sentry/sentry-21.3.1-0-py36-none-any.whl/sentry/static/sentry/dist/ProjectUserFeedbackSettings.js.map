{"version":3,"sources":["webpack:///./app/data/forms/userFeedback.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/project/projectUserFeedback.tsx"],"names":["route","title","fields","name","type","label","placeholder","help","getData","data","options","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","AsyncView","this","getTitle","renderComponent","AsyncComponent","UnstyledSettingsPageHeader","props","icon","subtitle","action","tabs","noTitleStyles","body","isNarrow","TitleAndActions","TitleWrapper","Icon","Title","styled","Subtitle","Action","BodyWrapper","TabsWrapper","React","defaultProps","p","space","theme","gray400","fontSizeLarge","SettingsPageHeader","ProjectUserFeedbackSettings","handleClick","Sentry","eventId","window","sentryEmbedCallback","embed","submit","_body","_submitInProgress","setTimeout","onSuccess","params","orgId","projectId","routeTitleGen","t","ButtonList","external","href","state","project","platform","priority","onClick","saveOnBlur","apiMethod","apiEndpoint","initialData","access","hasAccess","disabled","forms","formGroups"],"mappings":"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","file":"ProjectUserFeedbackSettings.js","sourcesContent":["import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/user-feedback/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Settings',\n    fields: [\n      {\n        name: 'feedback:branding',\n        type: 'boolean',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Show Sentry Branding',\n        placeholder: 'e.g. secondary@example.com',\n        help:\n          'Show \"powered by Sentry within the feedback dialog. We appreciate you helping get the word out about Sentry! <3',\n        getData: data => ({options: data}),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {HeaderTitle} from 'app/styles/organization';\nimport space from 'app/styles/space';\n\ntype Props = {\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // The title\n  title: React.ReactNode;\n  subtitle?: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n  className?: string;\n\n  // CTA button\n  action?: React.ReactNode;\n\n  body?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass UnstyledSettingsPageHeader extends React.Component<Props> {\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {\n      icon,\n      title,\n      subtitle,\n      action,\n      tabs,\n      noTitleStyles,\n      body,\n      ...props\n    } = this.props;\n\n    // If Header is narrow, use align-items to center <Action>.\n    // Otherwise, use a fixed margin to prevent an odd alignment.\n    // This is needed as Actions could be a button or a dropdown.\n    const isNarrow = !subtitle;\n\n    return (\n      <div {...props}>\n        <TitleAndActions isNarrow={isNarrow}>\n          <TitleWrapper>\n            {icon && <Icon>{icon}</Icon>}\n            {title && (\n              <Title tabs={tabs} styled={noTitleStyles}>\n                <HeaderTitle>{title}</HeaderTitle>\n                {subtitle && <Subtitle>{subtitle}</Subtitle>}\n              </Title>\n            )}\n          </TitleWrapper>\n          {action && <Action isNarrow={isNarrow}>{action}</Action>}\n        </TitleAndActions>\n\n        {body && <BodyWrapper>{body}</BodyWrapper>}\n        {tabs && <TabsWrapper>{tabs}</TabsWrapper>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')<{isNarrow?: boolean}>`\n  display: flex;\n  align-items: ${p => (p.isNarrow ? 'center' : 'flex-start')};\n`;\nconst TitleWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p => !p.styled && `font-size: 20px; font-weight: 600;`};\n  margin: ${space(4)} ${space(2)} ${space(3)} 0;\n`;\nconst Subtitle = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-weight: 400;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1.5)} 0 0;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{isNarrow?: boolean}>`\n  margin-top: ${p => (p.isNarrow ? '0' : space(4))};\n`;\n\nconst SettingsPageHeader = styled(UnstyledSettingsPageHeader)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nconst BodyWrapper = styled('div')`\n  flex: 1;\n  margin: 0 0 ${space(3)};\n`;\nconst TabsWrapper = styled('div')`\n  flex: 1;\n  margin: 0; /* sentry/components/navTabs has added margin */\n`;\n\nexport default SettingsPageHeader;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport Access from 'app/components/acl/access';\nimport Button from 'app/components/button';\nimport formGroups from 'app/data/forms/userFeedback';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}>;\n\nclass ProjectUserFeedbackSettings extends AsyncView<Props> {\n  componentDidMount() {\n    window.sentryEmbedCallback = function (embed) {\n      // Mock the embed's submit xhr to always be successful\n      // NOTE: this will not have errors if the form is empty\n      embed.submit = function (_body) {\n        this._submitInProgress = true;\n        setTimeout(() => {\n          this._submitInProgress = false;\n          this.onSuccess();\n        }, 500);\n      };\n    };\n  }\n\n  componentWillUnmount() {\n    window.sentryEmbedCallback = null;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle(): string {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('User Feedback'), projectId, false);\n  }\n\n  handleClick = () => {\n    Sentry.showReportDialog({\n      // should never make it to the Sentry API, but just in case, use throwaway id\n      eventId: '00000000000000000000000000000000',\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId} = this.props.params;\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('User Feedback')} />\n        <TextBlock>\n          {t(\n            `Don't rely on stack traces and graphs alone to understand\n            the cause and impact of errors. Enable User Feedback to collect\n            your users' comments when they encounter a crash or bug.`\n          )}\n        </TextBlock>\n        <TextBlock>\n          {t(\n            `When configured, your users will be presented with a dialog prompting\n            them for additional information. That information will get attached to\n            the issue in Sentry.`\n          )}\n        </TextBlock>\n        <ButtonList>\n          <Button\n            external\n            href={\n              this.state.project.platform\n                ? `https://docs.sentry.io/platforms/${this.state.project.platform}/enriching-events/user-feedback/`\n                : 'https://docs.sentry.io/platform-redirect/?next=%2Fenriching-events%2Fuser-feedback'\n            }\n          >\n            {t('Read the docs')}\n          </Button>\n          <Button priority=\"primary\" onClick={this.handleClick}>\n            {t('Open the report dialog')}\n          </Button>\n        </ButtonList>\n\n        <Form\n          saveOnBlur\n          apiMethod=\"PUT\"\n          apiEndpoint={`/projects/${orgId}/${projectId}/`}\n          initialData={this.state.project.options}\n        >\n          <Access access={['project:write']}>\n            {({hasAccess}) => <JsonForm disabled={!hasAccess} forms={formGroups} />}\n          </Access>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst ButtonList = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n\nexport default ProjectUserFeedbackSettings;\n"],"sourceRoot":""}