{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","IntegrationOrganizationLink","trackIntegrationEvent","eventName","startSession","state","organization","provider","integration_type","integration","key","already_installed","view","getOrgBySlug","orgSlug","organizations","find","org","slug","onSelectOrg","value","setState","selectedOrgSlug","reloading","undefined","Promise","all","api","requestPromise","integrationSlug","providers","length","Error","trackOpened","addErrorMessage","t","hasAccess","access","includes","onInstallWithInstallationId","data","orgId","props","router","push","id","finishInstallation","query","queryParams","trackInstallationStart","window","location","assign","urlEncode","customOption","orgProps","avatarSize","displayName","name","avatarProps","consistentWidth","customValueContainer","containerProps","valueList","getValue","params","installationId","featuresComponents","metadata","features","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationDirectoryFeatures","getIntegrationFeatureGate","disabled","onInstall","addIntegrationWithInstallationId","ButtonWrapper","priority","onClick","installation_id","FeatureList","type","icon","size","tct","InstallLink","href","className","renderAddButton","options","label","integation","inline","stacked","required","onChange","placeholder","components","Option","ValueContainer","renderBottom","AddIntegration","dialog","openDialog","urlParams","analyticsParams","setupDialog","url","width","height","computeCenteredWindow","left","top","account","modalParams","installUrl","queryString","opts","open","focus","didReceiveMessage","message","origin","document","source","success","addSuccessMessage","error","addEventListener","removeEventListener","close","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","React"],"mappings":"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","file":"IntegrationOrganizationLink.js","sourcesContent":["import React from 'react';\nimport DocumentTitle from 'react-document-title';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\n\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport Alert from 'app/components/alert';\nimport Button from 'app/components/button';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport {IconFlag} from 'app/icons';\nimport {t, tct} from 'app/locale';\nimport {Integration, IntegrationProvider, Organization} from 'app/types';\nimport {IntegrationAnalyticsKey} from 'app/utils/integrationEvents';\nimport {\n  getIntegrationFeatureGate,\n  trackIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport AsyncView from 'app/views/asyncView';\nimport AddIntegration from 'app/views/organizationIntegrations/addIntegration';\nimport Field from 'app/views/settings/components/forms/field';\n\n//installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationEvent = (\n    eventName: IntegrationAnalyticsKey,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    //should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationEvent(\n      eventName,\n      {\n        integration_type: 'first_party',\n        integration: provider.key,\n        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationEvent('integrations.integration_viewed', true);\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationEvent('integrations.installation_start');\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    //auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  //used with Github to redirect to the the integration detail\n  onInstallWithInstallationId = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}/`\n    );\n  };\n\n  //non-Github redirects to the extension view where the backend will finish the installation\n  finishInstallation = () => {\n    // add the selected org to the query parameters and then redirect back to configure\n    const {selectedOrgSlug} = this.state;\n    const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n    this.trackInstallationStart();\n    window.location.assign(\n      `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n    );\n  };\n\n  renderAddButton() {\n    const {installationId} = this.props.params;\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    //Github uses a different installation flow with the installationId as a parameter\n    //We have to wrap our installation button with AddIntegration so we can get the\n    //addIntegrationWithInstallationId callback.\n    //if we don't hve an installationId, we need to use the finishInstallation callback.\n    return (\n      <IntegrationDirectoryFeatures\n        organization={organization}\n        features={featuresComponents}\n      >\n        {({disabled}) => (\n          <AddIntegration\n            provider={provider}\n            onInstall={this.onInstallWithInstallationId}\n          >\n            {addIntegrationWithInstallationId => (\n              <ButtonWrapper>\n                <Button\n                  priority=\"primary\"\n                  disabled={!this.hasAccess() || disabled}\n                  onClick={() =>\n                    installationId\n                      ? addIntegrationWithInstallationId({\n                          installation_id: installationId,\n                        })\n                      : this.finishInstallation()\n                  }\n                >\n                  {t('Install %s', provider.name)}\n                </Button>\n              </ButtonWrapper>\n            )}\n          </AddIntegration>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    //if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <React.Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <React.Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </React.Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import React from 'react';\nimport * as queryString from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  account?: string;\n  organization?: Organization; //for analytics\n  analyticsParams?: {\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n    already_installed: boolean;\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    //Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    trackIntegrationEvent(\n      'integrations.installation_start',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    if (this.props.modalParams) {\n      query = {...query, ...this.props.modalParams};\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationEvent(\n      'integrations.installation_complete',\n      {\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n    this.props.onInstall(data);\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n"],"sourceRoot":""}