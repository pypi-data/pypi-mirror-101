Ok(TranslationUnit(NonEmpty([Preprocessor(Version(PreprocessorVersion { version: 330, profile: None })), Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: Some(TypeQualifier { qualifiers: NonEmpty([Storage(Uniform)]) }), ty: TypeSpecifier { ty: Float, array_specifier: None } }, name: Some(Identifier("size")), array_specifier: None, initializer: None }, tail: [] })), Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: Some(TypeQualifier { qualifiers: NonEmpty([Storage(Uniform)]) }), ty: TypeSpecifier { ty: Mat4, array_specifier: None } }, name: Some(Identifier("projection")), array_specifier: None, initializer: None }, tail: [] })), Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: Some(TypeQualifier { qualifiers: NonEmpty([Storage(Const)]) }), ty: TypeSpecifier { ty: Float, array_specifier: None } }, name: Some(Identifier("half_root_3")), array_specifier: None, initializer: Some(Simple(FloatConst(0.8660254))) }, tail: [] })),


Declaration(
  InitDeclaratorList(
    InitDeclaratorList {
      head: SingleDeclaration {
        ty: FullySpecifiedType {
          qualifier: Some(
            TypeQualifier {
              qualifiers: NonEmpty([Storage(Const)])
            }
          ),
          ty: TypeSpecifier {
            ty: Int,
            array_specifier: None
          }
        },
        name: Some(Identifier("indices")),
        array_specifier: Some(
          ArraySpecifier {
            dimensions: NonEmpty([
              ExplicitlySized(IntConst(12))
            ])
          }
        ),
        initializer: Some(
          Simple(
            FunCall(
              Expr(
                Bracket(
                  Variable(Identifier("int")),
                  ArraySpecifier {
                    dimensions: NonEmpty([
                      ExplicitlySized(IntConst(12))
                    ])
                  }
                )
              ),
              [IntConst(1), IntConst(2), IntConst(0), IntConst(2), IntConst(0), IntConst(3), IntConst(0), IntConst(3), IntConst(5), IntConst(3), IntConst(5), IntConst(4)]
            )
          )
        )
      },
      tail: []
    }
  )
),
Declaration(Global(TypeQualifier { qualifiers: NonEmpty([Layout(LayoutQualifier { ids: NonEmpty([Identifier(Identifier("points"), None)]) }), Storage(In)]) }, [])), Declaration(Global(TypeQualifier { qualifiers: NonEmpty([Layout(LayoutQualifier { ids: NonEmpty([Identifier(Identifier("triangle_strip"), None), Identifier(Identifier("max_vertices"), Some(IntConst(12)))]) }), Storage(Out)]) }, [])),

Declaration(
  Block(
    Block {
      qualifier: TypeQualifier {
        qualifiers: NonEmpty([Storage(In)])
      },
      name: Identifier("VS_OUT"),
      fields: [
        StructFieldSpecifier {
          qualifier: None,
          ty: TypeSpecifier { ty: Vec2, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier {
              ident: Identifier("gridCoord"),
              array_spec: None
            }
          ])
        },
        StructFieldSpecifier {
          qualifier: None,
          ty: TypeSpecifier { ty: Vec3, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier {
              ident: Identifier("pos"),
              array_spec: None
            }
          ])
        },
        StructFieldSpecifier {
          qualifier: Some(
            TypeQualifier { qualifiers: NonEmpty([Interpolation(Flat)]) }
          ),
          ty: TypeSpecifier { ty: Int, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier {
              ident: Identifier("textureId"),
              array_spec: None
            }
          ])
        }
      ],
      identifier: Some(
        ArrayedIdentifier {
          ident: Identifier("gs_in"),
          array_spec: Some(
            ArraySpecifier {
              dimensions: NonEmpty([Unsized])
            }
          )
        }
      )
    }
  )
),

Declaration(
  Block(
    Block {
      qualifier: TypeQualifier {
        qualifiers: NonEmpty([Storage(Out)])
      },
      name: Identifier("GS_OUT"),
      fields: [
        StructFieldSpecifier {
          qualifier: None,
          ty: TypeSpecifier { ty: Vec2, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier { ident: Identifier("gridCoord"), array_spec: None }
          ])
        },
        StructFieldSpecifier {
          qualifier: None,
          ty: TypeSpecifier { ty: Vec2, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier { ident: Identifier("uv"), array_spec: None }
          ])
        },
        StructFieldSpecifier {
          qualifier: Some(TypeQualifier { qualifiers: NonEmpty([Interpolation(Flat)]) }),
          ty: TypeSpecifier { ty: Int, array_specifier: None },
          identifiers: NonEmpty([
            ArrayedIdentifier { ident: Identifier("textureId"), array_spec: None }
          ])
        }
      ],
      identifier: Some(
        ArrayedIdentifier {
          ident: Identifier("gs_out"),
          array_spec: None
        }
      )
    }
  )
),

FunctionDefinition(FunctionDefinition { prototype: FunctionPrototype { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Void, array_specifier: None } }, name: Identifier("main"), parameters: [] }, statement: CompoundStatement { statement_list: [Simple(Selection(SelectionStatement { cond: Binary(GTE, Dot(Bracket(Variable(Identifier("gs_in")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Identifier("textureId")), IntConst(0)), rest: Statement(Compound(CompoundStatement { statement_list: [
  Simple(
    Declaration(
      InitDeclaratorList(
        InitDeclaratorList {
          head: SingleDeclaration {
            ty: FullySpecifiedType {
              qualifier: None,
              ty: TypeSpecifier { ty: Float, array_specifier: None }
            },
            name: Some(Identifier("x")),
            array_specifier: None,
            initializer: Some(
              Simple(Dot(Dot(Bracket(Variable(Identifier("gs_in")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Identifier("pos")), Identifier("x")))
            )
          },
          tail: []
        }
      )
    )
  ),
Simple(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Float, array_specifier: None } }, name: Some(Identifier("y")), array_specifier: None, initializer: Some(Simple(Dot(Dot(Bracket(Variable(Identifier("gs_in")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Identifier("pos")), Identifier("y")))) }, tail: [] }))), Simple(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Vec4, array_specifier: None } }, name: Some(Identifier("vertex_pos")), array_specifier: Some(ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(6))]) }), initializer: None }, tail: [] }))), Simple(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Vec2, array_specifier: None } }, name: Some(Identifier("vertex_uv")), array_specifier: Some(ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(6))]) }), initializer: None }, tail: [] }))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Binary(Sub, Variable(Identifier("x")), Binary(Mult, Variable(Identifier("half_root_3")), Variable(Identifier("size")))), Binary(Add, Variable(Identifier("y")), Binary(Mult, FloatConst(0.5), Variable(Identifier("size")))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(1))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Variable(Identifier("x")), Binary(Add, Variable(Identifier("y")), Variable(Identifier("size"))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(2))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Binary(Add, Variable(Identifier("x")), Binary(Mult, Variable(Identifier("half_root_3")), Variable(Identifier("size")))), Binary(Add, Variable(Identifier("y")), Binary(Mult, FloatConst(0.5), Variable(Identifier("size")))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(3))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Binary(Add, Variable(Identifier("x")), Binary(Mult, Variable(Identifier("half_root_3")), Variable(Identifier("size")))), Binary(Sub, Variable(Identifier("y")), Binary(Mult, FloatConst(0.5), Variable(Identifier("size")))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(4))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Variable(Identifier("x")), Binary(Sub, Variable(Identifier("y")), Variable(Identifier("size"))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(5))]) }), Equal, Binary(Mult, Variable(Identifier("projection")), FunCall(Identifier(Identifier("vec4")), [Binary(Sub, Variable(Identifier("x")), Binary(Mult, Variable(Identifier("half_root_3")), Variable(Identifier("size")))), Binary(Sub, Variable(Identifier("y")), Binary(Mult, FloatConst(0.5), Variable(Identifier("size")))), FloatConst(0.0), FloatConst(1.0)])))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [IntConst(0), FloatConst(0.75)]))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(1))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [FloatConst(0.5), FloatConst(1.0)]))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(2))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [FloatConst(1.0), FloatConst(0.75)]))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(3))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [FloatConst(1.0), FloatConst(0.25)]))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(4))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [FloatConst(0.5), FloatConst(0.0)]))))), Simple(Expression(Some(Assignment(Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(5))]) }), Equal, FunCall(Identifier(Identifier("vec2")), [IntConst(0), FloatConst(0.25)]))))), Simple(Iteration(For(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Int, array_specifier: None } }, name: Some(Identifier("tri")), array_specifier: None, initializer: Some(Simple(IntConst(0))) }, tail: [] })), ForRestStatement { condition: Some(Expr(Binary(LT, Variable(Identifier("tri")), IntConst(4)))), post_expr: Some(PostInc(Variable(Identifier("tri")))) }, Compound(CompoundStatement { statement_list: [Simple(Iteration(For(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Int, array_specifier: None } }, name: Some(Identifier("vert")), array_specifier: None, initializer: Some(Simple(IntConst(0))) }, tail: [] })), ForRestStatement { condition: Some(Expr(Binary(LT, Variable(Identifier("vert")), IntConst(3)))), post_expr: Some(PostInc(Variable(Identifier("vert")))) }, Compound(CompoundStatement { statement_list: [Simple(Declaration(InitDeclaratorList(InitDeclaratorList { head: SingleDeclaration { ty: FullySpecifiedType { qualifier: None, ty: TypeSpecifier { ty: Int, array_specifier: None } }, name: Some(Identifier("i")), array_specifier: None, initializer: Some(Simple(Bracket(Variable(Identifier("indices")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(Binary(Add, Binary(Mult, Variable(Identifier("tri")), IntConst(3)), Variable(Identifier("vert"))))]) }))) }, tail: [] }))), Simple(Expression(Some(Assignment(Variable(Identifier("gl_Position")), Equal, Bracket(Variable(Identifier("vertex_pos")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(Variable(Identifier("i")))]) }))))), Simple(Expression(Some(Assignment(Dot(Variable(Identifier("gs_out")), Identifier("uv")), Equal, Bracket(Variable(Identifier("vertex_uv")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(Variable(Identifier("i")))]) }))))), Simple(Expression(Some(Assignment(Dot(Variable(Identifier("gs_out")), Identifier("textureId")), Equal, Dot(Bracket(Variable(Identifier("gs_in")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Identifier("textureId")))))), Simple(Expression(Some(Assignment(Dot(Variable(Identifier("gs_out")), Identifier("gridCoord")), Equal, Dot(Bracket(Variable(Identifier("gs_in")), ArraySpecifier { dimensions: NonEmpty([ExplicitlySized(IntConst(0))]) }), Identifier("gridCoord")))))), Simple(Expression(Some(FunCall(Identifier(Identifier("EmitVertex")), []))))] })))), Simple(Expression(Some(FunCall(Identifier(Identifier("EndPrimitive")), []))))] }))))] })) }))] } })])))