# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['yard', 'yard.scripts']

package_data = \
{'': ['*']}

extras_require = \
{'plotting': ['matplotlib>=3.4.1,<4.0.0']}

entry_points = \
{'console_scripts': ['yard-auc = yard.scripts.auc:main',
                     'yard-plot = yard.scripts.plot:main',
                     'yard-significance = yard.scripts.significance:main']}

setup_kwargs = {
    'name': 'yard',
    'version': '0.3.0',
    'description': 'Yet another ROC curve drawer',
    'long_description': "YARD - Yet Another ROC Drawer\n=============================\n\n:Author: TamÃ¡s Nepusz\n\nThis is yet another Python package for drawing ROC curves. It also\nlets you draw precision-recall, accumulation and concentrated ROC\n(CROC) curves, sensitivity-specificity plots, F-score curves and calculate\nthe AUC (area under curve) statistics.  The significance of differences\nbetween AUC scores can also be tested using paired permutation tests.\n\nWhere to get ``yard``\n---------------------\n\n``yard`` has two homes at the moment:\n\n* The `Python package index`_. This page hosts the most recent stable\n  version of ``yard``. Since ``yard`` is under heavy development at the\n  moment, you might not get all the latest and greatest features of\n  ``yard``, but you will most likely find a version here that should\n  not collapse even under exceptional circumstances.\n\n* A page on GitHub_. On this page you can follow the development of\n  ``yard`` as closely as possible; you can get the most recent\n  development version, file bug reports, or even fork the project\n  to start adding your own features.\n\n.. _Python package index: http://pypi.python.org/pypi/yard\n.. _GitHub: http://github.com/ntamas/yard\n\nRequirements\n------------\n\nYou will need the following tools to run ``yard``:\n\n* `Python 3.7`_ or later.\n\n* `Matplotlib`_, which is responsible for plotting the curves. If\n  you don't have `Matplotlib`_, you can export the points of the\n  curves and then use an external plotting tool such as `GNUPlot`_\n  to plot them later.\n\n* `NumPy`_ is an optional dependency; some functions will be\n  slightly faster if you have `NumPy`_, but ``yard`` should work\n  fine without it as well.\n\n.. _Python 3.7: http://www.python.org\n.. _Matplotlib: http://matplotlib.sourceforge.net\n.. _GNUPlot: http:/www.gnuplot.info\n.. _NumPy: http://numpy.scipy.org\n\nInstallation\n------------\n\nThe simplest way to install ``yard`` is by using ``pip``::\n\n    $ pip install yard\n\nThis goes to the `Python package index`_ page, fetches the most recent\nstable version and installs it, creating two scripts in your path:\n``yard-auc`` for AUC score calculation, ``yard-plot`` for plotting and\n``yard-significance`` for significance testing.\n\nIf you want the bleeding edge version, you should go to the GitHub_\npage, download a ZIP or .tar.gz file, extract it to some directory\nand then run the following command::\n\n    $ python setup.py install\n\nRunning ``yard``\n----------------\n\n``yard`` works with simple tabular flat files, and assumes that the first\nrow in each file is a header. Each row contains data related to a particular\ntest example. By default, the first column contains the *expected* outcome\nof a binary classifier for a given test example (i.e. whether the example is\npositive or negative), while the remaining columns contain the output of\nthe probabilistic classifiers being tested on the test dataset. The\nexpected outcome must be positive for positive examples and zero or negative\nfor negative examples - this means that you may use either zeros and ones\nor -1 and 1 for negative and positive test examples, respectively. The\noutcomes of the classifiers may be in any range, but they are most frequently\nin the interval [0; 1]. The following snippet shows an example input file::\n\n    output  Method1 Method2 Method3\n    -1      0.2     0.3     0.6\n    -1      0.4     0.15    0.1\n    +1      0.7     0.2     0.9\n    +1      0.3     0.85    1.0\n\nColumns must be separated by tabs per default, but this can be overridden\nwith the ``-f`` option on the command line. The actual columns being used\ncan also be overridden using ``-c``; for instance, if you have the expected\noutcome in column 4 and the actual outcomes in columns 1-3, you may use\n``-c 4,1-3`` to specify that.\n\nSome usage examples are presented here; for more details, type\n``yard-plot --help`` or ``yard-significance --help``.\n\nTo show a ROC curve for an arbitrary number of classifiers where the expected\nand actual outcomes are defined in ``input_data.txt``::\n\n    $ yard-plot input_data.txt\n\nIf the actual outcomes are in columns 3-5, the expected outcome is in\ncolumn 6 and the columns are separated by semicolons::\n\n    $ yard-plot -f ';' -c 6,3-5 input_data.txt\n\nTo plot precision-recall curves instead of ROC curves and also show the\nAUC statistics::\n\n    $ yard-plot -t pr --show-auc input_data.txt\n\nSupported curve types are: ``roc`` for ROC curves (default), ``pr`` for\nprecision-recall curves, ``croc`` for CROC curves, ``ac`` for accumulation\ncurves, ``sespe`` for sensitivity-specificity plots, ``fscore`` for\nF-score curves.\n\nTo use a logarithmic X axis for the ROC curve and use the standard input\ninstead of a file::\n\n    $ yard-plot -l x\n\nThe omission of an input filename instructs ``yard-plot`` to use the standard\ninput. You may have also used ``-`` in place of the filename to specify that.\n\nTo save a ROC curve into a PDF file::\n\n    $ yard-plot -o roc_curve.pdf input_data.txt\n\nYou may specify other formats as long as they are supported by Matplotlib::\n\n    $ yard-plot -o roc_curve.ps input_data.txt\n    $ yard-plot -o roc_curve.png input_data.txt\n\nThe PDF backend also supports multiple plots in separate pages::\n\n    $ yard-plot -t pr -t roc -t croc -o curves.pdf input_data.txt\n\nThe figure size, the DPI ratio and the font size can also be adjusted::\n\n    $ yard-plot -o roc_curve.pdf --font-size 8 -s '8cm x 6cm' input_data.txt\n\nTo calculate the AUC statistics for multiple curves without plotting them::\n\n    $ yard-auc -t pr -t roc input_data.txt\n\nTo test whether the ROC curves of multiple classifiers are significantly\ndifferent::\n\n    $ yard-significance input_data.txt\n\nQuestions, comments\n-------------------\n\nIf you have a question or comment about ``yard`` or you think you have\nfound a bug, feel free to `contact me`_.\n\n.. _contact me: http://www.cs.rhul.ac.uk/home/tamas\n\nAcknowledgments and references\n------------------------------\n\nThe inclusion of CROC curves and the statistical significance testing\nwas inspired by the following publication (which also provides more\ndetails on what CROC curves are and why they are more useful than ROC\ncurves in many cases):\n\n    **A CROC Stronger than ROC: Measuring, Visualizing and Optimizing\n    Early Retrieval**.\n    S. Joshua Swamidass, Chloe-Agathe Azencott, Kenny Daily and Pierre Baldi.\n    *Bioinformatics*, April 2010, doi:10.1093/bioinformatics/btq140\n\n",
    'author': 'Tamas Nepusz',
    'author_email': 'ntamas@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/ntamas/yard',
    'packages': packages,
    'package_data': package_data,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
