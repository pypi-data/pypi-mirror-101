"""downsampling pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2020

This pipeline is part of Sequana software (sequana.readthedocs.io)

snakemake -s downsampling.rules --forceall --stats stats.txt --cores 4


"""
import sequana
from sequana import snaketools as sm
from sequana import sequana_data
from sequana import FastQ

# This must be defined before the include
configfile: "config.yaml"

if config['downsampling']['input_format'] in ['fastq', 'fasta']:
    manager = sm.PipelineManager("downsampling", config, fastq=True)
else:
    # not yet fully tested
    manager = sm.PipelineManager("downsampling", config, fastq=False)


__rawdata__input = manager.getrawdata()



rule pipeline:
    input: expand("output/{sample}.done", sample=manager.samples)



if config["downsampling"]['input_format'] == "fastq":
    rule downsampling:
        input: __rawdata__input
        output: "output/{sample}.done"
        threads: config["downsampling"]['threads']
        run:
            from sequana import FastQ
            f1 = FastQ(input[0])
            outname = "output/" + input[0].split("/")[-1].replace(".gz", "")
            if config['downsampling']['method'] == "random":
                N = config['downsampling']['max_entries']
                selection = f1.select_random_reads(N, outname)
            elif config['downsampling']['method'] == "random_pct":
                L = len(f1)
                N = int(L * config["downsampling"]["percent"]/100)
                selection = f1.select_random_reads(N, outname)
            shell("pigz -f -p {} {}".format(threads, outname))
            if len(input) == 2:
                f2 = FastQ(input[1])
                outname2 = "output/" + input[1].split("/")[-1].replace(".gz", "")
                f2.select_random_reads(selection, outname2)
                shell("pigz -f -p {} {}".format(threads, outname2))
            shell("touch {}".format(output[0]))
elif config["downsampling"]['input_format'] == "fasta":
    rule downsampling:
        input: __rawdata__input
        output: "output/{sample}.done"
        threads: config["downsampling"]['threads']
        run:
            from sequana import FastA
            f1 = FastA(input[0])
            # compressed files not yet implemented for fasta
            #outname = output[0].replace(".gz", "")
            outname = "output/" + input[0].split("/")[-1]
            if config['downsampling']['method'] == "random":
                N = config['downsampling']['max_entries']
                selection = f1.select_random_reads(N, outname)
            elif config['downsampling']['method'] == "random_pct":
                L = len(f1)
                N = int(L * config["downsampling"]["percent"]/100)
                selection = f1.select_random_reads(N, outname)

            shell("pigz -f -p {} {}".format(threads, outname))

            if len(input) == 2:
                f2 = FastA(input[1])
                outname2 = "output/" + input[1].split("/")[-1].replace(".gz", "")
                f2.select_random_reads(selection, outname2)
                shell("pigz -f -p {} {}".format(threads, outname2))
            shell("touch {}".format(output[0]))
else:
    raise NotImplementedError



onsuccess:
    from sequana.snaketools import OnSuccessCleaner
    sc = OnSuccessCleaner(pipeline_name="downsampling")

    sc.files_to_remove += ["output/*.done"]
    sc.custom_commands += "mv output/* . ; rm -rf output"
    sc.add_makefile()
    print("Once done, please clean up the directory using\n'make clean'")



onerror:
    print("An error occurred. See message above.")
