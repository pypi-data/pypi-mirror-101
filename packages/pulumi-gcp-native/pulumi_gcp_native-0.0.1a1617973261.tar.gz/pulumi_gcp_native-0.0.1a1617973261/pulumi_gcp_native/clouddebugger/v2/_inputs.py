# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'AliasContextArgs',
    'CloudRepoSourceContextArgs',
    'CloudWorkspaceIdArgs',
    'CloudWorkspaceSourceContextArgs',
    'DebuggeeArgs',
    'ExtendedSourceContextArgs',
    'FormatMessageArgs',
    'GerritSourceContextArgs',
    'GitSourceContextArgs',
    'ProjectRepoIdArgs',
    'RepoIdArgs',
    'SourceContextArgs',
    'StatusMessageArgs',
]

@pulumi.input_type
class AliasContextArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        An alias to a repo revision.
        :param pulumi.Input[str] kind: The alias kind.
        :param pulumi.Input[str] name: The alias name.
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The alias kind.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The alias name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CloudRepoSourceContextArgs:
    def __init__(__self__, *,
                 alias_context: Optional[pulumi.Input['AliasContextArgs']] = None,
                 alias_name: Optional[pulumi.Input[str]] = None,
                 repo_id: Optional[pulumi.Input['RepoIdArgs']] = None,
                 revision_id: Optional[pulumi.Input[str]] = None):
        """
        A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).
        :param pulumi.Input['AliasContextArgs'] alias_context: An alias, which may be a branch or tag.
        :param pulumi.Input[str] alias_name: The name of an alias (branch, tag, etc.).
        :param pulumi.Input['RepoIdArgs'] repo_id: The ID of the repo.
        :param pulumi.Input[str] revision_id: A revision ID.
        """
        if alias_context is not None:
            pulumi.set(__self__, "alias_context", alias_context)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)

    @property
    @pulumi.getter(name="aliasContext")
    def alias_context(self) -> Optional[pulumi.Input['AliasContextArgs']]:
        """
        An alias, which may be a branch or tag.
        """
        return pulumi.get(self, "alias_context")

    @alias_context.setter
    def alias_context(self, value: Optional[pulumi.Input['AliasContextArgs']]):
        pulumi.set(self, "alias_context", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an alias (branch, tag, etc.).
        """
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input['RepoIdArgs']]:
        """
        The ID of the repo.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input['RepoIdArgs']]):
        pulumi.set(self, "repo_id", value)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        A revision ID.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)


@pulumi.input_type
class CloudWorkspaceIdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 repo_id: Optional[pulumi.Input['RepoIdArgs']] = None):
        """
        A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.
        :param pulumi.Input[str] name: The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
        :param pulumi.Input['RepoIdArgs'] repo_id: The ID of the repo containing the workspace.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repo_id is not None:
            pulumi.set(__self__, "repo_id", repo_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="repoId")
    def repo_id(self) -> Optional[pulumi.Input['RepoIdArgs']]:
        """
        The ID of the repo containing the workspace.
        """
        return pulumi.get(self, "repo_id")

    @repo_id.setter
    def repo_id(self, value: Optional[pulumi.Input['RepoIdArgs']]):
        pulumi.set(self, "repo_id", value)


@pulumi.input_type
class CloudWorkspaceSourceContextArgs:
    def __init__(__self__, *,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input['CloudWorkspaceIdArgs']] = None):
        """
        A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
        :param pulumi.Input['CloudWorkspaceIdArgs'] workspace_id: The ID of the workspace.
        """
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input['CloudWorkspaceIdArgs']]:
        """
        The ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input['CloudWorkspaceIdArgs']]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class DebuggeeArgs:
    def __init__(__self__, *,
                 agent_version: Optional[pulumi.Input[str]] = None,
                 canary_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_source_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['ExtendedSourceContextArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_disabled: Optional[pulumi.Input[bool]] = None,
                 is_inactive: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 source_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]] = None,
                 status: Optional[pulumi.Input['StatusMessageArgs']] = None,
                 uniquifier: Optional[pulumi.Input[str]] = None):
        """
        Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.
        :param pulumi.Input[str] agent_version: Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
        :param pulumi.Input[str] canary_mode: Used when setting breakpoint canary for this debuggee.
        :param pulumi.Input[str] description: Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
        :param pulumi.Input[Sequence[pulumi.Input['ExtendedSourceContextArgs']]] ext_source_contexts: References to the locations and revisions of the source code used in the deployed application.
        :param pulumi.Input[str] id: Unique identifier for the debuggee generated by the controller service.
        :param pulumi.Input[bool] is_disabled: If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
        :param pulumi.Input[bool] is_inactive: If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of custom debuggee properties, populated by the agent, to be displayed to the user.
        :param pulumi.Input[str] project: Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
        :param pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]] source_contexts: References to the locations and revisions of the source code used in the deployed application.
        :param pulumi.Input['StatusMessageArgs'] status: Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
        :param pulumi.Input[str] uniquifier: Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
        """
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)
        if canary_mode is not None:
            pulumi.set(__self__, "canary_mode", canary_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_source_contexts is not None:
            pulumi.set(__self__, "ext_source_contexts", ext_source_contexts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if is_inactive is not None:
            pulumi.set(__self__, "is_inactive", is_inactive)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if source_contexts is not None:
            pulumi.set(__self__, "source_contexts", source_contexts)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uniquifier is not None:
            pulumi.set(__self__, "uniquifier", uniquifier)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_version", value)

    @property
    @pulumi.getter(name="canaryMode")
    def canary_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Used when setting breakpoint canary for this debuggee.
        """
        return pulumi.get(self, "canary_mode")

    @canary_mode.setter
    def canary_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canary_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extSourceContexts")
    def ext_source_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtendedSourceContextArgs']]]]:
        """
        References to the locations and revisions of the source code used in the deployed application.
        """
        return pulumi.get(self, "ext_source_contexts")

    @ext_source_contexts.setter
    def ext_source_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtendedSourceContextArgs']]]]):
        pulumi.set(self, "ext_source_contexts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the debuggee generated by the controller service.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, indicates that the agent should disable itself and detach from the debuggee.
        """
        return pulumi.get(self, "is_disabled")

    @is_disabled.setter
    def is_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_disabled", value)

    @property
    @pulumi.getter(name="isInactive")
    def is_inactive(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.
        """
        return pulumi.get(self, "is_inactive")

    @is_inactive.setter
    def is_inactive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inactive", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of custom debuggee properties, populated by the agent, to be displayed to the user.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sourceContexts")
    def source_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]]:
        """
        References to the locations and revisions of the source code used in the deployed application.
        """
        return pulumi.get(self, "source_contexts")

    @source_contexts.setter
    def source_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceContextArgs']]]]):
        pulumi.set(self, "source_contexts", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['StatusMessageArgs']]:
        """
        Human readable message to be displayed to the user about this debuggee. Absence of this field indicates no status. The message can be either informational or an error status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['StatusMessageArgs']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def uniquifier(self) -> Optional[pulumi.Input[str]]:
        """
        Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.
        """
        return pulumi.get(self, "uniquifier")

    @uniquifier.setter
    def uniquifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniquifier", value)


@pulumi.input_type
class ExtendedSourceContextArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input['SourceContextArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        An ExtendedSourceContext is a SourceContext combined with additional details describing the context.
        :param pulumi.Input['SourceContextArgs'] context: Any source context.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels with user defined metadata.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input['SourceContextArgs']]:
        """
        Any source context.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input['SourceContextArgs']]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels with user defined metadata.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class FormatMessageArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Represents a message with parameters.
        :param pulumi.Input[str] format: Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] parameters: Optional parameters to be embedded into the message.
        """
        if format is not None:
            pulumi.set(__self__, "format", format)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Optional parameters to be embedded into the message.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class GerritSourceContextArgs:
    def __init__(__self__, *,
                 alias_context: Optional[pulumi.Input['AliasContextArgs']] = None,
                 alias_name: Optional[pulumi.Input[str]] = None,
                 gerrit_project: Optional[pulumi.Input[str]] = None,
                 host_uri: Optional[pulumi.Input[str]] = None,
                 revision_id: Optional[pulumi.Input[str]] = None):
        """
        A SourceContext referring to a Gerrit project.
        :param pulumi.Input['AliasContextArgs'] alias_context: An alias, which may be a branch or tag.
        :param pulumi.Input[str] alias_name: The name of an alias (branch, tag, etc.).
        :param pulumi.Input[str] gerrit_project: The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
        :param pulumi.Input[str] host_uri: The URI of a running Gerrit instance.
        :param pulumi.Input[str] revision_id: A revision (commit) ID.
        """
        if alias_context is not None:
            pulumi.set(__self__, "alias_context", alias_context)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)
        if gerrit_project is not None:
            pulumi.set(__self__, "gerrit_project", gerrit_project)
        if host_uri is not None:
            pulumi.set(__self__, "host_uri", host_uri)
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)

    @property
    @pulumi.getter(name="aliasContext")
    def alias_context(self) -> Optional[pulumi.Input['AliasContextArgs']]:
        """
        An alias, which may be a branch or tag.
        """
        return pulumi.get(self, "alias_context")

    @alias_context.setter
    def alias_context(self, value: Optional[pulumi.Input['AliasContextArgs']]):
        pulumi.set(self, "alias_context", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an alias (branch, tag, etc.).
        """
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)

    @property
    @pulumi.getter(name="gerritProject")
    def gerrit_project(self) -> Optional[pulumi.Input[str]]:
        """
        The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is hostURI/project.
        """
        return pulumi.get(self, "gerrit_project")

    @gerrit_project.setter
    def gerrit_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gerrit_project", value)

    @property
    @pulumi.getter(name="hostUri")
    def host_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of a running Gerrit instance.
        """
        return pulumi.get(self, "host_uri")

    @host_uri.setter
    def host_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_uri", value)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        A revision (commit) ID.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)


@pulumi.input_type
class GitSourceContextArgs:
    def __init__(__self__, *,
                 revision_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).
        :param pulumi.Input[str] revision_id: Git commit hash. required.
        :param pulumi.Input[str] url: Git repository URL.
        """
        if revision_id is not None:
            pulumi.set(__self__, "revision_id", revision_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="revisionId")
    def revision_id(self) -> Optional[pulumi.Input[str]]:
        """
        Git commit hash. required.
        """
        return pulumi.get(self, "revision_id")

    @revision_id.setter
    def revision_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revision_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Git repository URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProjectRepoIdArgs:
    def __init__(__self__, *,
                 project_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None):
        """
        Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.
        :param pulumi.Input[str] project_id: The ID of the project.
        :param pulumi.Input[str] repo_name: The name of the repo. Leave empty for the default repo.
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repo. Leave empty for the default repo.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)


@pulumi.input_type
class RepoIdArgs:
    def __init__(__self__, *,
                 project_repo_id: Optional[pulumi.Input['ProjectRepoIdArgs']] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        A unique identifier for a cloud repo.
        :param pulumi.Input['ProjectRepoIdArgs'] project_repo_id: A combination of a project ID and a repo name.
        :param pulumi.Input[str] uid: A server-assigned, globally unique identifier.
        """
        if project_repo_id is not None:
            pulumi.set(__self__, "project_repo_id", project_repo_id)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter(name="projectRepoId")
    def project_repo_id(self) -> Optional[pulumi.Input['ProjectRepoIdArgs']]:
        """
        A combination of a project ID and a repo name.
        """
        return pulumi.get(self, "project_repo_id")

    @project_repo_id.setter
    def project_repo_id(self, value: Optional[pulumi.Input['ProjectRepoIdArgs']]):
        pulumi.set(self, "project_repo_id", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        A server-assigned, globally unique identifier.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class SourceContextArgs:
    def __init__(__self__, *,
                 cloud_repo: Optional[pulumi.Input['CloudRepoSourceContextArgs']] = None,
                 cloud_workspace: Optional[pulumi.Input['CloudWorkspaceSourceContextArgs']] = None,
                 gerrit: Optional[pulumi.Input['GerritSourceContextArgs']] = None,
                 git: Optional[pulumi.Input['GitSourceContextArgs']] = None):
        """
        A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
        :param pulumi.Input['CloudRepoSourceContextArgs'] cloud_repo: A SourceContext referring to a revision in a cloud repo.
        :param pulumi.Input['CloudWorkspaceSourceContextArgs'] cloud_workspace: A SourceContext referring to a snapshot in a cloud workspace.
        :param pulumi.Input['GerritSourceContextArgs'] gerrit: A SourceContext referring to a Gerrit project.
        :param pulumi.Input['GitSourceContextArgs'] git: A SourceContext referring to any third party Git repo (e.g. GitHub).
        """
        if cloud_repo is not None:
            pulumi.set(__self__, "cloud_repo", cloud_repo)
        if cloud_workspace is not None:
            pulumi.set(__self__, "cloud_workspace", cloud_workspace)
        if gerrit is not None:
            pulumi.set(__self__, "gerrit", gerrit)
        if git is not None:
            pulumi.set(__self__, "git", git)

    @property
    @pulumi.getter(name="cloudRepo")
    def cloud_repo(self) -> Optional[pulumi.Input['CloudRepoSourceContextArgs']]:
        """
        A SourceContext referring to a revision in a cloud repo.
        """
        return pulumi.get(self, "cloud_repo")

    @cloud_repo.setter
    def cloud_repo(self, value: Optional[pulumi.Input['CloudRepoSourceContextArgs']]):
        pulumi.set(self, "cloud_repo", value)

    @property
    @pulumi.getter(name="cloudWorkspace")
    def cloud_workspace(self) -> Optional[pulumi.Input['CloudWorkspaceSourceContextArgs']]:
        """
        A SourceContext referring to a snapshot in a cloud workspace.
        """
        return pulumi.get(self, "cloud_workspace")

    @cloud_workspace.setter
    def cloud_workspace(self, value: Optional[pulumi.Input['CloudWorkspaceSourceContextArgs']]):
        pulumi.set(self, "cloud_workspace", value)

    @property
    @pulumi.getter
    def gerrit(self) -> Optional[pulumi.Input['GerritSourceContextArgs']]:
        """
        A SourceContext referring to a Gerrit project.
        """
        return pulumi.get(self, "gerrit")

    @gerrit.setter
    def gerrit(self, value: Optional[pulumi.Input['GerritSourceContextArgs']]):
        pulumi.set(self, "gerrit", value)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['GitSourceContextArgs']]:
        """
        A SourceContext referring to any third party Git repo (e.g. GitHub).
        """
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['GitSourceContextArgs']]):
        pulumi.set(self, "git", value)


@pulumi.input_type
class StatusMessageArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input['FormatMessageArgs']] = None,
                 is_error: Optional[pulumi.Input[bool]] = None,
                 refers_to: Optional[pulumi.Input[str]] = None):
        """
        Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
        :param pulumi.Input['FormatMessageArgs'] description: Status message text.
        :param pulumi.Input[bool] is_error: Distinguishes errors from informational messages.
        :param pulumi.Input[str] refers_to: Reference to which the message applies.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_error is not None:
            pulumi.set(__self__, "is_error", is_error)
        if refers_to is not None:
            pulumi.set(__self__, "refers_to", refers_to)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input['FormatMessageArgs']]:
        """
        Status message text.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input['FormatMessageArgs']]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isError")
    def is_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Distinguishes errors from informational messages.
        """
        return pulumi.get(self, "is_error")

    @is_error.setter
    def is_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_error", value)

    @property
    @pulumi.getter(name="refersTo")
    def refers_to(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to which the message applies.
        """
        return pulumi.get(self, "refers_to")

    @refers_to.setter
    def refers_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refers_to", value)


